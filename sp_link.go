// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// LinkReferrerpolicy represents the How much of the referrer to send when following the link.
type LinkReferrerpolicy string

// LinkReferrerpolicy values
const (
	LinkReferrerpolicyNoReferrer                  LinkReferrerpolicy = "no-referrer"
	LinkReferrerpolicyNoReferrerWhenDowngrade     LinkReferrerpolicy = "no-referrer-when-downgrade"
	LinkReferrerpolicyOrigin                      LinkReferrerpolicy = "origin"
	LinkReferrerpolicyOriginWhenCrossOrigin       LinkReferrerpolicy = "origin-when-cross-origin"
	LinkReferrerpolicySameOrigin                  LinkReferrerpolicy = "same-origin"
	LinkReferrerpolicyStrictOrigin                LinkReferrerpolicy = "strict-origin"
	LinkReferrerpolicyStrictOriginWhenCrossOrigin LinkReferrerpolicy = "strict-origin-when-cross-origin"
	LinkReferrerpolicyUnsafeUrl                   LinkReferrerpolicy = "unsafe-url"
)

// LinkStaticColor represents the A static color variant for the link, useful when placing on colored backgrounds
type LinkStaticColor string

// LinkStaticColor values
const (
	LinkStaticColorBlack LinkStaticColor = "black"
	LinkStaticColorWhite LinkStaticColor = "white"
)

// LinkTarget represents the Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
type LinkTarget string

// LinkTarget values
const (
	LinkTarget_blank  LinkTarget = "_blank"
	LinkTarget_parent LinkTarget = "_parent"
	LinkTarget_self   LinkTarget = "_self"
	LinkTarget_top    LinkTarget = "_top"
)

// LinkVariant represents the The visual variant of the link
type LinkVariant string

// LinkVariant values
const (
	LinkVariantSecondary LinkVariant = "secondary"
)

// spectrumLink represents an sp-link component
type spectrumLink struct {
	app.Compo
	*styler[*spectrumLink]
	*classer[*spectrumLink]
	*ider[*spectrumLink]

	// Properties
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Causes the browser to treat the linked URL as a download.
	PropDownload string
	// The URL that the hyperlink points to.
	PropHref string
	// An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
	PropLabel string
	// Whether to display the link without an underline
	PropQuiet bool
	// How much of the referrer to send when following the link.
	PropReferrerpolicy LinkReferrerpolicy
	// The relationship of the linked URL as space-separated link types.
	PropRel string
	// A static color variant for the link, useful when placing on colored backgrounds
	PropStaticColor LinkStaticColor
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64
	// Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
	PropTarget LinkTarget
	// The visual variant of the link
	PropVariant LinkVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnClick app.EventHandler
}

// ILink is the interface for sp-link component methods
type ILink interface {
	app.UI
	Styler[ILink]
	Classer[ILink]
	Ider[ILink]
	Disabled(bool) ILink
	SetDisabled() ILink
	Download(string) ILink
	Href(string) ILink
	Label(string) ILink
	Quiet(bool) ILink
	SetQuiet() ILink
	Referrerpolicy(LinkReferrerpolicy) ILink
	ReferrerpolicyNoReferrer() ILink
	ReferrerpolicyNoReferrerWhenDowngrade() ILink
	ReferrerpolicyOrigin() ILink
	ReferrerpolicyOriginWhenCrossOrigin() ILink
	ReferrerpolicySameOrigin() ILink
	ReferrerpolicyStrictOrigin() ILink
	ReferrerpolicyStrictOriginWhenCrossOrigin() ILink
	ReferrerpolicyUnsafeUrl() ILink
	Rel(string) ILink
	StaticColor(LinkStaticColor) ILink
	StaticColorBlack() ILink
	StaticColorWhite() ILink
	Tabindex(float64) ILink
	Target(LinkTarget) ILink
	Target_blank() ILink
	Target_parent() ILink
	Target_self() ILink
	Target_top() ILink
	Variant(LinkVariant) ILink
	VariantSecondary() ILink

	Body(...app.UI) ILink
	AddToBody(app.UI) ILink
	Text(string) ILink

	OnClick(app.EventHandler) ILink
}

// Link Links allow users to navigate to a different location. They can be presented in-line inside a paragraph or as standalone text.
func Link() ILink {
	element := &spectrumLink{
		PropDisabled: false,
		PropQuiet:    false,
		PropTabindex: 0,
		PropBody:     []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumLink) Disabled(disabled bool) ILink {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumLink) SetDisabled() ILink {
	return c.Disabled(true)
}

// Download Causes the browser to treat the linked URL as a download.
func (c *spectrumLink) Download(download string) ILink {
	c.PropDownload = download
	return c
}

// Href The URL that the hyperlink points to.
func (c *spectrumLink) Href(href string) ILink {
	c.PropHref = href
	return c
}

// Label An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
func (c *spectrumLink) Label(label string) ILink {
	c.PropLabel = label
	return c
}

// Quiet Whether to display the link without an underline
func (c *spectrumLink) Quiet(quiet bool) ILink {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumLink) SetQuiet() ILink {
	return c.Quiet(true)
}

// Referrerpolicy How much of the referrer to send when following the link.
func (c *spectrumLink) Referrerpolicy(referrerpolicy LinkReferrerpolicy) ILink {
	c.PropReferrerpolicy = referrerpolicy
	return c
}

func (c *spectrumLink) ReferrerpolicyNoReferrer() ILink {
	return c.Referrerpolicy(LinkReferrerpolicyNoReferrer)
}
func (c *spectrumLink) ReferrerpolicyNoReferrerWhenDowngrade() ILink {
	return c.Referrerpolicy(LinkReferrerpolicyNoReferrerWhenDowngrade)
}
func (c *spectrumLink) ReferrerpolicyOrigin() ILink {
	return c.Referrerpolicy(LinkReferrerpolicyOrigin)
}
func (c *spectrumLink) ReferrerpolicyOriginWhenCrossOrigin() ILink {
	return c.Referrerpolicy(LinkReferrerpolicyOriginWhenCrossOrigin)
}
func (c *spectrumLink) ReferrerpolicySameOrigin() ILink {
	return c.Referrerpolicy(LinkReferrerpolicySameOrigin)
}
func (c *spectrumLink) ReferrerpolicyStrictOrigin() ILink {
	return c.Referrerpolicy(LinkReferrerpolicyStrictOrigin)
}
func (c *spectrumLink) ReferrerpolicyStrictOriginWhenCrossOrigin() ILink {
	return c.Referrerpolicy(LinkReferrerpolicyStrictOriginWhenCrossOrigin)
}
func (c *spectrumLink) ReferrerpolicyUnsafeUrl() ILink {
	return c.Referrerpolicy(LinkReferrerpolicyUnsafeUrl)
}

// Rel The relationship of the linked URL as space-separated link types.
func (c *spectrumLink) Rel(rel string) ILink {
	c.PropRel = rel
	return c
}

// StaticColor A static color variant for the link, useful when placing on colored backgrounds
func (c *spectrumLink) StaticColor(staticColor LinkStaticColor) ILink {
	c.PropStaticColor = staticColor
	return c
}

func (c *spectrumLink) StaticColorBlack() ILink {
	return c.StaticColor(LinkStaticColorBlack)
}
func (c *spectrumLink) StaticColorWhite() ILink {
	return c.StaticColor(LinkStaticColorWhite)
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumLink) Tabindex(tabindex float64) ILink {
	c.PropTabindex = tabindex
	return c
}

// Target Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
func (c *spectrumLink) Target(target LinkTarget) ILink {
	c.PropTarget = target
	return c
}

func (c *spectrumLink) Target_blank() ILink {
	return c.Target(LinkTarget_blank)
}
func (c *spectrumLink) Target_parent() ILink {
	return c.Target(LinkTarget_parent)
}
func (c *spectrumLink) Target_self() ILink {
	return c.Target(LinkTarget_self)
}
func (c *spectrumLink) Target_top() ILink {
	return c.Target(LinkTarget_top)
}

// Variant The visual variant of the link
func (c *spectrumLink) Variant(variant LinkVariant) ILink {
	c.PropVariant = variant
	return c
}

func (c *spectrumLink) VariantSecondary() ILink {
	return c.Variant(LinkVariantSecondary)
}

// Body sets the content for the default slot
func (c *spectrumLink) Body(elements ...app.UI) ILink {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumLink) AddToBody(element app.UI) ILink {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumLink) Text(text string) ILink {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Fired when the link is clicked
func (c *spectrumLink) OnClick(handler app.EventHandler) ILink {
	c.PropOnClick = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumLink) Style(key, format string, values ...any) ILink {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumLink) Styles(styles map[string]string) ILink {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumLink) Class(class string) ILink {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumLink) Classes(classes ...string) ILink {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumLink) Id(id string) ILink {
	return c.ider.Id(id)
}

// Render renders the sp-link component
func (c *spectrumLink) Render() app.UI {
	element := app.Elem("sp-link")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropDownload != "" {
		element = element.Attr("download", c.PropDownload)
	}
	if c.PropHref != "" {
		element = element.Attr("href", c.PropHref)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropReferrerpolicy != "" {
		element = element.Attr("referrerpolicy", string(c.PropReferrerpolicy))
	}
	if c.PropRel != "" {
		element = element.Attr("rel", c.PropRel)
	}
	if c.PropStaticColor != "" {
		element = element.Attr("static-color", string(c.PropStaticColor))
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabindex", c.PropTabindex)
	}
	if c.PropTarget != "" {
		element = element.Attr("target", string(c.PropTarget))
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnClick != nil {
		element = element.On("click", c.PropOnClick)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
