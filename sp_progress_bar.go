// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ProgressBarSize represents the The size of the progress bar
type ProgressBarSize string

// ProgressBarSize values
const (
	ProgressBarSizeS  ProgressBarSize = "s"
	ProgressBarSizeM  ProgressBarSize = "m"
	ProgressBarSizeL  ProgressBarSize = "l"
	ProgressBarSizeXl ProgressBarSize = "xl"
)

// ProgressBarStaticColor represents the A static color variant for the progress bar
type ProgressBarStaticColor string

// ProgressBarStaticColor values
const (
	ProgressBarStaticColorWhite ProgressBarStaticColor = "white"
)

// spectrumProgressBar represents an sp-progress-bar component
type spectrumProgressBar struct {
	app.Compo
	*styler[*spectrumProgressBar]
	*classer[*spectrumProgressBar]
	*ider[*spectrumProgressBar]

	// Properties
	// Whether progress is indeterminate (unknown duration)
	PropIndeterminate bool
	// Text label to display with the progress bar
	PropLabel string
	// Whether the progress bar is displayed over a colored background
	PropOverBackground bool
	// The progress value from 0-100
	PropProgress float64
	// Whether to display the label beside the progress bar instead of above it
	PropSideLabel bool
	// The size of the progress bar
	PropSize ProgressBarSize
	// A static color variant for the progress bar
	PropStaticColor ProgressBarStaticColor
}

// IProgressBar is the interface for sp-progress-bar component methods
type IProgressBar interface {
	app.UI
	Styler[IProgressBar]
	Classer[IProgressBar]
	Ider[IProgressBar]
	Indeterminate(bool) IProgressBar
	SetIndeterminate() IProgressBar
	Label(string) IProgressBar
	OverBackground(bool) IProgressBar
	SetOverBackground() IProgressBar
	Progress(float64) IProgressBar
	SideLabel(bool) IProgressBar
	SetSideLabel() IProgressBar
	Size(ProgressBarSize) IProgressBar
	SizeS() IProgressBar
	SizeM() IProgressBar
	SizeL() IProgressBar
	SizeXl() IProgressBar
	StaticColor(ProgressBarStaticColor) IProgressBar
	StaticColorWhite() IProgressBar
}

// ProgressBar A progress bar shows the progression of a system operation such as downloading, uploading, processing, etc. in a visual way. It can represent determinate or indeterminate progress.
func ProgressBar() IProgressBar {
	element := &spectrumProgressBar{
		PropIndeterminate:  false,
		PropLabel:          "",
		PropOverBackground: false,
		PropProgress:       0,
		PropSideLabel:      false,
		PropSize:           ProgressBarSizeM,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Indeterminate Whether progress is indeterminate (unknown duration)
func (c *spectrumProgressBar) Indeterminate(indeterminate bool) IProgressBar {
	c.PropIndeterminate = indeterminate
	return c
}

func (c *spectrumProgressBar) SetIndeterminate() IProgressBar {
	return c.Indeterminate(true)
}

// Label Text label to display with the progress bar
func (c *spectrumProgressBar) Label(label string) IProgressBar {
	c.PropLabel = label
	return c
}

// OverBackground Whether the progress bar is displayed over a colored background
func (c *spectrumProgressBar) OverBackground(overBackground bool) IProgressBar {
	c.PropOverBackground = overBackground
	return c
}

func (c *spectrumProgressBar) SetOverBackground() IProgressBar {
	return c.OverBackground(true)
}

// Progress The progress value from 0-100
func (c *spectrumProgressBar) Progress(progress float64) IProgressBar {
	c.PropProgress = progress
	return c
}

// SideLabel Whether to display the label beside the progress bar instead of above it
func (c *spectrumProgressBar) SideLabel(sideLabel bool) IProgressBar {
	c.PropSideLabel = sideLabel
	return c
}

func (c *spectrumProgressBar) SetSideLabel() IProgressBar {
	return c.SideLabel(true)
}

// Size The size of the progress bar
func (c *spectrumProgressBar) Size(size ProgressBarSize) IProgressBar {
	c.PropSize = size
	return c
}

func (c *spectrumProgressBar) SizeS() IProgressBar {
	return c.Size(ProgressBarSizeS)
}
func (c *spectrumProgressBar) SizeM() IProgressBar {
	return c.Size(ProgressBarSizeM)
}
func (c *spectrumProgressBar) SizeL() IProgressBar {
	return c.Size(ProgressBarSizeL)
}
func (c *spectrumProgressBar) SizeXl() IProgressBar {
	return c.Size(ProgressBarSizeXl)
}

// StaticColor A static color variant for the progress bar
func (c *spectrumProgressBar) StaticColor(staticColor ProgressBarStaticColor) IProgressBar {
	c.PropStaticColor = staticColor
	return c
}

func (c *spectrumProgressBar) StaticColorWhite() IProgressBar {
	return c.StaticColor(ProgressBarStaticColorWhite)
}

// Style sets a style property with a value
func (c *spectrumProgressBar) Style(key, format string, values ...any) IProgressBar {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumProgressBar) Styles(styles map[string]string) IProgressBar {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumProgressBar) Class(class string) IProgressBar {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumProgressBar) Classes(classes ...string) IProgressBar {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumProgressBar) Id(id string) IProgressBar {
	return c.ider.Id(id)
}

// Render renders the sp-progress-bar component
func (c *spectrumProgressBar) Render() app.UI {
	element := app.Elem("sp-progress-bar")

	// Set attributes
	if c.PropIndeterminate {
		element = element.Attr("indeterminate", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropOverBackground {
		element = element.Attr("over-background", true)
	}
	if c.PropProgress != 0 {
		element = element.Attr("progress", c.PropProgress)
	}
	if c.PropSideLabel {
		element = element.Attr("side-label", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropStaticColor != "" {
		element = element.Attr("static-color", string(c.PropStaticColor))
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
