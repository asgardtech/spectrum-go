// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

{% if component.attributes %}
{# Generate enum types #}
{% for attr in component.attributes %}
{% if attr.type == "enum" and attr.values_list %}
// {{ attr.go_type }} represents the {{ attr.description|default(attr.name) }}
type {{ attr.go_type }} string

// {{ attr.go_type }} values
const (
{% for value in attr.values_list %}
{% if value != "" %}
    {{ attr.go_type }}{{ value|replace("-", " ")|title|replace(" ", "") }} {{ attr.go_type }} = "{{ value }}"
{% endif %}
{% endfor %}
)
{% endif %}
{% endfor %}
{% endif %}

// {{ component.struct_name }} represents an {{ component.tagName }} component
type {{ component.struct_name }} struct {
    app.Compo
    *styler[*{{ component.struct_name }}]
    *classer[*{{ component.struct_name }}]
    *ider[*{{ component.struct_name }}]

    // Properties
{% for attr in component.attributes %}
    {% if attr.description %}
    // {{ attr.description }}
    {% endif %}
    {{ attr.prop_name }} {{ attr.go_type }}
{% endfor %}

{% if component.has_default_slot %}
    // Content for default slot
    PropBody []app.UI
{% endif %}

{% if component.slots %}
    // Content slots
{% for slot in component.slots %}
{% if slot.name != "default" %}
    {{ slot.prop_name }} app.UI
{% endif %}
{% endfor %}
{% endif %}

{% if component.children %}
    // Child components
    PropChildren []app.UI
{% endif %}

{% if component.events %}
    // Event handlers
{% for event in component.events %}
    {{ event.prop_name }} app.EventHandler
{% endfor %}
{% endif %}
}

// I{{ component.name }} is the interface for {{ component.tagName }} component methods
type I{{ component.name }} interface {
    app.UI
    Styler[I{{ component.name }}]
    Classer[I{{ component.name }}]
    Ider[I{{ component.name }}]
{% for attr in component.attributes %}
    {{ attr.go_name }}({{ attr.go_type }}) I{{ component.name }}
    {% if attr.type == "boolean" %}
    Set{{ attr.go_name }}() I{{ component.name }}
    {% endif %}
    {% if attr.type == "enum" and attr.values_list %}
    {% for value in attr.values_list %}
    {% if value != "" %}
    {{ attr.go_name }}{{ value|replace("-", " ")|title|replace(" ", "") }}() I{{ component.name }}
    {% endif %}
    {% endfor %}
    {% endif %}
{% endfor %}

{% if component.has_default_slot %}
    Body(...app.UI) I{{ component.name }}
    AddToBody(app.UI) I{{ component.name }}
    Text(string) I{{ component.name }}
{% endif %}

{% for slot in component.slots %}
{% if slot.name != "default" %}
    {{ slot.go_name }}(app.UI) I{{ component.name }}
{% endif %}
{% endfor %}

{% if component.children %}
    Children(...app.UI) I{{ component.name }}
    AddChild(app.UI) I{{ component.name }}
{% endif %}

{% for event in component.events %}
    On{{ event.go_name }}(app.EventHandler) I{{ component.name }}
{% endfor %}
}

{% if component.description %}
// {{ component.name }} {{ component.description }}
{% else %}
// {{ component.name }} creates a new {{ component.tagName }} component
{% endif %}
func {{ component.name }}() I{{ component.name }} {
    element := &{{ component.struct_name }}{
{% for attr in component.attributes %}
{% if attr.default is defined and attr.default is not none %}
        {{ attr.prop_name }}: {% if attr.type == "string" %}"{{ attr.default }}"{% elif attr.type == "boolean" %}{{ "true" if attr.default else "false" }}{% elif attr.type == "enum" %}{% if attr.default %}{{ attr.go_type }}{{ attr.default|replace("-", " ")|title|replace(" ", "") }}{% else %}""{% endif %}{% elif attr.type == "object" %}map[string]interface{}{}{% else %}{{ attr.default }}{% endif %},
{% elif attr.type == "array" %}
        {{ attr.prop_name }}: {{ attr.init_value }},
{% elif attr.type == "object" %}
        {{ attr.prop_name }}: map[string]interface{}{},
{% endif %}
{% endfor %}
{% if component.has_default_slot %}
        PropBody: []app.UI{},
{% endif %}
    }

    element.styler = newStyler(element)
    element.classer = newClasser(element)
    element.ider = newIder(element)

    return element
}

{% for attr in component.attributes %}
{% if attr.description %}
// {{ attr.go_name }} {{ attr.description }}
{% else %}
// {{ attr.go_name }} sets the {{ attr.name }} attribute
{% endif %}
func (c *{{ component.struct_name }}) {{ attr.go_name }}({% if attr.parameter_name == "type" %}typeValue{% elif attr.parameter_name == "for" %}forValue{% elif attr.parameter_name == "range" %}rangeValue{% elif attr.parameter_name == "select" %}selectValue{% elif attr.parameter_name == "map" %}mapValue{% elif attr.parameter_name == "interface" %}interfaceValue{% elif attr.parameter_name == "switch" %}switchValue{% elif attr.parameter_name == "case" %}caseValue{% elif attr.parameter_name == "default" %}defaultValue{% elif attr.parameter_name == "func" %}funcValue{% elif attr.parameter_name == "defer" %}deferValue{% elif attr.parameter_name == "package" %}packageValue{% elif attr.parameter_name == "import" %}importValue{% elif attr.parameter_name == "go" %}goValue{% else %}{{ attr.parameter_name }}{% endif %} {{ attr.go_type }}) I{{ component.name }} {
    c.{{ attr.prop_name }} = {% if attr.parameter_name == "type" %}typeValue{% elif attr.parameter_name == "for" %}forValue{% elif attr.parameter_name == "range" %}rangeValue{% elif attr.parameter_name == "select" %}selectValue{% elif attr.parameter_name == "map" %}mapValue{% elif attr.parameter_name == "interface" %}interfaceValue{% elif attr.parameter_name == "switch" %}switchValue{% elif attr.parameter_name == "case" %}caseValue{% elif attr.parameter_name == "default" %}defaultValue{% elif attr.parameter_name == "func" %}funcValue{% elif attr.parameter_name == "defer" %}deferValue{% elif attr.parameter_name == "package" %}packageValue{% elif attr.parameter_name == "import" %}importValue{% elif attr.parameter_name == "go" %}goValue{% else %}{{ attr.parameter_name }}{% endif %}

    return c
}

{% if attr.type == "boolean" %}
func (c *{{ component.struct_name }}) Set{{ attr.go_name }}() I{{ component.name }} {
    return c.{{ attr.go_name }}(true)
}

{% endif %}
{% if attr.type == "enum" and attr.values_list %}
{% for value in attr.values_list %}
{% if value != "" %}
func (c *{{ component.struct_name }}) {{ attr.go_name }}{{ value|replace("-", " ")|title|replace(" ", "") }}() I{{ component.name }} {
    return c.{{ attr.go_name }}({{ attr.go_type }}{{ value|replace("-", " ")|title|replace(" ", "") }})
}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

{% if component.has_default_slot %}
// Body sets the content for the default slot
func (c *{{ component.struct_name }}) Body(elements ...app.UI) I{{ component.name }} {
    c.PropBody = elements
    return c
}

// AddToBody adds a UI element to the default slot
func (c *{{ component.struct_name }}) AddToBody(element app.UI) I{{ component.name }} {
    c.PropBody = append(c.PropBody, element)
    return c
}

// Text sets text content for the default slot
func (c *{{ component.struct_name }}) Text(text string) I{{ component.name }} {
    c.PropBody = []app.UI{app.Text(text)}
    return c
}

{% endif %}

{% for slot in component.slots %}
{% if slot.name != "default" %}
{% if slot.description %}
// {{ slot.description }}
{% endif %}
func (c *{{ component.struct_name }}) {{ slot.go_name }}(content app.UI) I{{ component.name }} {
    c.{{ slot.prop_name }} = content

    return c
}

{% endif %}
{% endfor %}

{% if component.children %}
// Children sets the child components
func (c *{{ component.struct_name }}) Children(children ...app.UI) I{{ component.name }} {
    c.PropChildren = children

    return c
}

// AddChild adds a child component
func (c *{{ component.struct_name }}) AddChild(child app.UI) I{{ component.name }} {
    c.PropChildren = append(c.PropChildren, child)

    return c
}

{% endif %}

{% for event in component.events %}
{% if event.description %}
// {{ event.description }}
{% endif %}
func (c *{{ component.struct_name }}) On{{ event.go_name }}(handler app.EventHandler) I{{ component.name }} {
    c.{{ event.prop_name }} = handler

    return c
}

{% endfor %}

// Style sets a style property with a value
func (c *{{ component.struct_name }}) Style(key, format string, values ...any) I{{ component.name }} {
    return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *{{ component.struct_name }}) Styles(styles map[string]string) I{{ component.name }} {
    return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *{{ component.struct_name }}) Class(class string) I{{ component.name }} {
    return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *{{ component.struct_name }}) Classes(classes ...string) I{{ component.name }} {
    return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *{{ component.struct_name }}) Id(id string) I{{ component.name }} {
    return c.ider.Id(id)
}

// Render renders the {{ component.tagName }} component
func (c *{{ component.struct_name }}) Render() app.UI {
    element := app.Elem("{{ component.tagName }}")

    // Set attributes
{% for attr in component.attributes %}
{% if attr.type == "boolean" %}
    if c.{{ attr.prop_name }} {
        element = element.Attr("{{ attr.name }}", true)
    }
{% elif attr.type == "string" or attr.go_type == "string" %}
    if c.{{ attr.prop_name }} != "" {
        element = element.Attr("{{ attr.name }}", c.{{ attr.prop_name }})
    }
{% elif attr.type == "enum" %}
    if c.{{ attr.prop_name }} != "" {
        element = element.Attr("{{ attr.name }}", string(c.{{ attr.prop_name }}))
    }
{% elif attr.type == "array" %}
    if len(c.{{ attr.prop_name }}) > 0 {
        element = element.Attr("{{ attr.name }}", c.{{ attr.prop_name }})
    }
{% elif attr.type == "number" or attr.type == "integer" %}
    if c.{{ attr.prop_name }} != 0 {
        element = element.Attr("{{ attr.name }}", c.{{ attr.prop_name }})
    }
{% elif attr.type == "object" %}
    if c.{{ attr.prop_name }} != nil {
        element = element.Attr("{{ attr.name }}", c.{{ attr.prop_name }})
    }
{% else %}
    if c.{{ attr.prop_name }} != nil {
        element = element.Attr("{{ attr.name }}", c.{{ attr.prop_name }})
    }
{% endif %}
{% endfor %}

{% if component.events %}
    // Add event handlers
{% for event in component.events %}
    if c.{{ event.prop_name }} != nil {
        element = element.On("{{ event.name }}", c.{{ event.prop_name }})
    }
{% endfor %}
{% endif %}

{% if component.slots or component.children or component.has_default_slot %}
    // Add slots and children
    slotElements := []app.UI{}

{% if component.has_default_slot %}
    // Add content for default slot if specified
    if len(c.PropBody) > 0 {
        slotElements = append(slotElements, c.PropBody...)
    }
{% endif %}

{% for slot in component.slots %}
{% if slot.name != "default" %}
    // Add {{ slot.name }} slot
    if c.{{ slot.prop_name }} != nil {
        slotElem := c.{{ slot.prop_name }}
        if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
            slotElem = slotWithAttr.Slot("{{ slot.name }}")
        } else {
            slotElem = app.Elem("div").
                Attr("slot", "{{ slot.name }}").
                Body(slotElem)
        }
        slotElements = append(slotElements, slotElem)
    }
{% endif %}
{% endfor %}

{% if component.children %}
    // Add children if no default slot content is provided
    if len(c.PropChildren) > 0 {
        {% if component.has_default_slot %}
        // If there's a default slot, only add children if the default slot is empty
        if len(c.PropBody) == 0 {
            for _, child := range c.PropChildren {
                slotElements = append(slotElements, child)
            }
        }
        {% else %}
        // Add all children if there's no default slot
        for _, child := range c.PropChildren {
            slotElements = append(slotElements, child)
        }
        {% endif %}
    }
{% endif %}

    // Add all elements to the component
    if len(slotElements) > 0 {
        element = element.Body(slotElements...)
    }
{% endif %}

    // Apply styles, classes, and id
    element = element.Styles(c.styler.styles)
    
    // Apply classes if any
    if len(c.classer.classes) > 0 {
        element = element.Class(c.classer.classes...)
    }
    
    // Apply id if set
    if c.ider.id != "" {
        element = element.ID(c.ider.id)
    }

    return element
} 