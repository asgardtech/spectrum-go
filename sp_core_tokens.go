// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumCoreTokens represents an  component
type spectrumCoreTokens struct {
	app.Compo
	*styler[*spectrumCoreTokens]
	*classer[*spectrumCoreTokens]
	*ider[*spectrumCoreTokens]

	// Properties
	// Custom property used to support calculating the difference between delivery in medium and large scales
	PropSwcScaleFactor string
}

// ICoreTokens is the interface for  component methods
type ICoreTokens interface {
	app.UI
	Styler[ICoreTokens]
	Classer[ICoreTokens]
	Ider[ICoreTokens]
	SwcScaleFactor(string) ICoreTokens
}

// CoreTokens Design token collections that support both the Spectrum Vars and Spectrum Core Tokens design systems. Used to facilitate migration from the older Spectrum Vars ecosystem to the Core Tokens ecosystem.
func CoreTokens() ICoreTokens {
	element := &spectrumCoreTokens{
		PropSwcScaleFactor: "1",
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// SwcScaleFactor Custom property used to support calculating the difference between delivery in medium and large scales
func (c *spectrumCoreTokens) SwcScaleFactor(swcScaleFactor string) ICoreTokens {
	c.PropSwcScaleFactor = swcScaleFactor
	return c
}

// Style sets a style property with a value
func (c *spectrumCoreTokens) Style(key, format string, values ...any) ICoreTokens {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumCoreTokens) Styles(styles map[string]string) ICoreTokens {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumCoreTokens) Class(class string) ICoreTokens {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumCoreTokens) Classes(classes ...string) ICoreTokens {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumCoreTokens) Id(id string) ICoreTokens {
	return c.ider.Id(id)
}

// Render renders the  component
func (c *spectrumCoreTokens) Render() app.UI {
	element := app.Elem("")

	// Set attributes
	if c.PropSwcScaleFactor != "" {
		element = element.Attr("swc-scale-factor", c.PropSwcScaleFactor)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
