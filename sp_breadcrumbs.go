// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumBreadcrumbs represents an sp-breadcrumbs component
type spectrumBreadcrumbs struct {
	app.Compo
	*styler[*spectrumBreadcrumbs]
	*classer[*spectrumBreadcrumbs]
	*ider[*spectrumBreadcrumbs]

	// Properties
	// Compact option is useful for reducing the height of the breadcrumbs
	PropCompact bool
	// Accessible name for the Breadcrumbs component
	PropLabel string
	// Override the maximum number of visible items
	PropMaxVisibleItems float64
	// Change the default label of the action menu
	PropMenuLabel string

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropIconSlot app.UI
	PropRootSlot app.UI

	// Event handlers
	PropOnChange app.EventHandler
}

// IBreadcrumbs is the interface for sp-breadcrumbs component methods
type IBreadcrumbs interface {
	app.UI
	Styler[IBreadcrumbs]
	Classer[IBreadcrumbs]
	Ider[IBreadcrumbs]
	Compact(bool) IBreadcrumbs
	SetCompact() IBreadcrumbs
	Label(string) IBreadcrumbs
	MaxVisibleItems(float64) IBreadcrumbs
	MenuLabel(string) IBreadcrumbs

	Body(...app.UI) IBreadcrumbs
	AddToBody(app.UI) IBreadcrumbs
	Text(string) IBreadcrumbs

	Icon(app.UI) IBreadcrumbs
	Root(app.UI) IBreadcrumbs

	OnChange(app.EventHandler) IBreadcrumbs
}

// Breadcrumbs A sp-breadcrumbs component displays a hierarchy of links to the current page or resource in an application.
func Breadcrumbs() IBreadcrumbs {
	element := &spectrumBreadcrumbs{
		PropCompact:         false,
		PropLabel:           "",
		PropMaxVisibleItems: 4,
		PropMenuLabel:       "More items",
		PropBody:            []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Compact Compact option is useful for reducing the height of the breadcrumbs
func (c *spectrumBreadcrumbs) Compact(compact bool) IBreadcrumbs {
	c.PropCompact = compact
	return c
}

func (c *spectrumBreadcrumbs) SetCompact() IBreadcrumbs {
	return c.Compact(true)
}

// Label Accessible name for the Breadcrumbs component
func (c *spectrumBreadcrumbs) Label(label string) IBreadcrumbs {
	c.PropLabel = label
	return c
}

// MaxVisibleItems Override the maximum number of visible items
func (c *spectrumBreadcrumbs) MaxVisibleItems(maxVisibleItems float64) IBreadcrumbs {
	c.PropMaxVisibleItems = maxVisibleItems
	return c
}

// MenuLabel Change the default label of the action menu
func (c *spectrumBreadcrumbs) MenuLabel(menuLabel string) IBreadcrumbs {
	c.PropMenuLabel = menuLabel
	return c
}

// Body sets the content for the default slot
func (c *spectrumBreadcrumbs) Body(elements ...app.UI) IBreadcrumbs {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumBreadcrumbs) AddToBody(element app.UI) IBreadcrumbs {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumBreadcrumbs) Text(text string) IBreadcrumbs {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Change the default icon of the action menu
func (c *spectrumBreadcrumbs) Icon(content app.UI) IBreadcrumbs {
	c.PropIconSlot = content

	return c
}

// Breadcrumb item to always display
func (c *spectrumBreadcrumbs) Root(content app.UI) IBreadcrumbs {
	c.PropRootSlot = content

	return c
}

// Announces the selected breadcrumb item
func (c *spectrumBreadcrumbs) OnChange(handler app.EventHandler) IBreadcrumbs {
	c.PropOnChange = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumBreadcrumbs) Style(key, format string, values ...any) IBreadcrumbs {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumBreadcrumbs) Styles(styles map[string]string) IBreadcrumbs {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumBreadcrumbs) Class(class string) IBreadcrumbs {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumBreadcrumbs) Classes(classes ...string) IBreadcrumbs {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumBreadcrumbs) Id(id string) IBreadcrumbs {
	return c.ider.Id(id)
}

// Render renders the sp-breadcrumbs component
func (c *spectrumBreadcrumbs) Render() app.UI {
	element := app.Elem("sp-breadcrumbs")

	// Set attributes
	if c.PropCompact {
		element = element.Attr("compact", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropMaxVisibleItems != 0 {
		element = element.Attr("max-visible-items", c.PropMaxVisibleItems)
	}
	if c.PropMenuLabel != "" {
		element = element.Attr("menu-label", c.PropMenuLabel)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add icon slot
	if c.PropIconSlot != nil {
		slotElem := c.PropIconSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("icon")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "icon").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add root slot
	if c.PropRootSlot != nil {
		slotElem := c.PropRootSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("root")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "root").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
