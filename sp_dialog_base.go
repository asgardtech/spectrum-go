// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// DialogBaseMode represents the The display mode of the dialog
type DialogBaseMode string

// DialogBaseMode values
const (
	DialogBaseModeFullscreen         DialogBaseMode = "fullscreen"
	DialogBaseModeFullscreentakeover DialogBaseMode = "fullscreenTakeover"
)

// spectrumDialogBase represents an sp-dialog-base component
type spectrumDialogBase struct {
	app.Compo
	*styler[*spectrumDialogBase]
	*classer[*spectrumDialogBase]
	*ider[*spectrumDialogBase]

	// Properties
	// Whether the dialog is dismissable
	PropDismissable bool
	// The display mode of the dialog
	PropMode DialogBaseMode
	// Whether the dialog is open
	PropOpen bool
	// When set to true, fills screens smaller than 350px high and 400px wide with the full dialog
	PropResponsive bool
	// Whether to show an underlay beneath the dialog
	PropUnderlay bool

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnClose app.EventHandler
}

// IDialogBase is the interface for sp-dialog-base component methods
type IDialogBase interface {
	app.UI
	Styler[IDialogBase]
	Classer[IDialogBase]
	Ider[IDialogBase]
	Dismissable(bool) IDialogBase
	SetDismissable() IDialogBase
	Mode(DialogBaseMode) IDialogBase
	ModeFullscreen() IDialogBase
	ModeFullscreentakeover() IDialogBase
	Open(bool) IDialogBase
	SetOpen() IDialogBase
	Responsive(bool) IDialogBase
	SetResponsive() IDialogBase
	Underlay(bool) IDialogBase
	SetUnderlay() IDialogBase

	Body(...app.UI) IDialogBase
	AddToBody(app.UI) IDialogBase
	Text(string) IDialogBase

	OnClose(app.EventHandler) IDialogBase
}

// DialogBase Accepts slotted dialog content and presents that content in a container that is animated into place when toggling the open attribute.
func DialogBase() IDialogBase {
	element := &spectrumDialogBase{
		PropDismissable: false,
		PropMode:        "",
		PropOpen:        false,
		PropResponsive:  false,
		PropUnderlay:    false,
		PropBody:        []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Dismissable Whether the dialog is dismissable
func (c *spectrumDialogBase) Dismissable(dismissable bool) IDialogBase {
	c.PropDismissable = dismissable
	return c
}

func (c *spectrumDialogBase) SetDismissable() IDialogBase {
	return c.Dismissable(true)
}

// Mode The display mode of the dialog
func (c *spectrumDialogBase) Mode(mode DialogBaseMode) IDialogBase {
	c.PropMode = mode
	return c
}

func (c *spectrumDialogBase) ModeFullscreen() IDialogBase {
	return c.Mode(DialogBaseModeFullscreen)
}
func (c *spectrumDialogBase) ModeFullscreentakeover() IDialogBase {
	return c.Mode(DialogBaseModeFullscreentakeover)
}

// Open Whether the dialog is open
func (c *spectrumDialogBase) Open(open bool) IDialogBase {
	c.PropOpen = open
	return c
}

func (c *spectrumDialogBase) SetOpen() IDialogBase {
	return c.Open(true)
}

// Responsive When set to true, fills screens smaller than 350px high and 400px wide with the full dialog
func (c *spectrumDialogBase) Responsive(responsive bool) IDialogBase {
	c.PropResponsive = responsive
	return c
}

func (c *spectrumDialogBase) SetResponsive() IDialogBase {
	return c.Responsive(true)
}

// Underlay Whether to show an underlay beneath the dialog
func (c *spectrumDialogBase) Underlay(underlay bool) IDialogBase {
	c.PropUnderlay = underlay
	return c
}

func (c *spectrumDialogBase) SetUnderlay() IDialogBase {
	return c.Underlay(true)
}

// Body sets the content for the default slot
func (c *spectrumDialogBase) Body(elements ...app.UI) IDialogBase {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumDialogBase) AddToBody(element app.UI) IDialogBase {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumDialogBase) Text(text string) IDialogBase {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Announces that the dialog has been closed
func (c *spectrumDialogBase) OnClose(handler app.EventHandler) IDialogBase {
	c.PropOnClose = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumDialogBase) Style(key, format string, values ...any) IDialogBase {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumDialogBase) Styles(styles map[string]string) IDialogBase {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumDialogBase) Class(class string) IDialogBase {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumDialogBase) Classes(classes ...string) IDialogBase {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumDialogBase) Id(id string) IDialogBase {
	return c.ider.Id(id)
}

// Render renders the sp-dialog-base component
func (c *spectrumDialogBase) Render() app.UI {
	element := app.Elem("sp-dialog-base")

	// Set attributes
	if c.PropDismissable {
		element = element.Attr("dismissable", true)
	}
	if c.PropMode != "" {
		element = element.Attr("mode", string(c.PropMode))
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropResponsive {
		element = element.Attr("responsive", true)
	}
	if c.PropUnderlay {
		element = element.Attr("underlay", true)
	}

	// Add event handlers
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
