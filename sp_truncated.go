// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumTruncated represents an sp-truncated component
type spectrumTruncated struct {
	app.Compo
	*styler[*spectrumTruncated]
	*classer[*spectrumTruncated]
	*ider[*spectrumTruncated]

	// Properties
	// Where the tooltip should be positioned relative to the truncated content
	PropPlacement string

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropOverflowSlot app.UI
}

// ITruncated is the interface for sp-truncated component methods
type ITruncated interface {
	app.UI
	Styler[ITruncated]
	Classer[ITruncated]
	Ider[ITruncated]
	Placement(string) ITruncated

	Body(...app.UI) ITruncated
	AddToBody(app.UI) ITruncated
	Text(string) ITruncated

	Overflow(app.UI) ITruncated
}

// Truncated An sp-truncated element renders a line of text, truncating it if it overflows its container. When overflowing, a tooltip is automatically created that renders the entire non-truncated content.
func Truncated() ITruncated {
	element := &spectrumTruncated{
		PropPlacement: "bottom",
		PropBody:      []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Placement Where the tooltip should be positioned relative to the truncated content
func (c *spectrumTruncated) Placement(placement string) ITruncated {
	c.PropPlacement = placement
	return c
}

// Body sets the content for the default slot
func (c *spectrumTruncated) Body(elements ...app.UI) ITruncated {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTruncated) AddToBody(element app.UI) ITruncated {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTruncated) Text(text string) ITruncated {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Custom content to display in the tooltip when truncated
func (c *spectrumTruncated) Overflow(content app.UI) ITruncated {
	c.PropOverflowSlot = content

	return c
}

// Style sets a style property with a value
func (c *spectrumTruncated) Style(key, format string, values ...any) ITruncated {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTruncated) Styles(styles map[string]string) ITruncated {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTruncated) Class(class string) ITruncated {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTruncated) Classes(classes ...string) ITruncated {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTruncated) Id(id string) ITruncated {
	return c.ider.Id(id)
}

// Render renders the sp-truncated component
func (c *spectrumTruncated) Render() app.UI {
	element := app.Elem("sp-truncated")

	// Set attributes
	if c.PropPlacement != "" {
		element = element.Attr("placement", c.PropPlacement)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add overflow slot
	if c.PropOverflowSlot != nil {
		slotElem := c.PropOverflowSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("overflow")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "overflow").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
