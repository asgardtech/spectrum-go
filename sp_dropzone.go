// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// DropzoneDropeffect represents the Controls the feedback (typically visual) the user is given during a drag and drop operation
type DropzoneDropeffect string

// DropzoneDropeffect values
const (
	DropzoneDropeffectCopy DropzoneDropeffect = "copy"
	DropzoneDropeffectMove DropzoneDropeffect = "move"
	DropzoneDropeffectLink DropzoneDropeffect = "link"
	DropzoneDropeffectNone DropzoneDropeffect = "none"
)

// spectrumDropzone represents an sp-dropzone component
type spectrumDropzone struct {
	app.Compo
	*styler[*spectrumDropzone]
	*classer[*spectrumDropzone]
	*ider[*spectrumDropzone]

	// Properties
	// Indicates that files are currently being dragged over the dropzone.
	PropIsdragged bool
	// Controls the feedback (typically visual) the user is given during a drag and drop operation
	PropDropeffect DropzoneDropeffect
	// Set this property to indicate that the component is in a filled state.
	PropIsfilled bool

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnSpDropzoneDragleave    app.EventHandler
	PropOnSpDropzoneDragover     app.EventHandler
	PropOnSpDropzoneDrop         app.EventHandler
	PropOnSpDropzoneShouldAccept app.EventHandler
}

// IDropzone is the interface for sp-dropzone component methods
type IDropzone interface {
	app.UI
	Styler[IDropzone]
	Classer[IDropzone]
	Ider[IDropzone]
	Isdragged(bool) IDropzone
	SetIsdragged() IDropzone
	Dropeffect(DropzoneDropeffect) IDropzone
	DropeffectCopy() IDropzone
	DropeffectMove() IDropzone
	DropeffectLink() IDropzone
	DropeffectNone() IDropzone
	Isfilled(bool) IDropzone
	SetIsfilled() IDropzone

	Body(...app.UI) IDropzone
	AddToBody(app.UI) IDropzone
	Text(string) IDropzone

	OnSpDropzoneDragleave(app.EventHandler) IDropzone
	OnSpDropzoneDragover(app.EventHandler) IDropzone
	OnSpDropzoneDrop(app.EventHandler) IDropzone
	OnSpDropzoneShouldAccept(app.EventHandler) IDropzone
}

// Dropzone A dropzone is an area on the screen into which an object can be dragged and dropped to accomplish a task. For example, a DropZone might be used in an upload workflow to enable the user to drop a file from their operating system into the DropZone, which is a more efficient and intuitive action, rather than utilize the standard "Choose File" dialog.
func Dropzone() IDropzone {
	element := &spectrumDropzone{
		PropIsdragged:  false,
		PropDropeffect: DropzoneDropeffectCopy,
		PropIsfilled:   false,
		PropBody:       []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Isdragged Indicates that files are currently being dragged over the dropzone.
func (c *spectrumDropzone) Isdragged(isDragged bool) IDropzone {
	c.PropIsdragged = isDragged
	return c
}

func (c *spectrumDropzone) SetIsdragged() IDropzone {
	return c.Isdragged(true)
}

// Dropeffect Controls the feedback (typically visual) the user is given during a drag and drop operation
func (c *spectrumDropzone) Dropeffect(dropEffect DropzoneDropeffect) IDropzone {
	c.PropDropeffect = dropEffect
	return c
}

func (c *spectrumDropzone) DropeffectCopy() IDropzone {
	return c.Dropeffect(DropzoneDropeffectCopy)
}
func (c *spectrumDropzone) DropeffectMove() IDropzone {
	return c.Dropeffect(DropzoneDropeffectMove)
}
func (c *spectrumDropzone) DropeffectLink() IDropzone {
	return c.Dropeffect(DropzoneDropeffectLink)
}
func (c *spectrumDropzone) DropeffectNone() IDropzone {
	return c.Dropeffect(DropzoneDropeffectNone)
}

// Isfilled Set this property to indicate that the component is in a filled state.
func (c *spectrumDropzone) Isfilled(isFilled bool) IDropzone {
	c.PropIsfilled = isFilled
	return c
}

func (c *spectrumDropzone) SetIsfilled() IDropzone {
	return c.Isfilled(true)
}

// Body sets the content for the default slot
func (c *spectrumDropzone) Body(elements ...app.UI) IDropzone {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumDropzone) AddToBody(element app.UI) IDropzone {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumDropzone) Text(text string) IDropzone {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Announces when dragged files have been moved out of the UI without having been dropped.
func (c *spectrumDropzone) OnSpDropzoneDragleave(handler app.EventHandler) IDropzone {
	c.PropOnSpDropzoneDragleave = handler

	return c
}

// Announces when files have been dragged over the UI, but not yet dropped.
func (c *spectrumDropzone) OnSpDropzoneDragover(handler app.EventHandler) IDropzone {
	c.PropOnSpDropzoneDragover = handler

	return c
}

// Announces when dragged files have been dropped on the UI.
func (c *spectrumDropzone) OnSpDropzoneDrop(handler app.EventHandler) IDropzone {
	c.PropOnSpDropzoneDrop = handler

	return c
}

// A cancellable event that confirms whether or not a file dropped on the UI should be accepted.
func (c *spectrumDropzone) OnSpDropzoneShouldAccept(handler app.EventHandler) IDropzone {
	c.PropOnSpDropzoneShouldAccept = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumDropzone) Style(key, format string, values ...any) IDropzone {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumDropzone) Styles(styles map[string]string) IDropzone {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumDropzone) Class(class string) IDropzone {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumDropzone) Classes(classes ...string) IDropzone {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumDropzone) Id(id string) IDropzone {
	return c.ider.Id(id)
}

// Render renders the sp-dropzone component
func (c *spectrumDropzone) Render() app.UI {
	element := app.Elem("sp-dropzone")

	// Set attributes
	if c.PropIsdragged {
		element = element.Attr("isDragged", true)
	}
	if c.PropDropeffect != "" {
		element = element.Attr("dropEffect", string(c.PropDropeffect))
	}
	if c.PropIsfilled {
		element = element.Attr("isFilled", true)
	}

	// Add event handlers
	if c.PropOnSpDropzoneDragleave != nil {
		element = element.On("sp-dropzone-dragleave", c.PropOnSpDropzoneDragleave)
	}
	if c.PropOnSpDropzoneDragover != nil {
		element = element.On("sp-dropzone-dragover", c.PropOnSpDropzoneDragover)
	}
	if c.PropOnSpDropzoneDrop != nil {
		element = element.On("sp-dropzone-drop", c.PropOnSpDropzoneDrop)
	}
	if c.PropOnSpDropzoneShouldAccept != nil {
		element = element.On("sp-dropzone-should-accept", c.PropOnSpDropzoneShouldAccept)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
