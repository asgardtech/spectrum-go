// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumSliderHandle represents an sp-slider-handle component
type spectrumSliderHandle struct {
	app.Compo
	*styler[*spectrumSliderHandle]
	*classer[*spectrumSliderHandle]
	*ider[*spectrumSliderHandle]

	// Properties
	// Set the default value of the handle. Setting this property will cause the handle to reset to the default value on double click or pressing the escape key.
	PropDefaultValue float64
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Whether the handle is currently being dragged
	PropDragging bool
	// Number formatting options as a JSON string
	PropFormatOptions string
	// Whether the handle should be highlighted
	PropHighlight bool
	// Accessible text label for the handle
	PropLabel string
	// Maximum value of the handle. Can be a number or 'next' to constrain by the next handle's value
	PropMax string
	// Minimum value of the handle. Can be a number or 'previous' to constrain by the previous handle's value
	PropMin string
	// Name of the handle for form submission
	PropName string
	// Step value for increments/decrements
	PropStep float64
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64
	// The current value of the handle. By default, the value will be halfway between min and max values, or the min value when max is less than min.
	PropValue float64

	// Event handlers
	PropOnChange              app.EventHandler
	PropOnInput               app.EventHandler
	PropOnSpSliderHandleReady app.EventHandler
}

// ISliderHandle is the interface for sp-slider-handle component methods
type ISliderHandle interface {
	app.UI
	Styler[ISliderHandle]
	Classer[ISliderHandle]
	Ider[ISliderHandle]
	DefaultValue(float64) ISliderHandle
	Disabled(bool) ISliderHandle
	SetDisabled() ISliderHandle
	Dragging(bool) ISliderHandle
	SetDragging() ISliderHandle
	FormatOptions(string) ISliderHandle
	Highlight(bool) ISliderHandle
	SetHighlight() ISliderHandle
	Label(string) ISliderHandle
	Max(string) ISliderHandle
	Min(string) ISliderHandle
	Name(string) ISliderHandle
	Step(float64) ISliderHandle
	Tabindex(float64) ISliderHandle
	Value(float64) ISliderHandle

	OnChange(app.EventHandler) ISliderHandle
	OnInput(app.EventHandler) ISliderHandle
	OnSpSliderHandleReady(app.EventHandler) ISliderHandle
}

// SliderHandle Slider handles are used for advanced slider uses that require more than one handle. One example of this is the range slider. Slider supports multiple handles via the slider-handle sub-component.
func SliderHandle() ISliderHandle {
	element := &spectrumSliderHandle{
		PropDefaultValue: 0,
		PropDisabled:     false,
		PropDragging:     false,
		PropHighlight:    false,
		PropLabel:        "",
		PropName:         "",
		PropStep:         0,
		PropTabindex:     0,
		PropValue:        0,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// DefaultValue Set the default value of the handle. Setting this property will cause the handle to reset to the default value on double click or pressing the escape key.
func (c *spectrumSliderHandle) DefaultValue(defaultValue float64) ISliderHandle {
	c.PropDefaultValue = defaultValue
	return c
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumSliderHandle) Disabled(disabled bool) ISliderHandle {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumSliderHandle) SetDisabled() ISliderHandle {
	return c.Disabled(true)
}

// Dragging Whether the handle is currently being dragged
func (c *spectrumSliderHandle) Dragging(dragging bool) ISliderHandle {
	c.PropDragging = dragging
	return c
}

func (c *spectrumSliderHandle) SetDragging() ISliderHandle {
	return c.Dragging(true)
}

// FormatOptions Number formatting options as a JSON string
func (c *spectrumSliderHandle) FormatOptions(formatOptions string) ISliderHandle {
	c.PropFormatOptions = formatOptions
	return c
}

// Highlight Whether the handle should be highlighted
func (c *spectrumSliderHandle) Highlight(highlight bool) ISliderHandle {
	c.PropHighlight = highlight
	return c
}

func (c *spectrumSliderHandle) SetHighlight() ISliderHandle {
	return c.Highlight(true)
}

// Label Accessible text label for the handle
func (c *spectrumSliderHandle) Label(label string) ISliderHandle {
	c.PropLabel = label
	return c
}

// Max Maximum value of the handle. Can be a number or 'next' to constrain by the next handle's value
func (c *spectrumSliderHandle) Max(max string) ISliderHandle {
	c.PropMax = max
	return c
}

// Min Minimum value of the handle. Can be a number or 'previous' to constrain by the previous handle's value
func (c *spectrumSliderHandle) Min(min string) ISliderHandle {
	c.PropMin = min
	return c
}

// Name Name of the handle for form submission
func (c *spectrumSliderHandle) Name(name string) ISliderHandle {
	c.PropName = name
	return c
}

// Step Step value for increments/decrements
func (c *spectrumSliderHandle) Step(step float64) ISliderHandle {
	c.PropStep = step
	return c
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumSliderHandle) Tabindex(tabindex float64) ISliderHandle {
	c.PropTabindex = tabindex
	return c
}

// Value The current value of the handle. By default, the value will be halfway between min and max values, or the min value when max is less than min.
func (c *spectrumSliderHandle) Value(value float64) ISliderHandle {
	c.PropValue = value
	return c
}

// An alteration to the value of the element has been committed by the user.
func (c *spectrumSliderHandle) OnChange(handler app.EventHandler) ISliderHandle {
	c.PropOnChange = handler

	return c
}

// The value of the element has changed.
func (c *spectrumSliderHandle) OnInput(handler app.EventHandler) ISliderHandle {
	c.PropOnInput = handler

	return c
}

// Fired when a slider handle has been initialized
func (c *spectrumSliderHandle) OnSpSliderHandleReady(handler app.EventHandler) ISliderHandle {
	c.PropOnSpSliderHandleReady = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumSliderHandle) Style(key, format string, values ...any) ISliderHandle {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumSliderHandle) Styles(styles map[string]string) ISliderHandle {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumSliderHandle) Class(class string) ISliderHandle {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumSliderHandle) Classes(classes ...string) ISliderHandle {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumSliderHandle) Id(id string) ISliderHandle {
	return c.ider.Id(id)
}

// Render renders the sp-slider-handle component
func (c *spectrumSliderHandle) Render() app.UI {
	element := app.Elem("sp-slider-handle")

	// Set attributes
	if c.PropDefaultValue != 0 {
		element = element.Attr("default-value", c.PropDefaultValue)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropDragging {
		element = element.Attr("dragging", true)
	}
	if c.PropFormatOptions != "" {
		element = element.Attr("format-options", c.PropFormatOptions)
	}
	if c.PropHighlight {
		element = element.Attr("highlight", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropMax != "" {
		element = element.Attr("max", c.PropMax)
	}
	if c.PropMin != "" {
		element = element.Attr("min", c.PropMin)
	}
	if c.PropName != "" {
		element = element.Attr("name", c.PropName)
	}
	if c.PropStep != 0 {
		element = element.Attr("step", c.PropStep)
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabindex", c.PropTabindex)
	}
	if c.PropValue != 0 {
		element = element.Attr("value", c.PropValue)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnInput != nil {
		element = element.On("input", c.PropOnInput)
	}
	if c.PropOnSpSliderHandleReady != nil {
		element = element.On("sp-slider-handle-ready", c.PropOnSpSliderHandleReady)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
