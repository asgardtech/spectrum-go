// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// StatusLightSize represents the The size of the status light
type StatusLightSize string

// StatusLightSize values
const (
	StatusLightSizeS  StatusLightSize = "s"
	StatusLightSizeM  StatusLightSize = "m"
	StatusLightSizeL  StatusLightSize = "l"
	StatusLightSizeXl StatusLightSize = "xl"
)

// StatusLightVariant represents the The visual variant to apply to this status light.
type StatusLightVariant string

// StatusLightVariant values
const (
	StatusLightVariantPositive   StatusLightVariant = "positive"
	StatusLightVariantNegative   StatusLightVariant = "negative"
	StatusLightVariantNotice     StatusLightVariant = "notice"
	StatusLightVariantInfo       StatusLightVariant = "info"
	StatusLightVariantNeutral    StatusLightVariant = "neutral"
	StatusLightVariantYellow     StatusLightVariant = "yellow"
	StatusLightVariantFuchsia    StatusLightVariant = "fuchsia"
	StatusLightVariantIndigo     StatusLightVariant = "indigo"
	StatusLightVariantSeafoam    StatusLightVariant = "seafoam"
	StatusLightVariantChartreuse StatusLightVariant = "chartreuse"
	StatusLightVariantMagenta    StatusLightVariant = "magenta"
	StatusLightVariantCelery     StatusLightVariant = "celery"
	StatusLightVariantPurple     StatusLightVariant = "purple"
)

// spectrumStatusLight represents an sp-status-light component
type spectrumStatusLight struct {
	app.Compo
	*styler[*spectrumStatusLight]
	*classer[*spectrumStatusLight]
	*ider[*spectrumStatusLight]

	// Properties
	// A status light in a disabled state shows that a status exists, but is not available in that circumstance. This can be used to maintain layout continuity and communicate that a status may become available later.
	PropDisabled bool
	// The size of the status light
	PropSize StatusLightSize
	// The visual variant to apply to this status light.
	PropVariant StatusLightVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// IStatusLight is the interface for sp-status-light component methods
type IStatusLight interface {
	app.UI
	Styler[IStatusLight]
	Classer[IStatusLight]
	Ider[IStatusLight]
	Disabled(bool) IStatusLight
	SetDisabled() IStatusLight
	Size(StatusLightSize) IStatusLight
	SizeS() IStatusLight
	SizeM() IStatusLight
	SizeL() IStatusLight
	SizeXl() IStatusLight
	Variant(StatusLightVariant) IStatusLight
	VariantPositive() IStatusLight
	VariantNegative() IStatusLight
	VariantNotice() IStatusLight
	VariantInfo() IStatusLight
	VariantNeutral() IStatusLight
	VariantYellow() IStatusLight
	VariantFuchsia() IStatusLight
	VariantIndigo() IStatusLight
	VariantSeafoam() IStatusLight
	VariantChartreuse() IStatusLight
	VariantMagenta() IStatusLight
	VariantCelery() IStatusLight
	VariantPurple() IStatusLight

	Body(...app.UI) IStatusLight
	AddToBody(app.UI) IStatusLight
	Text(string) IStatusLight
}

// StatusLight A status light is a great way to convey semantic meaning, such as statuses and categories.
func StatusLight() IStatusLight {
	element := &spectrumStatusLight{
		PropDisabled: false,
		PropSize:     StatusLightSizeM,
		PropVariant:  StatusLightVariantInfo,
		PropBody:     []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled A status light in a disabled state shows that a status exists, but is not available in that circumstance. This can be used to maintain layout continuity and communicate that a status may become available later.
func (c *spectrumStatusLight) Disabled(disabled bool) IStatusLight {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumStatusLight) SetDisabled() IStatusLight {
	return c.Disabled(true)
}

// Size The size of the status light
func (c *spectrumStatusLight) Size(size StatusLightSize) IStatusLight {
	c.PropSize = size
	return c
}

func (c *spectrumStatusLight) SizeS() IStatusLight {
	return c.Size(StatusLightSizeS)
}
func (c *spectrumStatusLight) SizeM() IStatusLight {
	return c.Size(StatusLightSizeM)
}
func (c *spectrumStatusLight) SizeL() IStatusLight {
	return c.Size(StatusLightSizeL)
}
func (c *spectrumStatusLight) SizeXl() IStatusLight {
	return c.Size(StatusLightSizeXl)
}

// Variant The visual variant to apply to this status light.
func (c *spectrumStatusLight) Variant(variant StatusLightVariant) IStatusLight {
	c.PropVariant = variant
	return c
}

func (c *spectrumStatusLight) VariantPositive() IStatusLight {
	return c.Variant(StatusLightVariantPositive)
}
func (c *spectrumStatusLight) VariantNegative() IStatusLight {
	return c.Variant(StatusLightVariantNegative)
}
func (c *spectrumStatusLight) VariantNotice() IStatusLight {
	return c.Variant(StatusLightVariantNotice)
}
func (c *spectrumStatusLight) VariantInfo() IStatusLight {
	return c.Variant(StatusLightVariantInfo)
}
func (c *spectrumStatusLight) VariantNeutral() IStatusLight {
	return c.Variant(StatusLightVariantNeutral)
}
func (c *spectrumStatusLight) VariantYellow() IStatusLight {
	return c.Variant(StatusLightVariantYellow)
}
func (c *spectrumStatusLight) VariantFuchsia() IStatusLight {
	return c.Variant(StatusLightVariantFuchsia)
}
func (c *spectrumStatusLight) VariantIndigo() IStatusLight {
	return c.Variant(StatusLightVariantIndigo)
}
func (c *spectrumStatusLight) VariantSeafoam() IStatusLight {
	return c.Variant(StatusLightVariantSeafoam)
}
func (c *spectrumStatusLight) VariantChartreuse() IStatusLight {
	return c.Variant(StatusLightVariantChartreuse)
}
func (c *spectrumStatusLight) VariantMagenta() IStatusLight {
	return c.Variant(StatusLightVariantMagenta)
}
func (c *spectrumStatusLight) VariantCelery() IStatusLight {
	return c.Variant(StatusLightVariantCelery)
}
func (c *spectrumStatusLight) VariantPurple() IStatusLight {
	return c.Variant(StatusLightVariantPurple)
}

// Body sets the content for the default slot
func (c *spectrumStatusLight) Body(elements ...app.UI) IStatusLight {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumStatusLight) AddToBody(element app.UI) IStatusLight {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumStatusLight) Text(text string) IStatusLight {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumStatusLight) Style(key, format string, values ...any) IStatusLight {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumStatusLight) Styles(styles map[string]string) IStatusLight {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumStatusLight) Class(class string) IStatusLight {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumStatusLight) Classes(classes ...string) IStatusLight {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumStatusLight) Id(id string) IStatusLight {
	return c.ider.Id(id)
}

// Render renders the sp-status-light component
func (c *spectrumStatusLight) Render() app.UI {
	element := app.Elem("sp-status-light")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
