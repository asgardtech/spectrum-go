// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ThumbnailSize represents the The size of the thumbnail in pixels
type ThumbnailSize string

// ThumbnailSize values
const (
	ThumbnailSize50   ThumbnailSize = "50"
	ThumbnailSize75   ThumbnailSize = "75"
	ThumbnailSize100  ThumbnailSize = "100"
	ThumbnailSize200  ThumbnailSize = "200"
	ThumbnailSize300  ThumbnailSize = "300"
	ThumbnailSize400  ThumbnailSize = "400"
	ThumbnailSize500  ThumbnailSize = "500"
	ThumbnailSize600  ThumbnailSize = "600"
	ThumbnailSize700  ThumbnailSize = "700"
	ThumbnailSize800  ThumbnailSize = "800"
	ThumbnailSize900  ThumbnailSize = "900"
	ThumbnailSize1000 ThumbnailSize = "1000"
)

// spectrumThumbnail represents an sp-thumbnail component
type spectrumThumbnail struct {
	app.Compo
	*styler[*spectrumThumbnail]
	*classer[*spectrumThumbnail]
	*ider[*spectrumThumbnail]

	// Properties
	// CSS background property value to customize the letterboxing background
	PropBackground string
	// Causes the content to fill the space provided by the thumbnail element
	PropCover bool
	// Disables the thumbnail
	PropDisabled bool
	// Displays the thumbnail with a focus indicator
	PropFocused bool
	// Shows the thumbnail with a layer style, for use in layer management interfaces
	PropLayer bool
	// Shows the thumbnail in a selected state
	PropSelected bool
	// The size of the thumbnail in pixels
	PropSize ThumbnailSize

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropImageSlot app.UI
}

// IThumbnail is the interface for sp-thumbnail component methods
type IThumbnail interface {
	app.UI
	Styler[IThumbnail]
	Classer[IThumbnail]
	Ider[IThumbnail]
	Background(string) IThumbnail
	Cover(bool) IThumbnail
	SetCover() IThumbnail
	Disabled(bool) IThumbnail
	SetDisabled() IThumbnail
	Focused(bool) IThumbnail
	SetFocused() IThumbnail
	Layer(bool) IThumbnail
	SetLayer() IThumbnail
	Selected(bool) IThumbnail
	SetSelected() IThumbnail
	Size(ThumbnailSize) IThumbnail
	Size50() IThumbnail
	Size75() IThumbnail
	Size100() IThumbnail
	Size200() IThumbnail
	Size300() IThumbnail
	Size400() IThumbnail
	Size500() IThumbnail
	Size600() IThumbnail
	Size700() IThumbnail
	Size800() IThumbnail
	Size900() IThumbnail
	Size1000() IThumbnail

	Body(...app.UI) IThumbnail
	AddToBody(app.UI) IThumbnail
	Text(string) IThumbnail

	Image(app.UI) IThumbnail
}

// Thumbnail An sp-thumbnail can be used to display a preview of an image, layer, or effect. Thumbnails are not keyboard-focusable since they're intended to be used inside components that a user sets focus to.
func Thumbnail() IThumbnail {
	element := &spectrumThumbnail{
		PropCover:    false,
		PropDisabled: false,
		PropFocused:  false,
		PropLayer:    false,
		PropSelected: false,
		PropSize:     ThumbnailSize100,
		PropBody:     []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Background CSS background property value to customize the letterboxing background
func (c *spectrumThumbnail) Background(background string) IThumbnail {
	c.PropBackground = background
	return c
}

// Cover Causes the content to fill the space provided by the thumbnail element
func (c *spectrumThumbnail) Cover(cover bool) IThumbnail {
	c.PropCover = cover
	return c
}

func (c *spectrumThumbnail) SetCover() IThumbnail {
	return c.Cover(true)
}

// Disabled Disables the thumbnail
func (c *spectrumThumbnail) Disabled(disabled bool) IThumbnail {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumThumbnail) SetDisabled() IThumbnail {
	return c.Disabled(true)
}

// Focused Displays the thumbnail with a focus indicator
func (c *spectrumThumbnail) Focused(focused bool) IThumbnail {
	c.PropFocused = focused
	return c
}

func (c *spectrumThumbnail) SetFocused() IThumbnail {
	return c.Focused(true)
}

// Layer Shows the thumbnail with a layer style, for use in layer management interfaces
func (c *spectrumThumbnail) Layer(layer bool) IThumbnail {
	c.PropLayer = layer
	return c
}

func (c *spectrumThumbnail) SetLayer() IThumbnail {
	return c.Layer(true)
}

// Selected Shows the thumbnail in a selected state
func (c *spectrumThumbnail) Selected(selected bool) IThumbnail {
	c.PropSelected = selected
	return c
}

func (c *spectrumThumbnail) SetSelected() IThumbnail {
	return c.Selected(true)
}

// Size The size of the thumbnail in pixels
func (c *spectrumThumbnail) Size(size ThumbnailSize) IThumbnail {
	c.PropSize = size
	return c
}

func (c *spectrumThumbnail) Size50() IThumbnail {
	return c.Size(ThumbnailSize50)
}
func (c *spectrumThumbnail) Size75() IThumbnail {
	return c.Size(ThumbnailSize75)
}
func (c *spectrumThumbnail) Size100() IThumbnail {
	return c.Size(ThumbnailSize100)
}
func (c *spectrumThumbnail) Size200() IThumbnail {
	return c.Size(ThumbnailSize200)
}
func (c *spectrumThumbnail) Size300() IThumbnail {
	return c.Size(ThumbnailSize300)
}
func (c *spectrumThumbnail) Size400() IThumbnail {
	return c.Size(ThumbnailSize400)
}
func (c *spectrumThumbnail) Size500() IThumbnail {
	return c.Size(ThumbnailSize500)
}
func (c *spectrumThumbnail) Size600() IThumbnail {
	return c.Size(ThumbnailSize600)
}
func (c *spectrumThumbnail) Size700() IThumbnail {
	return c.Size(ThumbnailSize700)
}
func (c *spectrumThumbnail) Size800() IThumbnail {
	return c.Size(ThumbnailSize800)
}
func (c *spectrumThumbnail) Size900() IThumbnail {
	return c.Size(ThumbnailSize900)
}
func (c *spectrumThumbnail) Size1000() IThumbnail {
	return c.Size(ThumbnailSize1000)
}

// Body sets the content for the default slot
func (c *spectrumThumbnail) Body(elements ...app.UI) IThumbnail {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumThumbnail) AddToBody(element app.UI) IThumbnail {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumThumbnail) Text(text string) IThumbnail {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Image element to present in the thumbnail
func (c *spectrumThumbnail) Image(content app.UI) IThumbnail {
	c.PropImageSlot = content

	return c
}

// Style sets a style property with a value
func (c *spectrumThumbnail) Style(key, format string, values ...any) IThumbnail {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumThumbnail) Styles(styles map[string]string) IThumbnail {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumThumbnail) Class(class string) IThumbnail {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumThumbnail) Classes(classes ...string) IThumbnail {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumThumbnail) Id(id string) IThumbnail {
	return c.ider.Id(id)
}

// Render renders the sp-thumbnail component
func (c *spectrumThumbnail) Render() app.UI {
	element := app.Elem("sp-thumbnail")

	// Set attributes
	if c.PropBackground != "" {
		element = element.Attr("background", c.PropBackground)
	}
	if c.PropCover {
		element = element.Attr("cover", true)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropFocused {
		element = element.Attr("focused", true)
	}
	if c.PropLayer {
		element = element.Attr("layer", true)
	}
	if c.PropSelected {
		element = element.Attr("selected", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add image slot
	if c.PropImageSlot != nil {
		slotElem := c.PropImageSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("image")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "image").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
