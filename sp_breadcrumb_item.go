// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// BreadcrumbItemReferrerpolicy represents the How much of the referrer to send when following the link
type BreadcrumbItemReferrerpolicy string

// BreadcrumbItemReferrerpolicy values
const (
	BreadcrumbItemReferrerpolicyNoReferrer                  BreadcrumbItemReferrerpolicy = "no-referrer"
	BreadcrumbItemReferrerpolicyNoReferrerWhenDowngrade     BreadcrumbItemReferrerpolicy = "no-referrer-when-downgrade"
	BreadcrumbItemReferrerpolicyOrigin                      BreadcrumbItemReferrerpolicy = "origin"
	BreadcrumbItemReferrerpolicyOriginWhenCrossOrigin       BreadcrumbItemReferrerpolicy = "origin-when-cross-origin"
	BreadcrumbItemReferrerpolicySameOrigin                  BreadcrumbItemReferrerpolicy = "same-origin"
	BreadcrumbItemReferrerpolicyStrictOrigin                BreadcrumbItemReferrerpolicy = "strict-origin"
	BreadcrumbItemReferrerpolicyStrictOriginWhenCrossOrigin BreadcrumbItemReferrerpolicy = "strict-origin-when-cross-origin"
	BreadcrumbItemReferrerpolicyUnsafeUrl                   BreadcrumbItemReferrerpolicy = "unsafe-url"
)

// BreadcrumbItemTarget represents the Where to display the linked URL, as the name for a browsing context
type BreadcrumbItemTarget string

// BreadcrumbItemTarget values
const (
	BreadcrumbItemTarget_blank  BreadcrumbItemTarget = "_blank"
	BreadcrumbItemTarget_parent BreadcrumbItemTarget = "_parent"
	BreadcrumbItemTarget_self   BreadcrumbItemTarget = "_self"
	BreadcrumbItemTarget_top    BreadcrumbItemTarget = "_top"
)

// spectrumBreadcrumbItem represents an sp-breadcrumb-item component
type spectrumBreadcrumbItem struct {
	app.Compo
	*styler[*spectrumBreadcrumbItem]
	*classer[*spectrumBreadcrumbItem]
	*ider[*spectrumBreadcrumbItem]

	// Properties
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Causes the browser to treat the linked URL as a download
	PropDownload string
	// The URL that the hyperlink points to. When present, the item functions as a link.
	PropHref string
	// An accessible label that describes the component. Applied to aria-label but not visually rendered.
	PropLabel string
	// How much of the referrer to send when following the link
	PropReferrerpolicy BreadcrumbItemReferrerpolicy
	// The relationship of the linked URL as space-separated link types
	PropRel string
	// The tab index to apply to this control
	PropTabindex float64
	// Where to display the linked URL, as the name for a browsing context
	PropTarget BreadcrumbItemTarget
	// The value associated with this breadcrumb item, used for selection events
	PropValue string

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// IBreadcrumbItem is the interface for sp-breadcrumb-item component methods
type IBreadcrumbItem interface {
	app.UI
	Styler[IBreadcrumbItem]
	Classer[IBreadcrumbItem]
	Ider[IBreadcrumbItem]
	Disabled(bool) IBreadcrumbItem
	SetDisabled() IBreadcrumbItem
	Download(string) IBreadcrumbItem
	Href(string) IBreadcrumbItem
	Label(string) IBreadcrumbItem
	Referrerpolicy(BreadcrumbItemReferrerpolicy) IBreadcrumbItem
	ReferrerpolicyNoReferrer() IBreadcrumbItem
	ReferrerpolicyNoReferrerWhenDowngrade() IBreadcrumbItem
	ReferrerpolicyOrigin() IBreadcrumbItem
	ReferrerpolicyOriginWhenCrossOrigin() IBreadcrumbItem
	ReferrerpolicySameOrigin() IBreadcrumbItem
	ReferrerpolicyStrictOrigin() IBreadcrumbItem
	ReferrerpolicyStrictOriginWhenCrossOrigin() IBreadcrumbItem
	ReferrerpolicyUnsafeUrl() IBreadcrumbItem
	Rel(string) IBreadcrumbItem
	Tabindex(float64) IBreadcrumbItem
	Target(BreadcrumbItemTarget) IBreadcrumbItem
	Target_blank() IBreadcrumbItem
	Target_parent() IBreadcrumbItem
	Target_self() IBreadcrumbItem
	Target_top() IBreadcrumbItem
	Value(string) IBreadcrumbItem

	Body(...app.UI) IBreadcrumbItem
	AddToBody(app.UI) IBreadcrumbItem
	Text(string) IBreadcrumbItem
}

// BreadcrumbItem Represents a single item in a breadcrumbs navigation list. It can function as a link or a selectable item.
func BreadcrumbItem() IBreadcrumbItem {
	element := &spectrumBreadcrumbItem{
		PropDisabled: false,
		PropTabindex: 0,
		PropBody:     []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumBreadcrumbItem) Disabled(disabled bool) IBreadcrumbItem {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumBreadcrumbItem) SetDisabled() IBreadcrumbItem {
	return c.Disabled(true)
}

// Download Causes the browser to treat the linked URL as a download
func (c *spectrumBreadcrumbItem) Download(download string) IBreadcrumbItem {
	c.PropDownload = download
	return c
}

// Href The URL that the hyperlink points to. When present, the item functions as a link.
func (c *spectrumBreadcrumbItem) Href(href string) IBreadcrumbItem {
	c.PropHref = href
	return c
}

// Label An accessible label that describes the component. Applied to aria-label but not visually rendered.
func (c *spectrumBreadcrumbItem) Label(label string) IBreadcrumbItem {
	c.PropLabel = label
	return c
}

// Referrerpolicy How much of the referrer to send when following the link
func (c *spectrumBreadcrumbItem) Referrerpolicy(referrerpolicy BreadcrumbItemReferrerpolicy) IBreadcrumbItem {
	c.PropReferrerpolicy = referrerpolicy
	return c
}

func (c *spectrumBreadcrumbItem) ReferrerpolicyNoReferrer() IBreadcrumbItem {
	return c.Referrerpolicy(BreadcrumbItemReferrerpolicyNoReferrer)
}
func (c *spectrumBreadcrumbItem) ReferrerpolicyNoReferrerWhenDowngrade() IBreadcrumbItem {
	return c.Referrerpolicy(BreadcrumbItemReferrerpolicyNoReferrerWhenDowngrade)
}
func (c *spectrumBreadcrumbItem) ReferrerpolicyOrigin() IBreadcrumbItem {
	return c.Referrerpolicy(BreadcrumbItemReferrerpolicyOrigin)
}
func (c *spectrumBreadcrumbItem) ReferrerpolicyOriginWhenCrossOrigin() IBreadcrumbItem {
	return c.Referrerpolicy(BreadcrumbItemReferrerpolicyOriginWhenCrossOrigin)
}
func (c *spectrumBreadcrumbItem) ReferrerpolicySameOrigin() IBreadcrumbItem {
	return c.Referrerpolicy(BreadcrumbItemReferrerpolicySameOrigin)
}
func (c *spectrumBreadcrumbItem) ReferrerpolicyStrictOrigin() IBreadcrumbItem {
	return c.Referrerpolicy(BreadcrumbItemReferrerpolicyStrictOrigin)
}
func (c *spectrumBreadcrumbItem) ReferrerpolicyStrictOriginWhenCrossOrigin() IBreadcrumbItem {
	return c.Referrerpolicy(BreadcrumbItemReferrerpolicyStrictOriginWhenCrossOrigin)
}
func (c *spectrumBreadcrumbItem) ReferrerpolicyUnsafeUrl() IBreadcrumbItem {
	return c.Referrerpolicy(BreadcrumbItemReferrerpolicyUnsafeUrl)
}

// Rel The relationship of the linked URL as space-separated link types
func (c *spectrumBreadcrumbItem) Rel(rel string) IBreadcrumbItem {
	c.PropRel = rel
	return c
}

// Tabindex The tab index to apply to this control
func (c *spectrumBreadcrumbItem) Tabindex(tabIndex float64) IBreadcrumbItem {
	c.PropTabindex = tabIndex
	return c
}

// Target Where to display the linked URL, as the name for a browsing context
func (c *spectrumBreadcrumbItem) Target(target BreadcrumbItemTarget) IBreadcrumbItem {
	c.PropTarget = target
	return c
}

func (c *spectrumBreadcrumbItem) Target_blank() IBreadcrumbItem {
	return c.Target(BreadcrumbItemTarget_blank)
}
func (c *spectrumBreadcrumbItem) Target_parent() IBreadcrumbItem {
	return c.Target(BreadcrumbItemTarget_parent)
}
func (c *spectrumBreadcrumbItem) Target_self() IBreadcrumbItem {
	return c.Target(BreadcrumbItemTarget_self)
}
func (c *spectrumBreadcrumbItem) Target_top() IBreadcrumbItem {
	return c.Target(BreadcrumbItemTarget_top)
}

// Value The value associated with this breadcrumb item, used for selection events
func (c *spectrumBreadcrumbItem) Value(value string) IBreadcrumbItem {
	c.PropValue = value
	return c
}

// Body sets the content for the default slot
func (c *spectrumBreadcrumbItem) Body(elements ...app.UI) IBreadcrumbItem {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumBreadcrumbItem) AddToBody(element app.UI) IBreadcrumbItem {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumBreadcrumbItem) Text(text string) IBreadcrumbItem {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumBreadcrumbItem) Style(key, format string, values ...any) IBreadcrumbItem {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumBreadcrumbItem) Styles(styles map[string]string) IBreadcrumbItem {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumBreadcrumbItem) Class(class string) IBreadcrumbItem {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumBreadcrumbItem) Classes(classes ...string) IBreadcrumbItem {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumBreadcrumbItem) Id(id string) IBreadcrumbItem {
	return c.ider.Id(id)
}

// Render renders the sp-breadcrumb-item component
func (c *spectrumBreadcrumbItem) Render() app.UI {
	element := app.Elem("sp-breadcrumb-item")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropDownload != "" {
		element = element.Attr("download", c.PropDownload)
	}
	if c.PropHref != "" {
		element = element.Attr("href", c.PropHref)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropReferrerpolicy != "" {
		element = element.Attr("referrerpolicy", string(c.PropReferrerpolicy))
	}
	if c.PropRel != "" {
		element = element.Attr("rel", c.PropRel)
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabIndex", c.PropTabindex)
	}
	if c.PropTarget != "" {
		element = element.Attr("target", string(c.PropTarget))
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
