// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumElementResolution represents an  component
type spectrumElementResolution struct {
	app.Compo
	*styler[*spectrumElementResolution]
	*classer[*spectrumElementResolution]
	*ider[*spectrumElementResolution]

	// Properties
	// The CSS selector to query for matching elements
	PropSelector string
	// Reference to the first element matching the selector
	PropElement any
}

// IElementResolution is the interface for  component methods
type IElementResolution interface {
	app.UI
	Styler[IElementResolution]
	Classer[IElementResolution]
	Ider[IElementResolution]
	Selector(string) IElementResolution
	Element(any) IElementResolution
}

// ElementResolution An ElementResolutionController keeps an active reference to another element in the same DOM tree. It manages observing the DOM tree to ensure the reference is always the first matched element or null.
func ElementResolution() IElementResolution {
	element := &spectrumElementResolution{
		PropElement: map[string]interface{}{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Selector The CSS selector to query for matching elements
func (c *spectrumElementResolution) Selector(selector string) IElementResolution {
	c.PropSelector = selector
	return c
}

// Element Reference to the first element matching the selector
func (c *spectrumElementResolution) Element(element any) IElementResolution {
	c.PropElement = element
	return c
}

// Style sets a style property with a value
func (c *spectrumElementResolution) Style(key, format string, values ...any) IElementResolution {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumElementResolution) Styles(styles map[string]string) IElementResolution {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumElementResolution) Class(class string) IElementResolution {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumElementResolution) Classes(classes ...string) IElementResolution {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumElementResolution) Id(id string) IElementResolution {
	return c.ider.Id(id)
}

// Render renders the  component
func (c *spectrumElementResolution) Render() app.UI {
	element := app.Elem("")

	// Set attributes
	if c.PropSelector != "" {
		element = element.Attr("selector", c.PropSelector)
	}
	if c.PropElement != nil {
		element = element.Attr("element", c.PropElement)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
