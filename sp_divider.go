// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// DividerSize represents the The thickness of the divider
type DividerSize string

// DividerSize values
const (
	DividerSizeS DividerSize = "s"
	DividerSizeM DividerSize = "m"
	DividerSizeL DividerSize = "l"
)

// spectrumDivider represents an sp-divider component
type spectrumDivider struct {
	app.Compo
	*styler[*spectrumDivider]
	*classer[*spectrumDivider]
	*ider[*spectrumDivider]

	// Properties
	// Whether the divider is vertical instead of horizontal
	PropVertical bool
	// The thickness of the divider
	PropSize DividerSize
}

// IDivider is the interface for sp-divider component methods
type IDivider interface {
	app.UI
	Styler[IDivider]
	Classer[IDivider]
	Ider[IDivider]
	Vertical(bool) IDivider
	SetVertical() IDivider
	Size(DividerSize) IDivider
	SizeS() IDivider
	SizeM() IDivider
	SizeL() IDivider
}

// Divider Dividers bring clarity to a layout by grouping and dividing content that exists in close proximity. They can also be used to establish rhythm and hierarchy.
func Divider() IDivider {
	element := &spectrumDivider{
		PropVertical: false,
		PropSize:     DividerSizeM,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Vertical Whether the divider is vertical instead of horizontal
func (c *spectrumDivider) Vertical(vertical bool) IDivider {
	c.PropVertical = vertical
	return c
}

func (c *spectrumDivider) SetVertical() IDivider {
	return c.Vertical(true)
}

// Size The thickness of the divider
func (c *spectrumDivider) Size(size DividerSize) IDivider {
	c.PropSize = size
	return c
}

func (c *spectrumDivider) SizeS() IDivider {
	return c.Size(DividerSizeS)
}
func (c *spectrumDivider) SizeM() IDivider {
	return c.Size(DividerSizeM)
}
func (c *spectrumDivider) SizeL() IDivider {
	return c.Size(DividerSizeL)
}

// Style sets a style property with a value
func (c *spectrumDivider) Style(key, format string, values ...any) IDivider {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumDivider) Styles(styles map[string]string) IDivider {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumDivider) Class(class string) IDivider {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumDivider) Classes(classes ...string) IDivider {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumDivider) Id(id string) IDivider {
	return c.ider.Id(id)
}

// Render renders the sp-divider component
func (c *spectrumDivider) Render() app.UI {
	element := app.Elem("sp-divider")

	// Set attributes
	if c.PropVertical {
		element = element.Attr("vertical", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
