// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumTags represents an sp-tags component
type spectrumTags struct {
	app.Compo
	*styler[*spectrumTags]
	*classer[*spectrumTags]
	*ider[*spectrumTags]

	// Properties

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Child components
	PropChildren []app.UI
}

// ITags is the interface for sp-tags component methods
type ITags interface {
	app.UI
	Styler[ITags]
	Classer[ITags]
	Ider[ITags]

	Body(...app.UI) ITags
	AddToBody(app.UI) ITags
	Text(string) ITags

	Children(...app.UI) ITags
	AddChild(app.UI) ITags
}

// Tags Tags elements contain a collection of sp-tag elements and allow users to categorize content. They can represent keywords or people, and are grouped to describe an item or a search request.
func Tags() ITags {
	element := &spectrumTags{
		PropBody: []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Body sets the content for the default slot
func (c *spectrumTags) Body(elements ...app.UI) ITags {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTags) AddToBody(element app.UI) ITags {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTags) Text(text string) ITags {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Children sets the child components
func (c *spectrumTags) Children(children ...app.UI) ITags {
	c.PropChildren = children

	return c
}

// AddChild adds a child component
func (c *spectrumTags) AddChild(child app.UI) ITags {
	c.PropChildren = append(c.PropChildren, child)

	return c
}

// Style sets a style property with a value
func (c *spectrumTags) Style(key, format string, values ...any) ITags {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTags) Styles(styles map[string]string) ITags {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTags) Class(class string) ITags {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTags) Classes(classes ...string) ITags {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTags) Id(id string) ITags {
	return c.ider.Id(id)
}

// Render renders the sp-tags component
func (c *spectrumTags) Render() app.UI {
	element := app.Elem("sp-tags")

	// Set attributes

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add children if no default slot content is provided
	if len(c.PropChildren) > 0 {
		// If there's a default slot, only add children if the default slot is empty
		if len(c.PropBody) == 0 {
			for _, child := range c.PropChildren {
				slotElements = append(slotElements, child)
			}
		}
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
