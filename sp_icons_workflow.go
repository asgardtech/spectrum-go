// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// IconsWorkflowSize represents the Size of the icon
type IconsWorkflowSize string

// IconsWorkflowSize values
const (
	IconsWorkflowSizeXxs IconsWorkflowSize = "xxs"
	IconsWorkflowSizeXs  IconsWorkflowSize = "xs"
	IconsWorkflowSizeS   IconsWorkflowSize = "s"
	IconsWorkflowSizeM   IconsWorkflowSize = "m"
	IconsWorkflowSizeL   IconsWorkflowSize = "l"
	IconsWorkflowSizeXl  IconsWorkflowSize = "xl"
	IconsWorkflowSizeXxl IconsWorkflowSize = "xxl"
)

// spectrumIconsWorkflow represents an sp-icon-workflow component
type spectrumIconsWorkflow struct {
	app.Compo
	*styler[*spectrumIconsWorkflow]
	*classer[*spectrumIconsWorkflow]
	*ider[*spectrumIconsWorkflow]

	// Properties
	// Accessibility label for the icon
	PropLabel string
	// Size of the icon
	PropSize IconsWorkflowSize
}

// IIconsWorkflow is the interface for sp-icon-workflow component methods
type IIconsWorkflow interface {
	app.UI
	Styler[IIconsWorkflow]
	Classer[IIconsWorkflow]
	Ider[IIconsWorkflow]
	Label(string) IIconsWorkflow
	Size(IconsWorkflowSize) IIconsWorkflow
	SizeXxs() IIconsWorkflow
	SizeXs() IIconsWorkflow
	SizeS() IIconsWorkflow
	SizeM() IIconsWorkflow
	SizeL() IIconsWorkflow
	SizeXl() IIconsWorkflow
	SizeXxl() IIconsWorkflow
}

// IconsWorkflow Deliver Spectrum Workflow Icons as registered custom elements, unregistered class definitions, or functions with customizable template tags to be used across various frameworks.
func IconsWorkflow() IIconsWorkflow {
	element := &spectrumIconsWorkflow{
		PropLabel: "",
		PropSize:  "",
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Label Accessibility label for the icon
func (c *spectrumIconsWorkflow) Label(label string) IIconsWorkflow {
	c.PropLabel = label
	return c
}

// Size Size of the icon
func (c *spectrumIconsWorkflow) Size(size IconsWorkflowSize) IIconsWorkflow {
	c.PropSize = size
	return c
}

func (c *spectrumIconsWorkflow) SizeXxs() IIconsWorkflow {
	return c.Size(IconsWorkflowSizeXxs)
}
func (c *spectrumIconsWorkflow) SizeXs() IIconsWorkflow {
	return c.Size(IconsWorkflowSizeXs)
}
func (c *spectrumIconsWorkflow) SizeS() IIconsWorkflow {
	return c.Size(IconsWorkflowSizeS)
}
func (c *spectrumIconsWorkflow) SizeM() IIconsWorkflow {
	return c.Size(IconsWorkflowSizeM)
}
func (c *spectrumIconsWorkflow) SizeL() IIconsWorkflow {
	return c.Size(IconsWorkflowSizeL)
}
func (c *spectrumIconsWorkflow) SizeXl() IIconsWorkflow {
	return c.Size(IconsWorkflowSizeXl)
}
func (c *spectrumIconsWorkflow) SizeXxl() IIconsWorkflow {
	return c.Size(IconsWorkflowSizeXxl)
}

// Style sets a style property with a value
func (c *spectrumIconsWorkflow) Style(key, format string, values ...any) IIconsWorkflow {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumIconsWorkflow) Styles(styles map[string]string) IIconsWorkflow {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumIconsWorkflow) Class(class string) IIconsWorkflow {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumIconsWorkflow) Classes(classes ...string) IIconsWorkflow {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumIconsWorkflow) Id(id string) IIconsWorkflow {
	return c.ider.Id(id)
}

// Render renders the sp-icon-workflow component
func (c *spectrumIconsWorkflow) Render() app.UI {
	element := app.Elem("sp-icon-workflow")

	// Set attributes
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
