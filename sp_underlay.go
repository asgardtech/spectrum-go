// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumUnderlay represents an sp-underlay component
type spectrumUnderlay struct {
	app.Compo
	*styler[*spectrumUnderlay]
	*classer[*spectrumUnderlay]
	*ider[*spectrumUnderlay]

	// Properties
	// Whether the underlay is currently visible
	PropOpen bool

	// Event handlers
	PropOnClose app.EventHandler
}

// IUnderlay is the interface for sp-underlay component methods
type IUnderlay interface {
	app.UI
	Styler[IUnderlay]
	Classer[IUnderlay]
	Ider[IUnderlay]
	Open(bool) IUnderlay
	SetOpen() IUnderlay

	OnClose(app.EventHandler) IUnderlay
}

// Underlay An sp-underlay is used primarily in concert with elements similar to sp-dialog that lay over the rest of your page to deliver a blocking layer between those two contexts.
func Underlay() IUnderlay {
	element := &spectrumUnderlay{
		PropOpen: false,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Open Whether the underlay is currently visible
func (c *spectrumUnderlay) Open(open bool) IUnderlay {
	c.PropOpen = open
	return c
}

func (c *spectrumUnderlay) SetOpen() IUnderlay {
	return c.Open(true)
}

// When the underlay is clicked and the consuming pattern should choose whether to close based on that interaction
func (c *spectrumUnderlay) OnClose(handler app.EventHandler) IUnderlay {
	c.PropOnClose = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumUnderlay) Style(key, format string, values ...any) IUnderlay {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumUnderlay) Styles(styles map[string]string) IUnderlay {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumUnderlay) Class(class string) IUnderlay {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumUnderlay) Classes(classes ...string) IUnderlay {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumUnderlay) Id(id string) IUnderlay {
	return c.ider.Id(id)
}

// Render renders the sp-underlay component
func (c *spectrumUnderlay) Render() app.UI {
	element := app.Elem("sp-underlay")

	// Set attributes
	if c.PropOpen {
		element = element.Attr("open", true)
	}

	// Add event handlers
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
