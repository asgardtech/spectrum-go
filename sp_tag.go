// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// TagSize represents the The size of the tag
type TagSize string

// TagSize values
const (
	TagSizeS TagSize = "s"
	TagSizeM TagSize = "m"
	TagSizeL TagSize = "l"
)

// spectrumTag represents an sp-tag component
type spectrumTag struct {
	app.Compo
	*styler[*spectrumTag]
	*classer[*spectrumTag]
	*ider[*spectrumTag]

	// Properties
	// Whether the tag can be removed by the user
	PropDeletable bool
	// Whether the tag is disabled and cannot be interacted with
	PropDisabled bool
	// Whether the tag is in an invalid state
	PropInvalid bool
	// Whether the tag is in a readonly state
	PropReadonly bool
	// The size of the tag
	PropSize TagSize

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropAvatarSlot app.UI
	PropIconSlot   app.UI

	// Event handlers
	PropOnDelete app.EventHandler
}

// ITag is the interface for sp-tag component methods
type ITag interface {
	app.UI
	Styler[ITag]
	Classer[ITag]
	Ider[ITag]
	Deletable(bool) ITag
	SetDeletable() ITag
	Disabled(bool) ITag
	SetDisabled() ITag
	Invalid(bool) ITag
	SetInvalid() ITag
	Readonly(bool) ITag
	SetReadonly() ITag
	Size(TagSize) ITag
	SizeS() ITag
	SizeM() ITag
	SizeL() ITag

	Body(...app.UI) ITag
	AddToBody(app.UI) ITag
	Text(string) ITag

	Avatar(app.UI) ITag
	Icon(app.UI) ITag

	OnDelete(app.EventHandler) ITag
}

// Tag Tags represent a category to which content belongs. They can represent keywords or people, and are grouped to describe an item or a search request.
func Tag() ITag {
	element := &spectrumTag{
		PropDeletable: false,
		PropDisabled:  false,
		PropInvalid:   false,
		PropReadonly:  false,
		PropSize:      TagSizeM,
		PropBody:      []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Deletable Whether the tag can be removed by the user
func (c *spectrumTag) Deletable(deletable bool) ITag {
	c.PropDeletable = deletable
	return c
}

func (c *spectrumTag) SetDeletable() ITag {
	return c.Deletable(true)
}

// Disabled Whether the tag is disabled and cannot be interacted with
func (c *spectrumTag) Disabled(disabled bool) ITag {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumTag) SetDisabled() ITag {
	return c.Disabled(true)
}

// Invalid Whether the tag is in an invalid state
func (c *spectrumTag) Invalid(invalid bool) ITag {
	c.PropInvalid = invalid
	return c
}

func (c *spectrumTag) SetInvalid() ITag {
	return c.Invalid(true)
}

// Readonly Whether the tag is in a readonly state
func (c *spectrumTag) Readonly(readonly bool) ITag {
	c.PropReadonly = readonly
	return c
}

func (c *spectrumTag) SetReadonly() ITag {
	return c.Readonly(true)
}

// Size The size of the tag
func (c *spectrumTag) Size(size TagSize) ITag {
	c.PropSize = size
	return c
}

func (c *spectrumTag) SizeS() ITag {
	return c.Size(TagSizeS)
}
func (c *spectrumTag) SizeM() ITag {
	return c.Size(TagSizeM)
}
func (c *spectrumTag) SizeL() ITag {
	return c.Size(TagSizeL)
}

// Body sets the content for the default slot
func (c *spectrumTag) Body(elements ...app.UI) ITag {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTag) AddToBody(element app.UI) ITag {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTag) Text(text string) ITag {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// An avatar element to display within the Tag
func (c *spectrumTag) Avatar(content app.UI) ITag {
	c.PropAvatarSlot = content

	return c
}

// An icon element to display within the Tag
func (c *spectrumTag) Icon(content app.UI) ITag {
	c.PropIconSlot = content

	return c
}

// Fired when the delete button is clicked on a deletable tag
func (c *spectrumTag) OnDelete(handler app.EventHandler) ITag {
	c.PropOnDelete = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumTag) Style(key, format string, values ...any) ITag {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTag) Styles(styles map[string]string) ITag {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTag) Class(class string) ITag {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTag) Classes(classes ...string) ITag {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTag) Id(id string) ITag {
	return c.ider.Id(id)
}

// Render renders the sp-tag component
func (c *spectrumTag) Render() app.UI {
	element := app.Elem("sp-tag")

	// Set attributes
	if c.PropDeletable {
		element = element.Attr("deletable", true)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropInvalid {
		element = element.Attr("invalid", true)
	}
	if c.PropReadonly {
		element = element.Attr("readonly", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}

	// Add event handlers
	if c.PropOnDelete != nil {
		element = element.On("delete", c.PropOnDelete)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add avatar slot
	if c.PropAvatarSlot != nil {
		slotElem := c.PropAvatarSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("avatar")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "avatar").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add icon slot
	if c.PropIconSlot != nil {
		slotElem := c.PropIconSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("icon")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "icon").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
