// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// AlertBannerVariant represents the The variant applies specific styling for different alert types
type AlertBannerVariant string

// AlertBannerVariant values
const (
	AlertBannerVariantInfo     AlertBannerVariant = "info"
	AlertBannerVariantNegative AlertBannerVariant = "negative"
)

// spectrumAlertBanner represents an sp-alert-banner component
type spectrumAlertBanner struct {
	app.Compo
	*styler[*spectrumAlertBanner]
	*classer[*spectrumAlertBanner]
	*ider[*spectrumAlertBanner]

	// Properties
	// Whether to include an icon-only close button to dismiss the alert banner
	PropDismissible bool
	// Controls the display of the alert banner
	PropOpen bool
	// The variant applies specific styling for different alert types
	PropVariant AlertBannerVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropActionSlot app.UI

	// Event handlers
	PropOnClose app.EventHandler
}

// IAlertBanner is the interface for sp-alert-banner component methods
type IAlertBanner interface {
	app.UI
	Styler[IAlertBanner]
	Classer[IAlertBanner]
	Ider[IAlertBanner]
	Dismissible(bool) IAlertBanner
	SetDismissible() IAlertBanner
	Open(bool) IAlertBanner
	SetOpen() IAlertBanner
	Variant(AlertBannerVariant) IAlertBanner
	VariantInfo() IAlertBanner
	VariantNegative() IAlertBanner

	Body(...app.UI) IAlertBanner
	AddToBody(app.UI) IAlertBanner
	Text(string) IAlertBanner

	Action(app.UI) IAlertBanner

	OnClose(app.EventHandler) IAlertBanner
}

// AlertBanner Shows pressing and high-signal messages, such as system alerts. It is meant to be noticed and prompt users to take action.
func AlertBanner() IAlertBanner {
	element := &spectrumAlertBanner{
		PropDismissible: false,
		PropOpen:        false,
		PropVariant:     "",
		PropBody:        []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Dismissible Whether to include an icon-only close button to dismiss the alert banner
func (c *spectrumAlertBanner) Dismissible(dismissible bool) IAlertBanner {
	c.PropDismissible = dismissible
	return c
}

func (c *spectrumAlertBanner) SetDismissible() IAlertBanner {
	return c.Dismissible(true)
}

// Open Controls the display of the alert banner
func (c *spectrumAlertBanner) Open(open bool) IAlertBanner {
	c.PropOpen = open
	return c
}

func (c *spectrumAlertBanner) SetOpen() IAlertBanner {
	return c.Open(true)
}

// Variant The variant applies specific styling for different alert types
func (c *spectrumAlertBanner) Variant(variant AlertBannerVariant) IAlertBanner {
	c.PropVariant = variant
	return c
}

func (c *spectrumAlertBanner) VariantInfo() IAlertBanner {
	return c.Variant(AlertBannerVariantInfo)
}
func (c *spectrumAlertBanner) VariantNegative() IAlertBanner {
	return c.Variant(AlertBannerVariantNegative)
}

// Body sets the content for the default slot
func (c *spectrumAlertBanner) Body(elements ...app.UI) IAlertBanner {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumAlertBanner) AddToBody(element app.UI) IAlertBanner {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumAlertBanner) Text(text string) IAlertBanner {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Slot for the button element that surfaces the contextual action a user can take
func (c *spectrumAlertBanner) Action(content app.UI) IAlertBanner {
	c.PropActionSlot = content

	return c
}

// Announces the alert banner has been closed
func (c *spectrumAlertBanner) OnClose(handler app.EventHandler) IAlertBanner {
	c.PropOnClose = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumAlertBanner) Style(key, format string, values ...any) IAlertBanner {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumAlertBanner) Styles(styles map[string]string) IAlertBanner {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumAlertBanner) Class(class string) IAlertBanner {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumAlertBanner) Classes(classes ...string) IAlertBanner {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumAlertBanner) Id(id string) IAlertBanner {
	return c.ider.Id(id)
}

// Render renders the sp-alert-banner component
func (c *spectrumAlertBanner) Render() app.UI {
	element := app.Elem("sp-alert-banner")

	// Set attributes
	if c.PropDismissible {
		element = element.Attr("dismissible", true)
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add action slot
	if c.PropActionSlot != nil {
		slotElem := c.PropActionSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("action")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "action").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
