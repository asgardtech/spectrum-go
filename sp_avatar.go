// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// AvatarReferrerpolicy represents the How much of the referrer to send when following the link.
type AvatarReferrerpolicy string

// AvatarReferrerpolicy values
const (
	AvatarReferrerpolicyNoReferrer                  AvatarReferrerpolicy = "no-referrer"
	AvatarReferrerpolicyNoReferrerWhenDowngrade     AvatarReferrerpolicy = "no-referrer-when-downgrade"
	AvatarReferrerpolicyOrigin                      AvatarReferrerpolicy = "origin"
	AvatarReferrerpolicyOriginWhenCrossOrigin       AvatarReferrerpolicy = "origin-when-cross-origin"
	AvatarReferrerpolicySameOrigin                  AvatarReferrerpolicy = "same-origin"
	AvatarReferrerpolicyStrictOrigin                AvatarReferrerpolicy = "strict-origin"
	AvatarReferrerpolicyStrictOriginWhenCrossOrigin AvatarReferrerpolicy = "strict-origin-when-cross-origin"
	AvatarReferrerpolicyUnsafeUrl                   AvatarReferrerpolicy = "unsafe-url"
)

// AvatarSize represents the The size of the avatar
type AvatarSize string

// AvatarSize values
const (
	AvatarSize50  AvatarSize = "50"
	AvatarSize75  AvatarSize = "75"
	AvatarSize100 AvatarSize = "100"
	AvatarSize200 AvatarSize = "200"
	AvatarSize300 AvatarSize = "300"
	AvatarSize400 AvatarSize = "400"
	AvatarSize500 AvatarSize = "500"
	AvatarSize600 AvatarSize = "600"
	AvatarSize700 AvatarSize = "700"
)

// AvatarTarget represents the Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
type AvatarTarget string

// AvatarTarget values
const (
	AvatarTarget_blank  AvatarTarget = "_blank"
	AvatarTarget_parent AvatarTarget = "_parent"
	AvatarTarget_self   AvatarTarget = "_self"
	AvatarTarget_top    AvatarTarget = "_top"
)

// spectrumAvatar represents an sp-avatar component
type spectrumAvatar struct {
	app.Compo
	*styler[*spectrumAvatar]
	*classer[*spectrumAvatar]
	*ider[*spectrumAvatar]

	// Properties
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Causes the browser to treat the linked URL as a download.
	PropDownload string
	// The URL that the hyperlink points to.
	PropHref string
	// An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
	PropLabel string
	// How much of the referrer to send when following the link.
	PropReferrerpolicy AvatarReferrerpolicy
	// The relationship of the linked URL as space-separated link types.
	PropRel string
	// The size of the avatar
	PropSize AvatarSize
	// The URL of the image to display for the avatar
	PropSrc string
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64
	// Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
	PropTarget AvatarTarget

	// Event handlers
	PropOnClick app.EventHandler
}

// IAvatar is the interface for sp-avatar component methods
type IAvatar interface {
	app.UI
	Styler[IAvatar]
	Classer[IAvatar]
	Ider[IAvatar]
	Disabled(bool) IAvatar
	SetDisabled() IAvatar
	Download(string) IAvatar
	Href(string) IAvatar
	Label(string) IAvatar
	Referrerpolicy(AvatarReferrerpolicy) IAvatar
	ReferrerpolicyNoReferrer() IAvatar
	ReferrerpolicyNoReferrerWhenDowngrade() IAvatar
	ReferrerpolicyOrigin() IAvatar
	ReferrerpolicyOriginWhenCrossOrigin() IAvatar
	ReferrerpolicySameOrigin() IAvatar
	ReferrerpolicyStrictOrigin() IAvatar
	ReferrerpolicyStrictOriginWhenCrossOrigin() IAvatar
	ReferrerpolicyUnsafeUrl() IAvatar
	Rel(string) IAvatar
	Size(AvatarSize) IAvatar
	Size50() IAvatar
	Size75() IAvatar
	Size100() IAvatar
	Size200() IAvatar
	Size300() IAvatar
	Size400() IAvatar
	Size500() IAvatar
	Size600() IAvatar
	Size700() IAvatar
	Src(string) IAvatar
	Tabindex(float64) IAvatar
	Target(AvatarTarget) IAvatar
	Target_blank() IAvatar
	Target_parent() IAvatar
	Target_self() IAvatar
	Target_top() IAvatar

	OnClick(app.EventHandler) IAvatar
}

// Avatar An avatar is a great way to feature a visual representation of a user.
func Avatar() IAvatar {
	element := &spectrumAvatar{
		PropDisabled: false,
		PropSize:     AvatarSize100,
		PropSrc:      "",
		PropTabindex: 0,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumAvatar) Disabled(disabled bool) IAvatar {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumAvatar) SetDisabled() IAvatar {
	return c.Disabled(true)
}

// Download Causes the browser to treat the linked URL as a download.
func (c *spectrumAvatar) Download(download string) IAvatar {
	c.PropDownload = download
	return c
}

// Href The URL that the hyperlink points to.
func (c *spectrumAvatar) Href(href string) IAvatar {
	c.PropHref = href
	return c
}

// Label An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
func (c *spectrumAvatar) Label(label string) IAvatar {
	c.PropLabel = label
	return c
}

// Referrerpolicy How much of the referrer to send when following the link.
func (c *spectrumAvatar) Referrerpolicy(referrerpolicy AvatarReferrerpolicy) IAvatar {
	c.PropReferrerpolicy = referrerpolicy
	return c
}

func (c *spectrumAvatar) ReferrerpolicyNoReferrer() IAvatar {
	return c.Referrerpolicy(AvatarReferrerpolicyNoReferrer)
}
func (c *spectrumAvatar) ReferrerpolicyNoReferrerWhenDowngrade() IAvatar {
	return c.Referrerpolicy(AvatarReferrerpolicyNoReferrerWhenDowngrade)
}
func (c *spectrumAvatar) ReferrerpolicyOrigin() IAvatar {
	return c.Referrerpolicy(AvatarReferrerpolicyOrigin)
}
func (c *spectrumAvatar) ReferrerpolicyOriginWhenCrossOrigin() IAvatar {
	return c.Referrerpolicy(AvatarReferrerpolicyOriginWhenCrossOrigin)
}
func (c *spectrumAvatar) ReferrerpolicySameOrigin() IAvatar {
	return c.Referrerpolicy(AvatarReferrerpolicySameOrigin)
}
func (c *spectrumAvatar) ReferrerpolicyStrictOrigin() IAvatar {
	return c.Referrerpolicy(AvatarReferrerpolicyStrictOrigin)
}
func (c *spectrumAvatar) ReferrerpolicyStrictOriginWhenCrossOrigin() IAvatar {
	return c.Referrerpolicy(AvatarReferrerpolicyStrictOriginWhenCrossOrigin)
}
func (c *spectrumAvatar) ReferrerpolicyUnsafeUrl() IAvatar {
	return c.Referrerpolicy(AvatarReferrerpolicyUnsafeUrl)
}

// Rel The relationship of the linked URL as space-separated link types.
func (c *spectrumAvatar) Rel(rel string) IAvatar {
	c.PropRel = rel
	return c
}

// Size The size of the avatar
func (c *spectrumAvatar) Size(size AvatarSize) IAvatar {
	c.PropSize = size
	return c
}

func (c *spectrumAvatar) Size50() IAvatar {
	return c.Size(AvatarSize50)
}
func (c *spectrumAvatar) Size75() IAvatar {
	return c.Size(AvatarSize75)
}
func (c *spectrumAvatar) Size100() IAvatar {
	return c.Size(AvatarSize100)
}
func (c *spectrumAvatar) Size200() IAvatar {
	return c.Size(AvatarSize200)
}
func (c *spectrumAvatar) Size300() IAvatar {
	return c.Size(AvatarSize300)
}
func (c *spectrumAvatar) Size400() IAvatar {
	return c.Size(AvatarSize400)
}
func (c *spectrumAvatar) Size500() IAvatar {
	return c.Size(AvatarSize500)
}
func (c *spectrumAvatar) Size600() IAvatar {
	return c.Size(AvatarSize600)
}
func (c *spectrumAvatar) Size700() IAvatar {
	return c.Size(AvatarSize700)
}

// Src The URL of the image to display for the avatar
func (c *spectrumAvatar) Src(src string) IAvatar {
	c.PropSrc = src
	return c
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumAvatar) Tabindex(tabindex float64) IAvatar {
	c.PropTabindex = tabindex
	return c
}

// Target Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
func (c *spectrumAvatar) Target(target AvatarTarget) IAvatar {
	c.PropTarget = target
	return c
}

func (c *spectrumAvatar) Target_blank() IAvatar {
	return c.Target(AvatarTarget_blank)
}
func (c *spectrumAvatar) Target_parent() IAvatar {
	return c.Target(AvatarTarget_parent)
}
func (c *spectrumAvatar) Target_self() IAvatar {
	return c.Target(AvatarTarget_self)
}
func (c *spectrumAvatar) Target_top() IAvatar {
	return c.Target(AvatarTarget_top)
}

// Fired when the avatar is clicked when it has an href attribute
func (c *spectrumAvatar) OnClick(handler app.EventHandler) IAvatar {
	c.PropOnClick = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumAvatar) Style(key, format string, values ...any) IAvatar {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumAvatar) Styles(styles map[string]string) IAvatar {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumAvatar) Class(class string) IAvatar {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumAvatar) Classes(classes ...string) IAvatar {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumAvatar) Id(id string) IAvatar {
	return c.ider.Id(id)
}

// Render renders the sp-avatar component
func (c *spectrumAvatar) Render() app.UI {
	element := app.Elem("sp-avatar")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropDownload != "" {
		element = element.Attr("download", c.PropDownload)
	}
	if c.PropHref != "" {
		element = element.Attr("href", c.PropHref)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropReferrerpolicy != "" {
		element = element.Attr("referrerpolicy", string(c.PropReferrerpolicy))
	}
	if c.PropRel != "" {
		element = element.Attr("rel", c.PropRel)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropSrc != "" {
		element = element.Attr("src", c.PropSrc)
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabindex", c.PropTabindex)
	}
	if c.PropTarget != "" {
		element = element.Attr("target", string(c.PropTarget))
	}

	// Add event handlers
	if c.PropOnClick != nil {
		element = element.On("click", c.PropOnClick)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
