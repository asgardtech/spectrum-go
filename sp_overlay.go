// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// OverlayType represents the The type of overlay which determines its behavior
type OverlayType string

// OverlayType values
const (
	OverlayTypeAuto   OverlayType = "auto"
	OverlayTypeHint   OverlayType = "hint"
	OverlayTypeManual OverlayType = "manual"
	OverlayTypeModal  OverlayType = "modal"
	OverlayTypePage   OverlayType = "page"
)

// spectrumOverlay represents an sp-overlay component
type spectrumOverlay struct {
	app.Compo
	*styler[*spectrumOverlay]
	*classer[*spectrumOverlay]
	*ider[*spectrumOverlay]

	// Properties
	// Whether the overlay is currently open
	PropOpen bool
	// Whether the opening of the overlay should be delayed
	PropDelayed bool
	// Distance from the trigger element, can be a single number or an array of two numbers [x, y]
	PropOffset float64
	// Where the overlay should be positioned relative to its trigger element (e.g., 'top', 'bottom', 'right-start')
	PropPlacement string
	// How the overlay should receive focus
	PropReceivesFocus string
	// ID of the element that triggers the overlay, can include interaction type (e.g., 'trigger-id@click')
	PropTrigger string
	// The type of overlay which determines its behavior
	PropType OverlayType

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnSlottableRequest app.EventHandler
	PropOnSpClosed         app.EventHandler
	PropOnSpOpened         app.EventHandler
}

// IOverlay is the interface for sp-overlay component methods
type IOverlay interface {
	app.UI
	Styler[IOverlay]
	Classer[IOverlay]
	Ider[IOverlay]
	Open(bool) IOverlay
	SetOpen() IOverlay
	Delayed(bool) IOverlay
	SetDelayed() IOverlay
	Offset(float64) IOverlay
	Placement(string) IOverlay
	ReceivesFocus(string) IOverlay
	Trigger(string) IOverlay
	Type(OverlayType) IOverlay
	TypeAuto() IOverlay
	TypeHint() IOverlay
	TypeManual() IOverlay
	TypeModal() IOverlay
	TypePage() IOverlay

	Body(...app.UI) IOverlay
	AddToBody(app.UI) IOverlay
	Text(string) IOverlay

	OnSlottableRequest(app.EventHandler) IOverlay
	OnSpClosed(app.EventHandler) IOverlay
	OnSpOpened(app.EventHandler) IOverlay
}

// Overlay An sp-overlay element is used to decorate content that you would like to present to your visitors as 'overlaid' on the rest of the application, such as dialogs, pickers, tooltips, and context menus.
func Overlay() IOverlay {
	element := &spectrumOverlay{
		PropOpen:          false,
		PropDelayed:       false,
		PropOffset:        0,
		PropReceivesFocus: "auto",
		PropType:          OverlayTypeAuto,
		PropBody:          []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Open Whether the overlay is currently open
func (c *spectrumOverlay) Open(open bool) IOverlay {
	c.PropOpen = open
	return c
}

func (c *spectrumOverlay) SetOpen() IOverlay {
	return c.Open(true)
}

// Delayed Whether the opening of the overlay should be delayed
func (c *spectrumOverlay) Delayed(delayed bool) IOverlay {
	c.PropDelayed = delayed
	return c
}

func (c *spectrumOverlay) SetDelayed() IOverlay {
	return c.Delayed(true)
}

// Offset Distance from the trigger element, can be a single number or an array of two numbers [x, y]
func (c *spectrumOverlay) Offset(offset float64) IOverlay {
	c.PropOffset = offset
	return c
}

// Placement Where the overlay should be positioned relative to its trigger element (e.g., 'top', 'bottom', 'right-start')
func (c *spectrumOverlay) Placement(placement string) IOverlay {
	c.PropPlacement = placement
	return c
}

// ReceivesFocus How the overlay should receive focus
func (c *spectrumOverlay) ReceivesFocus(receivesFocus string) IOverlay {
	c.PropReceivesFocus = receivesFocus
	return c
}

// Trigger ID of the element that triggers the overlay, can include interaction type (e.g., 'trigger-id@click')
func (c *spectrumOverlay) Trigger(trigger string) IOverlay {
	c.PropTrigger = trigger
	return c
}

// Type The type of overlay which determines its behavior
func (c *spectrumOverlay) Type(typeValue OverlayType) IOverlay {
	c.PropType = typeValue
	return c
}

func (c *spectrumOverlay) TypeAuto() IOverlay {
	return c.Type(OverlayTypeAuto)
}
func (c *spectrumOverlay) TypeHint() IOverlay {
	return c.Type(OverlayTypeHint)
}
func (c *spectrumOverlay) TypeManual() IOverlay {
	return c.Type(OverlayTypeManual)
}
func (c *spectrumOverlay) TypeModal() IOverlay {
	return c.Type(OverlayTypeModal)
}
func (c *spectrumOverlay) TypePage() IOverlay {
	return c.Type(OverlayTypePage)
}

// Body sets the content for the default slot
func (c *spectrumOverlay) Body(elements ...app.UI) IOverlay {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumOverlay) AddToBody(element app.UI) IOverlay {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumOverlay) Text(text string) IOverlay {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Requests to add or remove slottable content
func (c *spectrumOverlay) OnSlottableRequest(handler app.EventHandler) IOverlay {
	c.PropOnSlottableRequest = handler

	return c
}

// Announces that an overlay has completed any exit animations
func (c *spectrumOverlay) OnSpClosed(handler app.EventHandler) IOverlay {
	c.PropOnSpClosed = handler

	return c
}

// Announces that an overlay has completed any entry animations
func (c *spectrumOverlay) OnSpOpened(handler app.EventHandler) IOverlay {
	c.PropOnSpOpened = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumOverlay) Style(key, format string, values ...any) IOverlay {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumOverlay) Styles(styles map[string]string) IOverlay {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumOverlay) Class(class string) IOverlay {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumOverlay) Classes(classes ...string) IOverlay {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumOverlay) Id(id string) IOverlay {
	return c.ider.Id(id)
}

// Render renders the sp-overlay component
func (c *spectrumOverlay) Render() app.UI {
	element := app.Elem("sp-overlay")

	// Set attributes
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropDelayed {
		element = element.Attr("delayed", true)
	}
	if c.PropOffset != 0 {
		element = element.Attr("offset", c.PropOffset)
	}
	if c.PropPlacement != "" {
		element = element.Attr("placement", c.PropPlacement)
	}
	if c.PropReceivesFocus != "" {
		element = element.Attr("receives-focus", c.PropReceivesFocus)
	}
	if c.PropTrigger != "" {
		element = element.Attr("trigger", c.PropTrigger)
	}
	if c.PropType != "" {
		element = element.Attr("type", string(c.PropType))
	}

	// Add event handlers
	if c.PropOnSlottableRequest != nil {
		element = element.On("slottable-request", c.PropOnSlottableRequest)
	}
	if c.PropOnSpClosed != nil {
		element = element.On("sp-closed", c.PropOnSpClosed)
	}
	if c.PropOnSpOpened != nil {
		element = element.On("sp-opened", c.PropOnSpOpened)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
