// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ToastVariant represents the Applies specific styling to the toast
type ToastVariant string

// ToastVariant values
const (
	ToastVariantNegative ToastVariant = "negative"
	ToastVariantPositive ToastVariant = "positive"
	ToastVariantInfo     ToastVariant = "info"
	ToastVariantError    ToastVariant = "error"
	ToastVariantWarning  ToastVariant = "warning"
)

// spectrumToast represents an sp-toast component
type spectrumToast struct {
	app.Compo
	*styler[*spectrumToast]
	*classer[*spectrumToast]
	*ider[*spectrumToast]

	// Properties
	// Sets the label attribute on the icon element, providing a text alternative for accessibility
	PropIconLabel string
	// Indicates whether the toast is visible or hidden
	PropOpen bool
	// The number of milliseconds before the toast automatically dismisses itself
	PropTimeout float64
	// Applies specific styling to the toast
	PropVariant ToastVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropActionSlot app.UI

	// Event handlers
	PropOnClose app.EventHandler
}

// IToast is the interface for sp-toast component methods
type IToast interface {
	app.UI
	Styler[IToast]
	Classer[IToast]
	Ider[IToast]
	IconLabel(string) IToast
	Open(bool) IToast
	SetOpen() IToast
	Timeout(float64) IToast
	Variant(ToastVariant) IToast
	VariantNegative() IToast
	VariantPositive() IToast
	VariantInfo() IToast
	VariantError() IToast
	VariantWarning() IToast

	Body(...app.UI) IToast
	AddToBody(app.UI) IToast
	Text(string) IToast

	Action(app.UI) IToast

	OnClose(app.EventHandler) IToast
}

// Toast An sp-toast element displays brief, temporary notifications. Toasts are noticeable but do not disrupt the user experience and do not require an action to be taken.
func Toast() IToast {
	element := &spectrumToast{
		PropOpen:    false,
		PropTimeout: 0,
		PropVariant: "",
		PropBody:    []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// IconLabel Sets the label attribute on the icon element, providing a text alternative for accessibility
func (c *spectrumToast) IconLabel(iconLabel string) IToast {
	c.PropIconLabel = iconLabel
	return c
}

// Open Indicates whether the toast is visible or hidden
func (c *spectrumToast) Open(open bool) IToast {
	c.PropOpen = open
	return c
}

func (c *spectrumToast) SetOpen() IToast {
	return c.Open(true)
}

// Timeout The number of milliseconds before the toast automatically dismisses itself
func (c *spectrumToast) Timeout(timeout float64) IToast {
	c.PropTimeout = timeout
	return c
}

// Variant Applies specific styling to the toast
func (c *spectrumToast) Variant(variant ToastVariant) IToast {
	c.PropVariant = variant
	return c
}

func (c *spectrumToast) VariantNegative() IToast {
	return c.Variant(ToastVariantNegative)
}
func (c *spectrumToast) VariantPositive() IToast {
	return c.Variant(ToastVariantPositive)
}
func (c *spectrumToast) VariantInfo() IToast {
	return c.Variant(ToastVariantInfo)
}
func (c *spectrumToast) VariantError() IToast {
	return c.Variant(ToastVariantError)
}
func (c *spectrumToast) VariantWarning() IToast {
	return c.Variant(ToastVariantWarning)
}

// Body sets the content for the default slot
func (c *spectrumToast) Body(elements ...app.UI) IToast {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumToast) AddToBody(element app.UI) IToast {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumToast) Text(text string) IToast {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Button element surfacing an action in the toast
func (c *spectrumToast) Action(content app.UI) IToast {
	c.PropActionSlot = content

	return c
}

// Announces that the toast has been closed by the user or by its timeout
func (c *spectrumToast) OnClose(handler app.EventHandler) IToast {
	c.PropOnClose = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumToast) Style(key, format string, values ...any) IToast {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumToast) Styles(styles map[string]string) IToast {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumToast) Class(class string) IToast {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumToast) Classes(classes ...string) IToast {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumToast) Id(id string) IToast {
	return c.ider.Id(id)
}

// Render renders the sp-toast component
func (c *spectrumToast) Render() app.UI {
	element := app.Elem("sp-toast")

	// Set attributes
	if c.PropIconLabel != "" {
		element = element.Attr("icon-label", c.PropIconLabel)
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropTimeout != 0 {
		element = element.Attr("timeout", c.PropTimeout)
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add action slot
	if c.PropActionSlot != nil {
		slotElem := c.PropActionSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("action")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "action").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
