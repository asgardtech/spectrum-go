// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumTopNav represents an sp-top-nav component
type spectrumTopNav struct {
	app.Compo
	*styler[*spectrumTopNav]
	*classer[*spectrumTopNav]
	*ider[*spectrumTopNav]

	// Properties
	// A space separated list of parts of the URL to ignore when matching for the selected Top Nav Item. Supported values: 'hash', 'search'
	PropIgnoreUrlParts string
	// Accessible label for the navigation
	PropLabel string
	// The Top Nav is displayed without a border
	PropQuiet bool
	// The currently selected navigation item
	PropSelected string
	// Style to apply to the selection indicator
	PropSelectionIndicatorStyle string

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// ITopNav is the interface for sp-top-nav component methods
type ITopNav interface {
	app.UI
	Styler[ITopNav]
	Classer[ITopNav]
	Ider[ITopNav]
	IgnoreUrlParts(string) ITopNav
	Label(string) ITopNav
	Quiet(bool) ITopNav
	SetQuiet() ITopNav
	Selected(string) ITopNav
	SelectionIndicatorStyle(string) ITopNav

	Body(...app.UI) ITopNav
	AddToBody(app.UI) ITopNav
	Text(string) ITopNav
}

// TopNav An sp-top-nav delivers site navigation, particularly for when that navigation will change the majority of the page's content and/or the page's URL when selected. All primary elements are directly accessible in the tab order.
func TopNav() ITopNav {
	element := &spectrumTopNav{
		PropIgnoreUrlParts: "",
		PropLabel:          "",
		PropQuiet:          false,
		PropBody:           []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// IgnoreUrlParts A space separated list of parts of the URL to ignore when matching for the selected Top Nav Item. Supported values: 'hash', 'search'
func (c *spectrumTopNav) IgnoreUrlParts(ignoreUrlParts string) ITopNav {
	c.PropIgnoreUrlParts = ignoreUrlParts
	return c
}

// Label Accessible label for the navigation
func (c *spectrumTopNav) Label(label string) ITopNav {
	c.PropLabel = label
	return c
}

// Quiet The Top Nav is displayed without a border
func (c *spectrumTopNav) Quiet(quiet bool) ITopNav {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumTopNav) SetQuiet() ITopNav {
	return c.Quiet(true)
}

// Selected The currently selected navigation item
func (c *spectrumTopNav) Selected(selected string) ITopNav {
	c.PropSelected = selected
	return c
}

// SelectionIndicatorStyle Style to apply to the selection indicator
func (c *spectrumTopNav) SelectionIndicatorStyle(selectionIndicatorStyle string) ITopNav {
	c.PropSelectionIndicatorStyle = selectionIndicatorStyle
	return c
}

// Body sets the content for the default slot
func (c *spectrumTopNav) Body(elements ...app.UI) ITopNav {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTopNav) AddToBody(element app.UI) ITopNav {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTopNav) Text(text string) ITopNav {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumTopNav) Style(key, format string, values ...any) ITopNav {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTopNav) Styles(styles map[string]string) ITopNav {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTopNav) Class(class string) ITopNav {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTopNav) Classes(classes ...string) ITopNav {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTopNav) Id(id string) ITopNav {
	return c.ider.Id(id)
}

// Render renders the sp-top-nav component
func (c *spectrumTopNav) Render() app.UI {
	element := app.Elem("sp-top-nav")

	// Set attributes
	if c.PropIgnoreUrlParts != "" {
		element = element.Attr("ignore-url-parts", c.PropIgnoreUrlParts)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropSelected != "" {
		element = element.Attr("selected", c.PropSelected)
	}
	if c.PropSelectionIndicatorStyle != "" {
		element = element.Attr("selection-indicator-style", c.PropSelectionIndicatorStyle)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
