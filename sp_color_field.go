// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ColorFieldAutocomplete represents the What form of assistance should be provided when attempting to supply a value to the form control
type ColorFieldAutocomplete string

// ColorFieldAutocomplete values
const (
	ColorFieldAutocompleteList ColorFieldAutocomplete = "list"
	ColorFieldAutocompleteNone ColorFieldAutocomplete = "none"
)

// ColorFieldSize represents the Size of the color field
type ColorFieldSize string

// ColorFieldSize values
const (
	ColorFieldSizeS  ColorFieldSize = "s"
	ColorFieldSizeM  ColorFieldSize = "m"
	ColorFieldSizeL  ColorFieldSize = "l"
	ColorFieldSizeXl ColorFieldSize = "xl"
)

// spectrumColorField represents an sp-color-field component
type spectrumColorField struct {
	app.Compo
	*styler[*spectrumColorField]
	*classer[*spectrumColorField]
	*ider[*spectrumColorField]

	// Properties
	// What form of assistance should be provided when attempting to supply a value to the form control
	PropAutocomplete ColorFieldAutocomplete
	// Disables the color field. It will not receive focus or events
	PropDisabled bool
	// Whether a multiline form control will change size vertically to accommodate longer input
	PropGrows bool
	// Whether the value held by the form control is invalid
	PropInvalid bool
	// A string applied via aria-label to the form control when a user visible label is not provided
	PropLabel string
	// Defines the maximum string length that the user can enter
	PropMaxlength float64
	// Defines the minimum string length that the user can enter
	PropMinlength float64
	// Whether the form control should accept a value longer than one line
	PropMultiline bool
	// Name of the form control
	PropName string
	// Pattern the value must match to be valid
	PropPattern string
	// Text that appears in the form control when it has no value set
	PropPlaceholder string
	// Whether to display the form control with no visible background
	PropQuiet bool
	// Whether a user can interact with the value of the form control
	PropReadonly bool
	// Whether the form control will be found to be invalid when it holds no value
	PropRequired bool
	// Size of the color field
	PropSize ColorFieldSize
	// The tab index to apply to this control
	PropTabindex float64
	// Whether the value held by the form control is valid
	PropValid bool
	// The color value held by the form control
	PropValue string
	// Whether to display a color handle showing the current color
	PropViewcolor bool

	// Event handlers
	PropOnChange app.EventHandler
	PropOnInput  app.EventHandler
}

// IColorField is the interface for sp-color-field component methods
type IColorField interface {
	app.UI
	Styler[IColorField]
	Classer[IColorField]
	Ider[IColorField]
	Autocomplete(ColorFieldAutocomplete) IColorField
	AutocompleteList() IColorField
	AutocompleteNone() IColorField
	Disabled(bool) IColorField
	SetDisabled() IColorField
	Grows(bool) IColorField
	SetGrows() IColorField
	Invalid(bool) IColorField
	SetInvalid() IColorField
	Label(string) IColorField
	Maxlength(float64) IColorField
	Minlength(float64) IColorField
	Multiline(bool) IColorField
	SetMultiline() IColorField
	Name(string) IColorField
	Pattern(string) IColorField
	Placeholder(string) IColorField
	Quiet(bool) IColorField
	SetQuiet() IColorField
	Readonly(bool) IColorField
	SetReadonly() IColorField
	Required(bool) IColorField
	SetRequired() IColorField
	Size(ColorFieldSize) IColorField
	SizeS() IColorField
	SizeM() IColorField
	SizeL() IColorField
	SizeXl() IColorField
	Tabindex(float64) IColorField
	Valid(bool) IColorField
	SetValid() IColorField
	Value(string) IColorField
	Viewcolor(bool) IColorField
	SetViewcolor() IColorField

	OnChange(app.EventHandler) IColorField
	OnInput(app.EventHandler) IColorField
}

// ColorField A textfield that allows users to input custom color values. Supports color formats including HEX, RGB, HSL, HSV, and shorthand HEX.
func ColorField() IColorField {
	element := &spectrumColorField{
		PropDisabled:    false,
		PropGrows:       false,
		PropInvalid:     false,
		PropLabel:       "",
		PropMaxlength:   -1,
		PropMinlength:   -1,
		PropMultiline:   false,
		PropPlaceholder: "",
		PropQuiet:       false,
		PropReadonly:    false,
		PropRequired:    false,
		PropSize:        ColorFieldSizeM,
		PropTabindex:    0,
		PropValid:       false,
		PropViewcolor:   false,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Autocomplete What form of assistance should be provided when attempting to supply a value to the form control
func (c *spectrumColorField) Autocomplete(autocomplete ColorFieldAutocomplete) IColorField {
	c.PropAutocomplete = autocomplete
	return c
}

func (c *spectrumColorField) AutocompleteList() IColorField {
	return c.Autocomplete(ColorFieldAutocompleteList)
}
func (c *spectrumColorField) AutocompleteNone() IColorField {
	return c.Autocomplete(ColorFieldAutocompleteNone)
}

// Disabled Disables the color field. It will not receive focus or events
func (c *spectrumColorField) Disabled(disabled bool) IColorField {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumColorField) SetDisabled() IColorField {
	return c.Disabled(true)
}

// Grows Whether a multiline form control will change size vertically to accommodate longer input
func (c *spectrumColorField) Grows(grows bool) IColorField {
	c.PropGrows = grows
	return c
}

func (c *spectrumColorField) SetGrows() IColorField {
	return c.Grows(true)
}

// Invalid Whether the value held by the form control is invalid
func (c *spectrumColorField) Invalid(invalid bool) IColorField {
	c.PropInvalid = invalid
	return c
}

func (c *spectrumColorField) SetInvalid() IColorField {
	return c.Invalid(true)
}

// Label A string applied via aria-label to the form control when a user visible label is not provided
func (c *spectrumColorField) Label(label string) IColorField {
	c.PropLabel = label
	return c
}

// Maxlength Defines the maximum string length that the user can enter
func (c *spectrumColorField) Maxlength(maxlength float64) IColorField {
	c.PropMaxlength = maxlength
	return c
}

// Minlength Defines the minimum string length that the user can enter
func (c *spectrumColorField) Minlength(minlength float64) IColorField {
	c.PropMinlength = minlength
	return c
}

// Multiline Whether the form control should accept a value longer than one line
func (c *spectrumColorField) Multiline(multiline bool) IColorField {
	c.PropMultiline = multiline
	return c
}

func (c *spectrumColorField) SetMultiline() IColorField {
	return c.Multiline(true)
}

// Name Name of the form control
func (c *spectrumColorField) Name(name string) IColorField {
	c.PropName = name
	return c
}

// Pattern Pattern the value must match to be valid
func (c *spectrumColorField) Pattern(pattern string) IColorField {
	c.PropPattern = pattern
	return c
}

// Placeholder Text that appears in the form control when it has no value set
func (c *spectrumColorField) Placeholder(placeholder string) IColorField {
	c.PropPlaceholder = placeholder
	return c
}

// Quiet Whether to display the form control with no visible background
func (c *spectrumColorField) Quiet(quiet bool) IColorField {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumColorField) SetQuiet() IColorField {
	return c.Quiet(true)
}

// Readonly Whether a user can interact with the value of the form control
func (c *spectrumColorField) Readonly(readonly bool) IColorField {
	c.PropReadonly = readonly
	return c
}

func (c *spectrumColorField) SetReadonly() IColorField {
	return c.Readonly(true)
}

// Required Whether the form control will be found to be invalid when it holds no value
func (c *spectrumColorField) Required(required bool) IColorField {
	c.PropRequired = required
	return c
}

func (c *spectrumColorField) SetRequired() IColorField {
	return c.Required(true)
}

// Size Size of the color field
func (c *spectrumColorField) Size(size ColorFieldSize) IColorField {
	c.PropSize = size
	return c
}

func (c *spectrumColorField) SizeS() IColorField {
	return c.Size(ColorFieldSizeS)
}
func (c *spectrumColorField) SizeM() IColorField {
	return c.Size(ColorFieldSizeM)
}
func (c *spectrumColorField) SizeL() IColorField {
	return c.Size(ColorFieldSizeL)
}
func (c *spectrumColorField) SizeXl() IColorField {
	return c.Size(ColorFieldSizeXl)
}

// Tabindex The tab index to apply to this control
func (c *spectrumColorField) Tabindex(tabIndex float64) IColorField {
	c.PropTabindex = tabIndex
	return c
}

// Valid Whether the value held by the form control is valid
func (c *spectrumColorField) Valid(valid bool) IColorField {
	c.PropValid = valid
	return c
}

func (c *spectrumColorField) SetValid() IColorField {
	return c.Valid(true)
}

// Value The color value held by the form control
func (c *spectrumColorField) Value(value string) IColorField {
	c.PropValue = value
	return c
}

// Viewcolor Whether to display a color handle showing the current color
func (c *spectrumColorField) Viewcolor(viewColor bool) IColorField {
	c.PropViewcolor = viewColor
	return c
}

func (c *spectrumColorField) SetViewcolor() IColorField {
	return c.Viewcolor(true)
}

// An alteration to the value of the color field has been committed by the user
func (c *spectrumColorField) OnChange(handler app.EventHandler) IColorField {
	c.PropOnChange = handler

	return c
}

// The value of the color field has changed
func (c *spectrumColorField) OnInput(handler app.EventHandler) IColorField {
	c.PropOnInput = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumColorField) Style(key, format string, values ...any) IColorField {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumColorField) Styles(styles map[string]string) IColorField {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumColorField) Class(class string) IColorField {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumColorField) Classes(classes ...string) IColorField {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumColorField) Id(id string) IColorField {
	return c.ider.Id(id)
}

// Render renders the sp-color-field component
func (c *spectrumColorField) Render() app.UI {
	element := app.Elem("sp-color-field")

	// Set attributes
	if c.PropAutocomplete != "" {
		element = element.Attr("autocomplete", string(c.PropAutocomplete))
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropGrows {
		element = element.Attr("grows", true)
	}
	if c.PropInvalid {
		element = element.Attr("invalid", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropMaxlength != 0 {
		element = element.Attr("maxlength", c.PropMaxlength)
	}
	if c.PropMinlength != 0 {
		element = element.Attr("minlength", c.PropMinlength)
	}
	if c.PropMultiline {
		element = element.Attr("multiline", true)
	}
	if c.PropName != "" {
		element = element.Attr("name", c.PropName)
	}
	if c.PropPattern != "" {
		element = element.Attr("pattern", c.PropPattern)
	}
	if c.PropPlaceholder != "" {
		element = element.Attr("placeholder", c.PropPlaceholder)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropReadonly {
		element = element.Attr("readonly", true)
	}
	if c.PropRequired {
		element = element.Attr("required", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabIndex", c.PropTabindex)
	}
	if c.PropValid {
		element = element.Attr("valid", true)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}
	if c.PropViewcolor {
		element = element.Attr("viewColor", true)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnInput != nil {
		element = element.On("input", c.PropOnInput)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
