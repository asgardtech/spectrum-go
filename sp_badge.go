// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// BadgeFixed represents the Alters the border rounding to make the badge appear fixed to a specific edge
type BadgeFixed string

// BadgeFixed values
const (
	BadgeFixedBlockStart  BadgeFixed = "block-start"
	BadgeFixedInlineEnd   BadgeFixed = "inline-end"
	BadgeFixedBlockEnd    BadgeFixed = "block-end"
	BadgeFixedInlineStart BadgeFixed = "inline-start"
)

// BadgeSize represents the The size of the badge
type BadgeSize string

// BadgeSize values
const (
	BadgeSizeS  BadgeSize = "s"
	BadgeSizeM  BadgeSize = "m"
	BadgeSizeL  BadgeSize = "l"
	BadgeSizeXl BadgeSize = "xl"
)

// BadgeVariant represents the The visual variant of the badge
type BadgeVariant string

// BadgeVariant values
const (
	BadgeVariantAccent      BadgeVariant = "accent"
	BadgeVariantInformative BadgeVariant = "informative"
	BadgeVariantNeutral     BadgeVariant = "neutral"
	BadgeVariantPositive    BadgeVariant = "positive"
	BadgeVariantNegative    BadgeVariant = "negative"
	BadgeVariantNotice      BadgeVariant = "notice"
	BadgeVariantSeafoam     BadgeVariant = "seafoam"
	BadgeVariantIndigo      BadgeVariant = "indigo"
	BadgeVariantPurple      BadgeVariant = "purple"
	BadgeVariantFuchsia     BadgeVariant = "fuchsia"
	BadgeVariantMagenta     BadgeVariant = "magenta"
	BadgeVariantYellow      BadgeVariant = "yellow"
	BadgeVariantGray        BadgeVariant = "gray"
	BadgeVariantRed         BadgeVariant = "red"
	BadgeVariantOrange      BadgeVariant = "orange"
	BadgeVariantChartreuse  BadgeVariant = "chartreuse"
	BadgeVariantCelery      BadgeVariant = "celery"
	BadgeVariantGreen       BadgeVariant = "green"
	BadgeVariantCyan        BadgeVariant = "cyan"
	BadgeVariantBlue        BadgeVariant = "blue"
)

// spectrumBadge represents an sp-badge component
type spectrumBadge struct {
	app.Compo
	*styler[*spectrumBadge]
	*classer[*spectrumBadge]
	*ider[*spectrumBadge]

	// Properties
	// Alters the border rounding to make the badge appear fixed to a specific edge
	PropFixed BadgeFixed
	// The size of the badge
	PropSize BadgeSize
	// The visual variant of the badge
	PropVariant BadgeVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropIconSlot app.UI
}

// IBadge is the interface for sp-badge component methods
type IBadge interface {
	app.UI
	Styler[IBadge]
	Classer[IBadge]
	Ider[IBadge]
	Fixed(BadgeFixed) IBadge
	FixedBlockStart() IBadge
	FixedInlineEnd() IBadge
	FixedBlockEnd() IBadge
	FixedInlineStart() IBadge
	Size(BadgeSize) IBadge
	SizeS() IBadge
	SizeM() IBadge
	SizeL() IBadge
	SizeXl() IBadge
	Variant(BadgeVariant) IBadge
	VariantAccent() IBadge
	VariantInformative() IBadge
	VariantNeutral() IBadge
	VariantPositive() IBadge
	VariantNegative() IBadge
	VariantNotice() IBadge
	VariantSeafoam() IBadge
	VariantIndigo() IBadge
	VariantPurple() IBadge
	VariantFuchsia() IBadge
	VariantMagenta() IBadge
	VariantYellow() IBadge
	VariantGray() IBadge
	VariantRed() IBadge
	VariantOrange() IBadge
	VariantChartreuse() IBadge
	VariantCelery() IBadge
	VariantGreen() IBadge
	VariantCyan() IBadge
	VariantBlue() IBadge

	Body(...app.UI) IBadge
	AddToBody(app.UI) IBadge
	Text(string) IBadge

	Icon(app.UI) IBadge
}

// Badge Badges display a small amount of color-categorized metadata. They're ideal for getting a user's attention.
func Badge() IBadge {
	element := &spectrumBadge{
		PropSize:    BadgeSizeM,
		PropVariant: BadgeVariantInformative,
		PropBody:    []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Fixed Alters the border rounding to make the badge appear fixed to a specific edge
func (c *spectrumBadge) Fixed(fixed BadgeFixed) IBadge {
	c.PropFixed = fixed
	return c
}

func (c *spectrumBadge) FixedBlockStart() IBadge {
	return c.Fixed(BadgeFixedBlockStart)
}
func (c *spectrumBadge) FixedInlineEnd() IBadge {
	return c.Fixed(BadgeFixedInlineEnd)
}
func (c *spectrumBadge) FixedBlockEnd() IBadge {
	return c.Fixed(BadgeFixedBlockEnd)
}
func (c *spectrumBadge) FixedInlineStart() IBadge {
	return c.Fixed(BadgeFixedInlineStart)
}

// Size The size of the badge
func (c *spectrumBadge) Size(size BadgeSize) IBadge {
	c.PropSize = size
	return c
}

func (c *spectrumBadge) SizeS() IBadge {
	return c.Size(BadgeSizeS)
}
func (c *spectrumBadge) SizeM() IBadge {
	return c.Size(BadgeSizeM)
}
func (c *spectrumBadge) SizeL() IBadge {
	return c.Size(BadgeSizeL)
}
func (c *spectrumBadge) SizeXl() IBadge {
	return c.Size(BadgeSizeXl)
}

// Variant The visual variant of the badge
func (c *spectrumBadge) Variant(variant BadgeVariant) IBadge {
	c.PropVariant = variant
	return c
}

func (c *spectrumBadge) VariantAccent() IBadge {
	return c.Variant(BadgeVariantAccent)
}
func (c *spectrumBadge) VariantInformative() IBadge {
	return c.Variant(BadgeVariantInformative)
}
func (c *spectrumBadge) VariantNeutral() IBadge {
	return c.Variant(BadgeVariantNeutral)
}
func (c *spectrumBadge) VariantPositive() IBadge {
	return c.Variant(BadgeVariantPositive)
}
func (c *spectrumBadge) VariantNegative() IBadge {
	return c.Variant(BadgeVariantNegative)
}
func (c *spectrumBadge) VariantNotice() IBadge {
	return c.Variant(BadgeVariantNotice)
}
func (c *spectrumBadge) VariantSeafoam() IBadge {
	return c.Variant(BadgeVariantSeafoam)
}
func (c *spectrumBadge) VariantIndigo() IBadge {
	return c.Variant(BadgeVariantIndigo)
}
func (c *spectrumBadge) VariantPurple() IBadge {
	return c.Variant(BadgeVariantPurple)
}
func (c *spectrumBadge) VariantFuchsia() IBadge {
	return c.Variant(BadgeVariantFuchsia)
}
func (c *spectrumBadge) VariantMagenta() IBadge {
	return c.Variant(BadgeVariantMagenta)
}
func (c *spectrumBadge) VariantYellow() IBadge {
	return c.Variant(BadgeVariantYellow)
}
func (c *spectrumBadge) VariantGray() IBadge {
	return c.Variant(BadgeVariantGray)
}
func (c *spectrumBadge) VariantRed() IBadge {
	return c.Variant(BadgeVariantRed)
}
func (c *spectrumBadge) VariantOrange() IBadge {
	return c.Variant(BadgeVariantOrange)
}
func (c *spectrumBadge) VariantChartreuse() IBadge {
	return c.Variant(BadgeVariantChartreuse)
}
func (c *spectrumBadge) VariantCelery() IBadge {
	return c.Variant(BadgeVariantCelery)
}
func (c *spectrumBadge) VariantGreen() IBadge {
	return c.Variant(BadgeVariantGreen)
}
func (c *spectrumBadge) VariantCyan() IBadge {
	return c.Variant(BadgeVariantCyan)
}
func (c *spectrumBadge) VariantBlue() IBadge {
	return c.Variant(BadgeVariantBlue)
}

// Body sets the content for the default slot
func (c *spectrumBadge) Body(elements ...app.UI) IBadge {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumBadge) AddToBody(element app.UI) IBadge {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumBadge) Text(text string) IBadge {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Optional icon that appears to the left of the label
func (c *spectrumBadge) Icon(content app.UI) IBadge {
	c.PropIconSlot = content

	return c
}

// Style sets a style property with a value
func (c *spectrumBadge) Style(key, format string, values ...any) IBadge {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumBadge) Styles(styles map[string]string) IBadge {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumBadge) Class(class string) IBadge {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumBadge) Classes(classes ...string) IBadge {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumBadge) Id(id string) IBadge {
	return c.ider.Id(id)
}

// Render renders the sp-badge component
func (c *spectrumBadge) Render() app.UI {
	element := app.Elem("sp-badge")

	// Set attributes
	if c.PropFixed != "" {
		element = element.Attr("fixed", string(c.PropFixed))
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add icon slot
	if c.PropIconSlot != nil {
		slotElem := c.PropIconSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("icon")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "icon").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
