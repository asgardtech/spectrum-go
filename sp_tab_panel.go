// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumTabPanel represents an sp-tab-panel component
type spectrumTabPanel struct {
	app.Compo
	*styler[*spectrumTabPanel]
	*classer[*spectrumTabPanel]
	*ider[*spectrumTabPanel]

	// Properties
	// Indicates whether this panel is currently selected and visible
	PropSelected bool
	// Value that associates this panel with its corresponding tab
	PropValue string

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// ITabPanel is the interface for sp-tab-panel component methods
type ITabPanel interface {
	app.UI
	Styler[ITabPanel]
	Classer[ITabPanel]
	Ider[ITabPanel]
	Selected(bool) ITabPanel
	SetSelected() ITabPanel
	Value(string) ITabPanel

	Body(...app.UI) ITabPanel
	AddToBody(app.UI) ITabPanel
	Text(string) ITabPanel
}

// TabPanel An sp-tab-panel contains the content that will be displayed when an associated sp-tab becomes selected. It can be associated with an sp-tab by sharing the same value attribute.
func TabPanel() ITabPanel {
	element := &spectrumTabPanel{
		PropSelected: false,
		PropValue:    "",
		PropBody:     []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Selected Indicates whether this panel is currently selected and visible
func (c *spectrumTabPanel) Selected(selected bool) ITabPanel {
	c.PropSelected = selected
	return c
}

func (c *spectrumTabPanel) SetSelected() ITabPanel {
	return c.Selected(true)
}

// Value Value that associates this panel with its corresponding tab
func (c *spectrumTabPanel) Value(value string) ITabPanel {
	c.PropValue = value
	return c
}

// Body sets the content for the default slot
func (c *spectrumTabPanel) Body(elements ...app.UI) ITabPanel {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTabPanel) AddToBody(element app.UI) ITabPanel {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTabPanel) Text(text string) ITabPanel {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumTabPanel) Style(key, format string, values ...any) ITabPanel {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTabPanel) Styles(styles map[string]string) ITabPanel {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTabPanel) Class(class string) ITabPanel {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTabPanel) Classes(classes ...string) ITabPanel {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTabPanel) Id(id string) ITabPanel {
	return c.ider.Id(id)
}

// Render renders the sp-tab-panel component
func (c *spectrumTabPanel) Render() app.UI {
	element := app.Elem("sp-tab-panel")

	// Set attributes
	if c.PropSelected {
		element = element.Attr("selected", true)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
