// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// InfieldButtonType represents the The default behavior of the button. Possible values are: 'button' (default), 'submit', and 'reset'.
type InfieldButtonType string

// InfieldButtonType values
const (
	InfieldButtonTypeButton InfieldButtonType = "button"
	InfieldButtonTypeSubmit InfieldButtonType = "submit"
	InfieldButtonTypeReset  InfieldButtonType = "reset"
)

// InfieldButtonSize represents the Size of the button: 's', 'm', 'l', 'xl'
type InfieldButtonSize string

// InfieldButtonSize values
const (
	InfieldButtonSizeS  InfieldButtonSize = "s"
	InfieldButtonSizeM  InfieldButtonSize = "m"
	InfieldButtonSizeL  InfieldButtonSize = "l"
	InfieldButtonSizeXl InfieldButtonSize = "xl"
)

// InfieldButtonInline represents the Position of the button relative to the field: 'start' or 'end'
type InfieldButtonInline string

// InfieldButtonInline values
const (
	InfieldButtonInlineStart InfieldButtonInline = "start"
	InfieldButtonInlineEnd   InfieldButtonInline = "end"
)

// InfieldButtonBlock represents the Position of the button in a vertical stack: 'start' or 'end'
type InfieldButtonBlock string

// InfieldButtonBlock values
const (
	InfieldButtonBlockStart InfieldButtonBlock = "start"
	InfieldButtonBlockEnd   InfieldButtonBlock = "end"
)

// spectrumInfieldButton represents an sp-infield-button component
type spectrumInfieldButton struct {
	app.Compo
	*styler[*spectrumInfieldButton]
	*classer[*spectrumInfieldButton]
	*ider[*spectrumInfieldButton]

	// Properties
	// Whether the button appears in an active state
	PropActive bool
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Causes the browser to treat the linked URL as a download.
	PropDownload string
	// The URL that the hyperlink points to.
	PropHref string
	// An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
	PropLabel string
	// How much of the referrer to send when following the link.
	PropReferrerpolicy string
	// The relationship of the linked URL as space-separated link types.
	PropRel string
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64
	// Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
	PropTarget string
	// The default behavior of the button. Possible values are: 'button' (default), 'submit', and 'reset'.
	PropType InfieldButtonType
	// Size of the button: 's', 'm', 'l', 'xl'
	PropSize InfieldButtonSize
	// Position of the button relative to the field: 'start' or 'end'
	PropInline InfieldButtonInline
	// Position of the button in a vertical stack: 'start' or 'end'
	PropBlock InfieldButtonBlock
	// Whether the button has a diminished visual presence
	PropQuiet bool

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropIconSlot app.UI

	// Event handlers
	PropOnClick app.EventHandler
}

// IInfieldButton is the interface for sp-infield-button component methods
type IInfieldButton interface {
	app.UI
	Styler[IInfieldButton]
	Classer[IInfieldButton]
	Ider[IInfieldButton]
	Active(bool) IInfieldButton
	SetActive() IInfieldButton
	Disabled(bool) IInfieldButton
	SetDisabled() IInfieldButton
	Download(string) IInfieldButton
	Href(string) IInfieldButton
	Label(string) IInfieldButton
	Referrerpolicy(string) IInfieldButton
	Rel(string) IInfieldButton
	Tabindex(float64) IInfieldButton
	Target(string) IInfieldButton
	Type(InfieldButtonType) IInfieldButton
	TypeButton() IInfieldButton
	TypeSubmit() IInfieldButton
	TypeReset() IInfieldButton
	Size(InfieldButtonSize) IInfieldButton
	SizeS() IInfieldButton
	SizeM() IInfieldButton
	SizeL() IInfieldButton
	SizeXl() IInfieldButton
	Inline(InfieldButtonInline) IInfieldButton
	InlineStart() IInfieldButton
	InlineEnd() IInfieldButton
	Block(InfieldButtonBlock) IInfieldButton
	BlockStart() IInfieldButton
	BlockEnd() IInfieldButton
	Quiet(bool) IInfieldButton
	SetQuiet() IInfieldButton

	Body(...app.UI) IInfieldButton
	AddToBody(app.UI) IInfieldButton
	Text(string) IInfieldButton

	Icon(app.UI) IInfieldButton

	OnClick(app.EventHandler) IInfieldButton
}

// InfieldButton When composing complex form fields, an infield-button can visually associate button functionality with other form fields to delivery enhanced capabilities to your visitors.
func InfieldButton() IInfieldButton {
	element := &spectrumInfieldButton{
		PropActive:         false,
		PropDisabled:       false,
		PropDownload:       "",
		PropHref:           "",
		PropLabel:          "",
		PropReferrerpolicy: "",
		PropRel:            "",
		PropTabindex:       0,
		PropTarget:         "",
		PropType:           InfieldButtonTypeButton,
		PropSize:           InfieldButtonSizeM,
		PropInline:         "",
		PropBlock:          "",
		PropQuiet:          false,
		PropBody:           []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Active Whether the button appears in an active state
func (c *spectrumInfieldButton) Active(active bool) IInfieldButton {
	c.PropActive = active
	return c
}

func (c *spectrumInfieldButton) SetActive() IInfieldButton {
	return c.Active(true)
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumInfieldButton) Disabled(disabled bool) IInfieldButton {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumInfieldButton) SetDisabled() IInfieldButton {
	return c.Disabled(true)
}

// Download Causes the browser to treat the linked URL as a download.
func (c *spectrumInfieldButton) Download(download string) IInfieldButton {
	c.PropDownload = download
	return c
}

// Href The URL that the hyperlink points to.
func (c *spectrumInfieldButton) Href(href string) IInfieldButton {
	c.PropHref = href
	return c
}

// Label An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
func (c *spectrumInfieldButton) Label(label string) IInfieldButton {
	c.PropLabel = label
	return c
}

// Referrerpolicy How much of the referrer to send when following the link.
func (c *spectrumInfieldButton) Referrerpolicy(referrerpolicy string) IInfieldButton {
	c.PropReferrerpolicy = referrerpolicy
	return c
}

// Rel The relationship of the linked URL as space-separated link types.
func (c *spectrumInfieldButton) Rel(rel string) IInfieldButton {
	c.PropRel = rel
	return c
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumInfieldButton) Tabindex(tabIndex float64) IInfieldButton {
	c.PropTabindex = tabIndex
	return c
}

// Target Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
func (c *spectrumInfieldButton) Target(target string) IInfieldButton {
	c.PropTarget = target
	return c
}

// Type The default behavior of the button. Possible values are: 'button' (default), 'submit', and 'reset'.
func (c *spectrumInfieldButton) Type(typeValue InfieldButtonType) IInfieldButton {
	c.PropType = typeValue
	return c
}

func (c *spectrumInfieldButton) TypeButton() IInfieldButton {
	return c.Type(InfieldButtonTypeButton)
}
func (c *spectrumInfieldButton) TypeSubmit() IInfieldButton {
	return c.Type(InfieldButtonTypeSubmit)
}
func (c *spectrumInfieldButton) TypeReset() IInfieldButton {
	return c.Type(InfieldButtonTypeReset)
}

// Size Size of the button: 's', 'm', 'l', 'xl'
func (c *spectrumInfieldButton) Size(size InfieldButtonSize) IInfieldButton {
	c.PropSize = size
	return c
}

func (c *spectrumInfieldButton) SizeS() IInfieldButton {
	return c.Size(InfieldButtonSizeS)
}
func (c *spectrumInfieldButton) SizeM() IInfieldButton {
	return c.Size(InfieldButtonSizeM)
}
func (c *spectrumInfieldButton) SizeL() IInfieldButton {
	return c.Size(InfieldButtonSizeL)
}
func (c *spectrumInfieldButton) SizeXl() IInfieldButton {
	return c.Size(InfieldButtonSizeXl)
}

// Inline Position of the button relative to the field: 'start' or 'end'
func (c *spectrumInfieldButton) Inline(inline InfieldButtonInline) IInfieldButton {
	c.PropInline = inline
	return c
}

func (c *spectrumInfieldButton) InlineStart() IInfieldButton {
	return c.Inline(InfieldButtonInlineStart)
}
func (c *spectrumInfieldButton) InlineEnd() IInfieldButton {
	return c.Inline(InfieldButtonInlineEnd)
}

// Block Position of the button in a vertical stack: 'start' or 'end'
func (c *spectrumInfieldButton) Block(block InfieldButtonBlock) IInfieldButton {
	c.PropBlock = block
	return c
}

func (c *spectrumInfieldButton) BlockStart() IInfieldButton {
	return c.Block(InfieldButtonBlockStart)
}
func (c *spectrumInfieldButton) BlockEnd() IInfieldButton {
	return c.Block(InfieldButtonBlockEnd)
}

// Quiet Whether the button has a diminished visual presence
func (c *spectrumInfieldButton) Quiet(quiet bool) IInfieldButton {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumInfieldButton) SetQuiet() IInfieldButton {
	return c.Quiet(true)
}

// Body sets the content for the default slot
func (c *spectrumInfieldButton) Body(elements ...app.UI) IInfieldButton {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumInfieldButton) AddToBody(element app.UI) IInfieldButton {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumInfieldButton) Text(text string) IInfieldButton {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// icon element(s) to display at the start of the button
func (c *spectrumInfieldButton) Icon(content app.UI) IInfieldButton {
	c.PropIconSlot = content

	return c
}

// Fired when the button is clicked
func (c *spectrumInfieldButton) OnClick(handler app.EventHandler) IInfieldButton {
	c.PropOnClick = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumInfieldButton) Style(key, format string, values ...any) IInfieldButton {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumInfieldButton) Styles(styles map[string]string) IInfieldButton {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumInfieldButton) Class(class string) IInfieldButton {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumInfieldButton) Classes(classes ...string) IInfieldButton {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumInfieldButton) Id(id string) IInfieldButton {
	return c.ider.Id(id)
}

// Render renders the sp-infield-button component
func (c *spectrumInfieldButton) Render() app.UI {
	element := app.Elem("sp-infield-button")

	// Set attributes
	if c.PropActive {
		element = element.Attr("active", true)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropDownload != "" {
		element = element.Attr("download", c.PropDownload)
	}
	if c.PropHref != "" {
		element = element.Attr("href", c.PropHref)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropReferrerpolicy != "" {
		element = element.Attr("referrerpolicy", c.PropReferrerpolicy)
	}
	if c.PropRel != "" {
		element = element.Attr("rel", c.PropRel)
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabIndex", c.PropTabindex)
	}
	if c.PropTarget != "" {
		element = element.Attr("target", c.PropTarget)
	}
	if c.PropType != "" {
		element = element.Attr("type", string(c.PropType))
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropInline != "" {
		element = element.Attr("inline", string(c.PropInline))
	}
	if c.PropBlock != "" {
		element = element.Attr("block", string(c.PropBlock))
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}

	// Add event handlers
	if c.PropOnClick != nil {
		element = element.On("click", c.PropOnClick)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add icon slot
	if c.PropIconSlot != nil {
		slotElem := c.PropIconSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("icon")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "icon").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
