// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ProgressCircleSize represents the The size of the progress circle
type ProgressCircleSize string

// ProgressCircleSize values
const (
	ProgressCircleSizeS ProgressCircleSize = "s"
	ProgressCircleSizeM ProgressCircleSize = "m"
	ProgressCircleSizeL ProgressCircleSize = "l"
)

// ProgressCircleStaticColor represents the A static color variant for when the progress circle is displayed over content
type ProgressCircleStaticColor string

// ProgressCircleStaticColor values
const (
	ProgressCircleStaticColorWhite ProgressCircleStaticColor = "white"
)

// spectrumProgressCircle represents an sp-progress-circle component
type spectrumProgressCircle struct {
	app.Compo
	*styler[*spectrumProgressCircle]
	*classer[*spectrumProgressCircle]
	*ider[*spectrumProgressCircle]

	// Properties
	// Whether progress is indeterminate (unknown duration)
	PropIndeterminate bool
	// Accessible label for the progress circle (not visually displayed)
	PropLabel string
	// The progress value from 0-100
	PropProgress float64
	// The size of the progress circle
	PropSize ProgressCircleSize
	// A static color variant for when the progress circle is displayed over content
	PropStaticColor ProgressCircleStaticColor
}

// IProgressCircle is the interface for sp-progress-circle component methods
type IProgressCircle interface {
	app.UI
	Styler[IProgressCircle]
	Classer[IProgressCircle]
	Ider[IProgressCircle]
	Indeterminate(bool) IProgressCircle
	SetIndeterminate() IProgressCircle
	Label(string) IProgressCircle
	Progress(float64) IProgressCircle
	Size(ProgressCircleSize) IProgressCircle
	SizeS() IProgressCircle
	SizeM() IProgressCircle
	SizeL() IProgressCircle
	StaticColor(ProgressCircleStaticColor) IProgressCircle
	StaticColorWhite() IProgressCircle
}

// ProgressCircle A progress circle shows the progression of a system operation such as downloading, uploading, processing, etc. in a visual way. It can represent determinate or indeterminate progress.
func ProgressCircle() IProgressCircle {
	element := &spectrumProgressCircle{
		PropIndeterminate: false,
		PropLabel:         "",
		PropProgress:      0,
		PropSize:          ProgressCircleSizeM,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Indeterminate Whether progress is indeterminate (unknown duration)
func (c *spectrumProgressCircle) Indeterminate(indeterminate bool) IProgressCircle {
	c.PropIndeterminate = indeterminate
	return c
}

func (c *spectrumProgressCircle) SetIndeterminate() IProgressCircle {
	return c.Indeterminate(true)
}

// Label Accessible label for the progress circle (not visually displayed)
func (c *spectrumProgressCircle) Label(label string) IProgressCircle {
	c.PropLabel = label
	return c
}

// Progress The progress value from 0-100
func (c *spectrumProgressCircle) Progress(progress float64) IProgressCircle {
	c.PropProgress = progress
	return c
}

// Size The size of the progress circle
func (c *spectrumProgressCircle) Size(size ProgressCircleSize) IProgressCircle {
	c.PropSize = size
	return c
}

func (c *spectrumProgressCircle) SizeS() IProgressCircle {
	return c.Size(ProgressCircleSizeS)
}
func (c *spectrumProgressCircle) SizeM() IProgressCircle {
	return c.Size(ProgressCircleSizeM)
}
func (c *spectrumProgressCircle) SizeL() IProgressCircle {
	return c.Size(ProgressCircleSizeL)
}

// StaticColor A static color variant for when the progress circle is displayed over content
func (c *spectrumProgressCircle) StaticColor(staticColor ProgressCircleStaticColor) IProgressCircle {
	c.PropStaticColor = staticColor
	return c
}

func (c *spectrumProgressCircle) StaticColorWhite() IProgressCircle {
	return c.StaticColor(ProgressCircleStaticColorWhite)
}

// Style sets a style property with a value
func (c *spectrumProgressCircle) Style(key, format string, values ...any) IProgressCircle {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumProgressCircle) Styles(styles map[string]string) IProgressCircle {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumProgressCircle) Class(class string) IProgressCircle {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumProgressCircle) Classes(classes ...string) IProgressCircle {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumProgressCircle) Id(id string) IProgressCircle {
	return c.ider.Id(id)
}

// Render renders the sp-progress-circle component
func (c *spectrumProgressCircle) Render() app.UI {
	element := app.Elem("sp-progress-circle")

	// Set attributes
	if c.PropIndeterminate {
		element = element.Attr("indeterminate", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropProgress != 0 {
		element = element.Attr("progress", c.PropProgress)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropStaticColor != "" {
		element = element.Attr("static-color", string(c.PropStaticColor))
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
