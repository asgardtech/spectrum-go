// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ButtonVariant represents the The visual variant to apply to this button.
type ButtonVariant string

// ButtonVariant values
const (
	ButtonVariantAccent    ButtonVariant = "accent"
	ButtonVariantPrimary   ButtonVariant = "primary"
	ButtonVariantSecondary ButtonVariant = "secondary"
	ButtonVariantNegative  ButtonVariant = "negative"
)

// ButtonTarget represents the Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
type ButtonTarget string

// ButtonTarget values
const (
	ButtonTarget_blank  ButtonTarget = "_blank"
	ButtonTarget_parent ButtonTarget = "_parent"
	ButtonTarget_self   ButtonTarget = "_self"
	ButtonTarget_top    ButtonTarget = "_top"
)

// ButtonReferrerpolicy represents the How much of the referrer to send when following the link.
type ButtonReferrerpolicy string

// ButtonReferrerpolicy values
const (
	ButtonReferrerpolicyNoReferrer                  ButtonReferrerpolicy = "no-referrer"
	ButtonReferrerpolicyNoReferrerWhenDowngrade     ButtonReferrerpolicy = "no-referrer-when-downgrade"
	ButtonReferrerpolicyOrigin                      ButtonReferrerpolicy = "origin"
	ButtonReferrerpolicyOriginWhenCrossOrigin       ButtonReferrerpolicy = "origin-when-cross-origin"
	ButtonReferrerpolicySameOrigin                  ButtonReferrerpolicy = "same-origin"
	ButtonReferrerpolicyStrictOrigin                ButtonReferrerpolicy = "strict-origin"
	ButtonReferrerpolicyStrictOriginWhenCrossOrigin ButtonReferrerpolicy = "strict-origin-when-cross-origin"
	ButtonReferrerpolicyUnsafeUrl                   ButtonReferrerpolicy = "unsafe-url"
)

// ButtonStaticColor represents the The static color variant to use for this button.
type ButtonStaticColor string

// ButtonStaticColor values
const (
	ButtonStaticColorBlack ButtonStaticColor = "black"
	ButtonStaticColorWhite ButtonStaticColor = "white"
)

// ButtonTreatment represents the The visual treatment to apply to this button.
type ButtonTreatment string

// ButtonTreatment values
const (
	ButtonTreatmentFill    ButtonTreatment = "fill"
	ButtonTreatmentOutline ButtonTreatment = "outline"
)

// ButtonType represents the The default behavior of the button.
type ButtonType string

// ButtonType values
const (
	ButtonTypeButton ButtonType = "button"
	ButtonTypeSubmit ButtonType = "submit"
	ButtonTypeReset  ButtonType = "reset"
)

// spectrumButton represents an sp-button component
type spectrumButton struct {
	app.Compo
	*styler[*spectrumButton]
	*classer[*spectrumButton]
	*ider[*spectrumButton]

	// Properties
	// The visual variant to apply to this button.
	PropVariant ButtonVariant
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Style this button to be less obvious
	PropQuiet bool
	// The URL that the hyperlink points to.
	PropHref string
	// Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
	PropTarget ButtonTarget
	// Whether the button appears in an active state
	PropActive bool
	// Causes the browser to treat the linked URL as a download.
	PropDownload string
	// An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
	PropLabel string
	// Disables text wrapping within the button component's label. Please note that this option is not a part of the design specification and should be used carefully, with consideration of this overflow behavior and the readability of the button's content.
	PropNoWrap bool
	// Whether the button is in a pending state, showing a progress indicator
	PropPending bool
	// Text shown while the button is in pending state
	PropPendingLabel string
	// How much of the referrer to send when following the link.
	PropReferrerpolicy ButtonReferrerpolicy
	// The relationship of the linked URL as space-separated link types.
	PropRel string
	// The static color variant to use for this button.
	PropStaticColor ButtonStaticColor
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64
	// The visual treatment to apply to this button.
	PropTreatment ButtonTreatment
	// The default behavior of the button.
	PropType ButtonType

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropIconSlot app.UI

	// Event handlers
	PropOnClick app.EventHandler
}

// IButton is the interface for sp-button component methods
type IButton interface {
	app.UI
	Styler[IButton]
	Classer[IButton]
	Ider[IButton]
	Variant(ButtonVariant) IButton
	VariantAccent() IButton
	VariantPrimary() IButton
	VariantSecondary() IButton
	VariantNegative() IButton
	Disabled(bool) IButton
	SetDisabled() IButton
	Quiet(bool) IButton
	SetQuiet() IButton
	Href(string) IButton
	Target(ButtonTarget) IButton
	Target_blank() IButton
	Target_parent() IButton
	Target_self() IButton
	Target_top() IButton
	Active(bool) IButton
	SetActive() IButton
	Download(string) IButton
	Label(string) IButton
	NoWrap(bool) IButton
	SetNoWrap() IButton
	Pending(bool) IButton
	SetPending() IButton
	PendingLabel(string) IButton
	Referrerpolicy(ButtonReferrerpolicy) IButton
	ReferrerpolicyNoReferrer() IButton
	ReferrerpolicyNoReferrerWhenDowngrade() IButton
	ReferrerpolicyOrigin() IButton
	ReferrerpolicyOriginWhenCrossOrigin() IButton
	ReferrerpolicySameOrigin() IButton
	ReferrerpolicyStrictOrigin() IButton
	ReferrerpolicyStrictOriginWhenCrossOrigin() IButton
	ReferrerpolicyUnsafeUrl() IButton
	Rel(string) IButton
	StaticColor(ButtonStaticColor) IButton
	StaticColorBlack() IButton
	StaticColorWhite() IButton
	Tabindex(float64) IButton
	Treatment(ButtonTreatment) IButton
	TreatmentFill() IButton
	TreatmentOutline() IButton
	Type(ButtonType) IButton
	TypeButton() IButton
	TypeSubmit() IButton
	TypeReset() IButton

	Body(...app.UI) IButton
	AddToBody(app.UI) IButton
	Text(string) IButton

	Icon(app.UI) IButton

	OnClick(app.EventHandler) IButton
}

// Button An sp-button represents an action a user can take. Buttons can be clicked or tapped to perform an action or to navigate to another page.
func Button() IButton {
	element := &spectrumButton{
		PropVariant:      ButtonVariantAccent,
		PropDisabled:     false,
		PropQuiet:        false,
		PropActive:       false,
		PropNoWrap:       false,
		PropPending:      false,
		PropPendingLabel: "Pending",
		PropTabindex:     0,
		PropTreatment:    ButtonTreatmentFill,
		PropType:         ButtonTypeButton,
		PropBody:         []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Variant The visual variant to apply to this button.
func (c *spectrumButton) Variant(variant ButtonVariant) IButton {
	c.PropVariant = variant
	return c
}

func (c *spectrumButton) VariantAccent() IButton {
	return c.Variant(ButtonVariantAccent)
}
func (c *spectrumButton) VariantPrimary() IButton {
	return c.Variant(ButtonVariantPrimary)
}
func (c *spectrumButton) VariantSecondary() IButton {
	return c.Variant(ButtonVariantSecondary)
}
func (c *spectrumButton) VariantNegative() IButton {
	return c.Variant(ButtonVariantNegative)
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumButton) Disabled(disabled bool) IButton {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumButton) SetDisabled() IButton {
	return c.Disabled(true)
}

// Quiet Style this button to be less obvious
func (c *spectrumButton) Quiet(quiet bool) IButton {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumButton) SetQuiet() IButton {
	return c.Quiet(true)
}

// Href The URL that the hyperlink points to.
func (c *spectrumButton) Href(href string) IButton {
	c.PropHref = href
	return c
}

// Target Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
func (c *spectrumButton) Target(target ButtonTarget) IButton {
	c.PropTarget = target
	return c
}

func (c *spectrumButton) Target_blank() IButton {
	return c.Target(ButtonTarget_blank)
}
func (c *spectrumButton) Target_parent() IButton {
	return c.Target(ButtonTarget_parent)
}
func (c *spectrumButton) Target_self() IButton {
	return c.Target(ButtonTarget_self)
}
func (c *spectrumButton) Target_top() IButton {
	return c.Target(ButtonTarget_top)
}

// Active Whether the button appears in an active state
func (c *spectrumButton) Active(active bool) IButton {
	c.PropActive = active
	return c
}

func (c *spectrumButton) SetActive() IButton {
	return c.Active(true)
}

// Download Causes the browser to treat the linked URL as a download.
func (c *spectrumButton) Download(download string) IButton {
	c.PropDownload = download
	return c
}

// Label An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
func (c *spectrumButton) Label(label string) IButton {
	c.PropLabel = label
	return c
}

// NoWrap Disables text wrapping within the button component's label. Please note that this option is not a part of the design specification and should be used carefully, with consideration of this overflow behavior and the readability of the button's content.
func (c *spectrumButton) NoWrap(noWrap bool) IButton {
	c.PropNoWrap = noWrap
	return c
}

func (c *spectrumButton) SetNoWrap() IButton {
	return c.NoWrap(true)
}

// Pending Whether the button is in a pending state, showing a progress indicator
func (c *spectrumButton) Pending(pending bool) IButton {
	c.PropPending = pending
	return c
}

func (c *spectrumButton) SetPending() IButton {
	return c.Pending(true)
}

// PendingLabel Text shown while the button is in pending state
func (c *spectrumButton) PendingLabel(pendingLabel string) IButton {
	c.PropPendingLabel = pendingLabel
	return c
}

// Referrerpolicy How much of the referrer to send when following the link.
func (c *spectrumButton) Referrerpolicy(referrerpolicy ButtonReferrerpolicy) IButton {
	c.PropReferrerpolicy = referrerpolicy
	return c
}

func (c *spectrumButton) ReferrerpolicyNoReferrer() IButton {
	return c.Referrerpolicy(ButtonReferrerpolicyNoReferrer)
}
func (c *spectrumButton) ReferrerpolicyNoReferrerWhenDowngrade() IButton {
	return c.Referrerpolicy(ButtonReferrerpolicyNoReferrerWhenDowngrade)
}
func (c *spectrumButton) ReferrerpolicyOrigin() IButton {
	return c.Referrerpolicy(ButtonReferrerpolicyOrigin)
}
func (c *spectrumButton) ReferrerpolicyOriginWhenCrossOrigin() IButton {
	return c.Referrerpolicy(ButtonReferrerpolicyOriginWhenCrossOrigin)
}
func (c *spectrumButton) ReferrerpolicySameOrigin() IButton {
	return c.Referrerpolicy(ButtonReferrerpolicySameOrigin)
}
func (c *spectrumButton) ReferrerpolicyStrictOrigin() IButton {
	return c.Referrerpolicy(ButtonReferrerpolicyStrictOrigin)
}
func (c *spectrumButton) ReferrerpolicyStrictOriginWhenCrossOrigin() IButton {
	return c.Referrerpolicy(ButtonReferrerpolicyStrictOriginWhenCrossOrigin)
}
func (c *spectrumButton) ReferrerpolicyUnsafeUrl() IButton {
	return c.Referrerpolicy(ButtonReferrerpolicyUnsafeUrl)
}

// Rel The relationship of the linked URL as space-separated link types.
func (c *spectrumButton) Rel(rel string) IButton {
	c.PropRel = rel
	return c
}

// StaticColor The static color variant to use for this button.
func (c *spectrumButton) StaticColor(staticColor ButtonStaticColor) IButton {
	c.PropStaticColor = staticColor
	return c
}

func (c *spectrumButton) StaticColorBlack() IButton {
	return c.StaticColor(ButtonStaticColorBlack)
}
func (c *spectrumButton) StaticColorWhite() IButton {
	return c.StaticColor(ButtonStaticColorWhite)
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumButton) Tabindex(tabindex float64) IButton {
	c.PropTabindex = tabindex
	return c
}

// Treatment The visual treatment to apply to this button.
func (c *spectrumButton) Treatment(treatment ButtonTreatment) IButton {
	c.PropTreatment = treatment
	return c
}

func (c *spectrumButton) TreatmentFill() IButton {
	return c.Treatment(ButtonTreatmentFill)
}
func (c *spectrumButton) TreatmentOutline() IButton {
	return c.Treatment(ButtonTreatmentOutline)
}

// Type The default behavior of the button.
func (c *spectrumButton) Type(typeValue ButtonType) IButton {
	c.PropType = typeValue
	return c
}

func (c *spectrumButton) TypeButton() IButton {
	return c.Type(ButtonTypeButton)
}
func (c *spectrumButton) TypeSubmit() IButton {
	return c.Type(ButtonTypeSubmit)
}
func (c *spectrumButton) TypeReset() IButton {
	return c.Type(ButtonTypeReset)
}

// Body sets the content for the default slot
func (c *spectrumButton) Body(elements ...app.UI) IButton {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumButton) AddToBody(element app.UI) IButton {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumButton) Text(text string) IButton {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// The icon to use for Button
func (c *spectrumButton) Icon(content app.UI) IButton {
	c.PropIconSlot = content

	return c
}

// Fired when the button is clicked
func (c *spectrumButton) OnClick(handler app.EventHandler) IButton {
	c.PropOnClick = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumButton) Style(key, format string, values ...any) IButton {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumButton) Styles(styles map[string]string) IButton {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumButton) Class(class string) IButton {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumButton) Classes(classes ...string) IButton {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumButton) Id(id string) IButton {
	return c.ider.Id(id)
}

// Render renders the sp-button component
func (c *spectrumButton) Render() app.UI {
	element := app.Elem("sp-button")

	// Set attributes
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropHref != "" {
		element = element.Attr("href", c.PropHref)
	}
	if c.PropTarget != "" {
		element = element.Attr("target", string(c.PropTarget))
	}
	if c.PropActive {
		element = element.Attr("active", true)
	}
	if c.PropDownload != "" {
		element = element.Attr("download", c.PropDownload)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropNoWrap {
		element = element.Attr("no-wrap", true)
	}
	if c.PropPending {
		element = element.Attr("pending", true)
	}
	if c.PropPendingLabel != "" {
		element = element.Attr("pending-label", c.PropPendingLabel)
	}
	if c.PropReferrerpolicy != "" {
		element = element.Attr("referrerpolicy", string(c.PropReferrerpolicy))
	}
	if c.PropRel != "" {
		element = element.Attr("rel", c.PropRel)
	}
	if c.PropStaticColor != "" {
		element = element.Attr("static-color", string(c.PropStaticColor))
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabindex", c.PropTabindex)
	}
	if c.PropTreatment != "" {
		element = element.Attr("treatment", string(c.PropTreatment))
	}
	if c.PropType != "" {
		element = element.Attr("type", string(c.PropType))
	}

	// Add event handlers
	if c.PropOnClick != nil {
		element = element.On("click", c.PropOnClick)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add icon slot
	if c.PropIconSlot != nil {
		slotElem := c.PropIconSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("icon")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "icon").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
