// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ThemeColor represents the The color theme to apply
type ThemeColor string

// ThemeColor values
const (
	ThemeColorLightest ThemeColor = "lightest"
	ThemeColorLight    ThemeColor = "light"
	ThemeColorDark     ThemeColor = "dark"
	ThemeColorDarkest  ThemeColor = "darkest"
)

// ThemeScale represents the The scale to apply (medium for desktop, large for mobile)
type ThemeScale string

// ThemeScale values
const (
	ThemeScaleMedium ThemeScale = "medium"
	ThemeScaleLarge  ThemeScale = "large"
)

// ThemeSystem represents the The design system variant to apply
type ThemeSystem string

// ThemeSystem values
const (
	ThemeSystemSpectrum    ThemeSystem = "spectrum"
	ThemeSystemExpress     ThemeSystem = "express"
	ThemeSystemSpectrumTwo ThemeSystem = "spectrum-two"
)

// ThemeDir represents the The text direction to apply
type ThemeDir string

// ThemeDir values
const (
	ThemeDirLtr ThemeDir = "ltr"
	ThemeDirRtl ThemeDir = "rtl"
)

// spectrumTheme represents an sp-theme component
type spectrumTheme struct {
	app.Compo
	*styler[*spectrumTheme]
	*classer[*spectrumTheme]
	*ider[*spectrumTheme]

	// Properties
	// The color theme to apply
	PropColor ThemeColor
	// The scale to apply (medium for desktop, large for mobile)
	PropScale ThemeScale
	// The design system variant to apply
	PropSystem ThemeSystem
	// The text direction to apply
	PropDir ThemeDir
	// The language code to apply for localization
	PropLang string

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// ITheme is the interface for sp-theme component methods
type ITheme interface {
	app.UI
	Styler[ITheme]
	Classer[ITheme]
	Ider[ITheme]
	Color(ThemeColor) ITheme
	ColorLightest() ITheme
	ColorLight() ITheme
	ColorDark() ITheme
	ColorDarkest() ITheme
	Scale(ThemeScale) ITheme
	ScaleMedium() ITheme
	ScaleLarge() ITheme
	System(ThemeSystem) ITheme
	SystemSpectrum() ITheme
	SystemExpress() ITheme
	SystemSpectrumTwo() ITheme
	Dir(ThemeDir) ITheme
	DirLtr() ITheme
	DirRtl() ITheme
	Lang(string) ITheme

	Body(...app.UI) ITheme
	AddToBody(app.UI) ITheme
	Text(string) ITheme
}

// Theme sp-theme applies a Spectrum theme by using CSS custom properties to set default sizes & colors for all of the components in its scope. The Spectrum design system provides four color themes (lightest, light, dark, and darkest) and two different scales (medium and large) to support desktop & mobile UI.
func Theme() ITheme {
	element := &spectrumTheme{
		PropColor:  ThemeColorLight,
		PropScale:  ThemeScaleLarge,
		PropSystem: ThemeSystemSpectrum,
		PropDir:    ThemeDirLtr,
		PropLang:   "",
		PropBody:   []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Color The color theme to apply
func (c *spectrumTheme) Color(color ThemeColor) ITheme {
	c.PropColor = color
	return c
}

func (c *spectrumTheme) ColorLightest() ITheme {
	return c.Color(ThemeColorLightest)
}
func (c *spectrumTheme) ColorLight() ITheme {
	return c.Color(ThemeColorLight)
}
func (c *spectrumTheme) ColorDark() ITheme {
	return c.Color(ThemeColorDark)
}
func (c *spectrumTheme) ColorDarkest() ITheme {
	return c.Color(ThemeColorDarkest)
}

// Scale The scale to apply (medium for desktop, large for mobile)
func (c *spectrumTheme) Scale(scale ThemeScale) ITheme {
	c.PropScale = scale
	return c
}

func (c *spectrumTheme) ScaleMedium() ITheme {
	return c.Scale(ThemeScaleMedium)
}
func (c *spectrumTheme) ScaleLarge() ITheme {
	return c.Scale(ThemeScaleLarge)
}

// System The design system variant to apply
func (c *spectrumTheme) System(system ThemeSystem) ITheme {
	c.PropSystem = system
	return c
}

func (c *spectrumTheme) SystemSpectrum() ITheme {
	return c.System(ThemeSystemSpectrum)
}
func (c *spectrumTheme) SystemExpress() ITheme {
	return c.System(ThemeSystemExpress)
}
func (c *spectrumTheme) SystemSpectrumTwo() ITheme {
	return c.System(ThemeSystemSpectrumTwo)
}

// Dir The text direction to apply
func (c *spectrumTheme) Dir(dir ThemeDir) ITheme {
	c.PropDir = dir
	return c
}

func (c *spectrumTheme) DirLtr() ITheme {
	return c.Dir(ThemeDirLtr)
}
func (c *spectrumTheme) DirRtl() ITheme {
	return c.Dir(ThemeDirRtl)
}

// Lang The language code to apply for localization
func (c *spectrumTheme) Lang(lang string) ITheme {
	c.PropLang = lang
	return c
}

// Body sets the content for the default slot
func (c *spectrumTheme) Body(elements ...app.UI) ITheme {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTheme) AddToBody(element app.UI) ITheme {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTheme) Text(text string) ITheme {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumTheme) Style(key, format string, values ...any) ITheme {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTheme) Styles(styles map[string]string) ITheme {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTheme) Class(class string) ITheme {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTheme) Classes(classes ...string) ITheme {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTheme) Id(id string) ITheme {
	return c.ider.Id(id)
}

// Render renders the sp-theme component
func (c *spectrumTheme) Render() app.UI {
	element := app.Elem("sp-theme")

	// Set attributes
	if c.PropColor != "" {
		element = element.Attr("color", string(c.PropColor))
	}
	if c.PropScale != "" {
		element = element.Attr("scale", string(c.PropScale))
	}
	if c.PropSystem != "" {
		element = element.Attr("system", string(c.PropSystem))
	}
	if c.PropDir != "" {
		element = element.Attr("dir", string(c.PropDir))
	}
	if c.PropLang != "" {
		element = element.Attr("lang", c.PropLang)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return app.Div().Body(
		System(),
		element,
	)
}
