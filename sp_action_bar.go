// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ActionBarVariant represents the The variant applies specific positioning: 'sticky' positions relative to scrolling content, 'fixed' positions relative to the page
type ActionBarVariant string

// ActionBarVariant values
const (
	ActionBarVariantFixed  ActionBarVariant = "fixed"
	ActionBarVariantSticky ActionBarVariant = "sticky"
)

// spectrumActionBar represents an sp-action-bar component
type spectrumActionBar struct {
	app.Compo
	*styler[*spectrumActionBar]
	*classer[*spectrumActionBar]
	*ider[*spectrumActionBar]

	// Properties
	// Deliver the Action Bar with additional visual emphasis
	PropEmphasized bool
	// When 'flexible' the action bar sizes itself to its content rather than a specific width
	PropFlexible bool
	// Whether the action bar is visible
	PropOpen bool
	// The variant applies specific positioning: 'sticky' positions relative to scrolling content, 'fixed' positions relative to the page
	PropVariant ActionBarVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropButtonsSlot app.UI

	// Event handlers
	PropOnClose app.EventHandler
}

// IActionBar is the interface for sp-action-bar component methods
type IActionBar interface {
	app.UI
	Styler[IActionBar]
	Classer[IActionBar]
	Ider[IActionBar]
	Emphasized(bool) IActionBar
	SetEmphasized() IActionBar
	Flexible(bool) IActionBar
	SetFlexible() IActionBar
	Open(bool) IActionBar
	SetOpen() IActionBar
	Variant(ActionBarVariant) IActionBar
	VariantFixed() IActionBar
	VariantSticky() IActionBar

	Body(...app.UI) IActionBar
	AddToBody(app.UI) IActionBar
	Text(string) IActionBar

	Buttons(app.UI) IActionBar

	OnClose(app.EventHandler) IActionBar
}

// ActionBar A floating action bar that is a convenient way to deliver stateful actions in cases like selection mode. It can be deployed with fixed or sticky variants.
func ActionBar() IActionBar {
	element := &spectrumActionBar{
		PropEmphasized: false,
		PropFlexible:   false,
		PropOpen:       false,
		PropVariant:    "",
		PropBody:       []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Emphasized Deliver the Action Bar with additional visual emphasis
func (c *spectrumActionBar) Emphasized(emphasized bool) IActionBar {
	c.PropEmphasized = emphasized
	return c
}

func (c *spectrumActionBar) SetEmphasized() IActionBar {
	return c.Emphasized(true)
}

// Flexible When 'flexible' the action bar sizes itself to its content rather than a specific width
func (c *spectrumActionBar) Flexible(flexible bool) IActionBar {
	c.PropFlexible = flexible
	return c
}

func (c *spectrumActionBar) SetFlexible() IActionBar {
	return c.Flexible(true)
}

// Open Whether the action bar is visible
func (c *spectrumActionBar) Open(open bool) IActionBar {
	c.PropOpen = open
	return c
}

func (c *spectrumActionBar) SetOpen() IActionBar {
	return c.Open(true)
}

// Variant The variant applies specific positioning: 'sticky' positions relative to scrolling content, 'fixed' positions relative to the page
func (c *spectrumActionBar) Variant(variant ActionBarVariant) IActionBar {
	c.PropVariant = variant
	return c
}

func (c *spectrumActionBar) VariantFixed() IActionBar {
	return c.Variant(ActionBarVariantFixed)
}
func (c *spectrumActionBar) VariantSticky() IActionBar {
	return c.Variant(ActionBarVariantSticky)
}

// Body sets the content for the default slot
func (c *spectrumActionBar) Body(elements ...app.UI) IActionBar {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumActionBar) AddToBody(element app.UI) IActionBar {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumActionBar) Text(text string) IActionBar {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Action buttons to display in the Action Bar
func (c *spectrumActionBar) Buttons(content app.UI) IActionBar {
	c.PropButtonsSlot = content

	return c
}

// Dispatched when the action bar is closed
func (c *spectrumActionBar) OnClose(handler app.EventHandler) IActionBar {
	c.PropOnClose = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumActionBar) Style(key, format string, values ...any) IActionBar {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumActionBar) Styles(styles map[string]string) IActionBar {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumActionBar) Class(class string) IActionBar {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumActionBar) Classes(classes ...string) IActionBar {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumActionBar) Id(id string) IActionBar {
	return c.ider.Id(id)
}

// Render renders the sp-action-bar component
func (c *spectrumActionBar) Render() app.UI {
	element := app.Elem("sp-action-bar")

	// Set attributes
	if c.PropEmphasized {
		element = element.Attr("emphasized", true)
	}
	if c.PropFlexible {
		element = element.Attr("flexible", true)
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add buttons slot
	if c.PropButtonsSlot != nil {
		slotElem := c.PropButtonsSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("buttons")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "buttons").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
