// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// SliderLabelVisibility represents the Controls which labels are visible: text (just the label text), value (just the value), or none (neither)
type SliderLabelVisibility string

// SliderLabelVisibility values
const (
	SliderLabelVisibilityText  SliderLabelVisibility = "text"
	SliderLabelVisibilityValue SliderLabelVisibility = "value"
	SliderLabelVisibilityNone  SliderLabelVisibility = "none"
)

// SliderSize represents the Size of the slider
type SliderSize string

// SliderSize values
const (
	SliderSizeS  SliderSize = "s"
	SliderSizeM  SliderSize = "m"
	SliderSizeL  SliderSize = "l"
	SliderSizeXl SliderSize = "xl"
)

// SliderVariant represents the The visual variant of the slider
type SliderVariant string

// SliderVariant values
const (
	SliderVariantFilled SliderVariant = "filled"
	SliderVariantTick   SliderVariant = "tick"
	SliderVariantRamp   SliderVariant = "ramp"
	SliderVariantRange  SliderVariant = "range"
)

// spectrumSlider represents an sp-slider component
type spectrumSlider struct {
	app.Compo
	*styler[*spectrumSlider]
	*classer[*spectrumSlider]
	*ider[*spectrumSlider]

	// Properties
	// Set the default value of the handle. Setting this property will cause the handle to reset to the default value on double click or pressing the escape key.
	PropDefaultValue float64
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Whether the slider is currently being dragged
	PropDragging bool
	// Whether to display a Number Field along side the slider UI
	PropEditable bool
	// The starting point for filled variant
	PropFillStart float64
	// Number formatting options as a JSON string
	PropFormatOptions string
	// Whether the stepper UI of the Number Field is hidden or not
	PropHideStepper bool
	// Whether the slider track should be highlighted
	PropHighlight bool
	// Applies indeterminate to the underlying sp-number-field when editable === true. Is removed on the next change event.
	PropIndeterminate bool
	// Accessible text label for the slider
	PropLabel string
	// Controls which labels are visible: text (just the label text), value (just the value), or none (neither)
	PropLabelVisibility SliderLabelVisibility
	// Maximum value of the slider
	PropMax float64
	// Minimum value of the slider
	PropMin float64
	// Name of the form control for form submission
	PropName string
	// Applies quiet to the underlying sp-number-field when editable === true.
	PropQuiet bool
	// Size of the slider
	PropSize SliderSize
	// Step value for increments/decrements
	PropStep float64
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64
	// Whether to display labels for tick marks
	PropTickLabels bool
	// Interval at which to display tick marks
	PropTickStep float64
	// The current value of the slider
	PropValue float64
	// The visual variant of the slider
	PropVariant SliderVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropHandleSlot app.UI

	// Event handlers
	PropOnChange              app.EventHandler
	PropOnInput               app.EventHandler
	PropOnSpSliderHandleReady app.EventHandler
}

// ISlider is the interface for sp-slider component methods
type ISlider interface {
	app.UI
	Styler[ISlider]
	Classer[ISlider]
	Ider[ISlider]
	DefaultValue(float64) ISlider
	Disabled(bool) ISlider
	SetDisabled() ISlider
	Dragging(bool) ISlider
	SetDragging() ISlider
	Editable(bool) ISlider
	SetEditable() ISlider
	FillStart(float64) ISlider
	FormatOptions(string) ISlider
	HideStepper(bool) ISlider
	SetHideStepper() ISlider
	Highlight(bool) ISlider
	SetHighlight() ISlider
	Indeterminate(bool) ISlider
	SetIndeterminate() ISlider
	Label(string) ISlider
	LabelVisibility(SliderLabelVisibility) ISlider
	LabelVisibilityText() ISlider
	LabelVisibilityValue() ISlider
	LabelVisibilityNone() ISlider
	Max(float64) ISlider
	Min(float64) ISlider
	Name(string) ISlider
	Quiet(bool) ISlider
	SetQuiet() ISlider
	Size(SliderSize) ISlider
	SizeS() ISlider
	SizeM() ISlider
	SizeL() ISlider
	SizeXl() ISlider
	Step(float64) ISlider
	Tabindex(float64) ISlider
	TickLabels(bool) ISlider
	SetTickLabels() ISlider
	TickStep(float64) ISlider
	Value(float64) ISlider
	Variant(SliderVariant) ISlider
	VariantFilled() ISlider
	VariantTick() ISlider
	VariantRamp() ISlider
	VariantRange() ISlider

	Body(...app.UI) ISlider
	AddToBody(app.UI) ISlider
	Text(string) ISlider

	Handle(app.UI) ISlider

	OnChange(app.EventHandler) ISlider
	OnInput(app.EventHandler) ISlider
	OnSpSliderHandleReady(app.EventHandler) ISlider
}

// Slider Sliders allow users to quickly select a value within a range. They should be used when the upper and lower bounds of the range are invariable.
func Slider() ISlider {
	element := &spectrumSlider{
		PropDefaultValue:  0,
		PropDisabled:      false,
		PropDragging:      false,
		PropFillStart:     0,
		PropHideStepper:   false,
		PropHighlight:     false,
		PropIndeterminate: false,
		PropLabel:         "",
		PropMax:           100,
		PropMin:           0,
		PropName:          "",
		PropQuiet:         false,
		PropSize:          SliderSizeM,
		PropStep:          1,
		PropTabindex:      0,
		PropTickLabels:    false,
		PropTickStep:      0,
		PropValue:         0,
		PropBody:          []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// DefaultValue Set the default value of the handle. Setting this property will cause the handle to reset to the default value on double click or pressing the escape key.
func (c *spectrumSlider) DefaultValue(defaultValue float64) ISlider {
	c.PropDefaultValue = defaultValue
	return c
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumSlider) Disabled(disabled bool) ISlider {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumSlider) SetDisabled() ISlider {
	return c.Disabled(true)
}

// Dragging Whether the slider is currently being dragged
func (c *spectrumSlider) Dragging(dragging bool) ISlider {
	c.PropDragging = dragging
	return c
}

func (c *spectrumSlider) SetDragging() ISlider {
	return c.Dragging(true)
}

// Editable Whether to display a Number Field along side the slider UI
func (c *spectrumSlider) Editable(editable bool) ISlider {
	c.PropEditable = editable
	return c
}

func (c *spectrumSlider) SetEditable() ISlider {
	return c.Editable(true)
}

// FillStart The starting point for filled variant
func (c *spectrumSlider) FillStart(fillStart float64) ISlider {
	c.PropFillStart = fillStart
	return c
}

// FormatOptions Number formatting options as a JSON string
func (c *spectrumSlider) FormatOptions(formatOptions string) ISlider {
	c.PropFormatOptions = formatOptions
	return c
}

// HideStepper Whether the stepper UI of the Number Field is hidden or not
func (c *spectrumSlider) HideStepper(hideStepper bool) ISlider {
	c.PropHideStepper = hideStepper
	return c
}

func (c *spectrumSlider) SetHideStepper() ISlider {
	return c.HideStepper(true)
}

// Highlight Whether the slider track should be highlighted
func (c *spectrumSlider) Highlight(highlight bool) ISlider {
	c.PropHighlight = highlight
	return c
}

func (c *spectrumSlider) SetHighlight() ISlider {
	return c.Highlight(true)
}

// Indeterminate Applies indeterminate to the underlying sp-number-field when editable === true. Is removed on the next change event.
func (c *spectrumSlider) Indeterminate(indeterminate bool) ISlider {
	c.PropIndeterminate = indeterminate
	return c
}

func (c *spectrumSlider) SetIndeterminate() ISlider {
	return c.Indeterminate(true)
}

// Label Accessible text label for the slider
func (c *spectrumSlider) Label(label string) ISlider {
	c.PropLabel = label
	return c
}

// LabelVisibility Controls which labels are visible: text (just the label text), value (just the value), or none (neither)
func (c *spectrumSlider) LabelVisibility(labelVisibility SliderLabelVisibility) ISlider {
	c.PropLabelVisibility = labelVisibility
	return c
}

func (c *spectrumSlider) LabelVisibilityText() ISlider {
	return c.LabelVisibility(SliderLabelVisibilityText)
}
func (c *spectrumSlider) LabelVisibilityValue() ISlider {
	return c.LabelVisibility(SliderLabelVisibilityValue)
}
func (c *spectrumSlider) LabelVisibilityNone() ISlider {
	return c.LabelVisibility(SliderLabelVisibilityNone)
}

// Max Maximum value of the slider
func (c *spectrumSlider) Max(max float64) ISlider {
	c.PropMax = max
	return c
}

// Min Minimum value of the slider
func (c *spectrumSlider) Min(min float64) ISlider {
	c.PropMin = min
	return c
}

// Name Name of the form control for form submission
func (c *spectrumSlider) Name(name string) ISlider {
	c.PropName = name
	return c
}

// Quiet Applies quiet to the underlying sp-number-field when editable === true.
func (c *spectrumSlider) Quiet(quiet bool) ISlider {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumSlider) SetQuiet() ISlider {
	return c.Quiet(true)
}

// Size Size of the slider
func (c *spectrumSlider) Size(size SliderSize) ISlider {
	c.PropSize = size
	return c
}

func (c *spectrumSlider) SizeS() ISlider {
	return c.Size(SliderSizeS)
}
func (c *spectrumSlider) SizeM() ISlider {
	return c.Size(SliderSizeM)
}
func (c *spectrumSlider) SizeL() ISlider {
	return c.Size(SliderSizeL)
}
func (c *spectrumSlider) SizeXl() ISlider {
	return c.Size(SliderSizeXl)
}

// Step Step value for increments/decrements
func (c *spectrumSlider) Step(step float64) ISlider {
	c.PropStep = step
	return c
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumSlider) Tabindex(tabindex float64) ISlider {
	c.PropTabindex = tabindex
	return c
}

// TickLabels Whether to display labels for tick marks
func (c *spectrumSlider) TickLabels(tickLabels bool) ISlider {
	c.PropTickLabels = tickLabels
	return c
}

func (c *spectrumSlider) SetTickLabels() ISlider {
	return c.TickLabels(true)
}

// TickStep Interval at which to display tick marks
func (c *spectrumSlider) TickStep(tickStep float64) ISlider {
	c.PropTickStep = tickStep
	return c
}

// Value The current value of the slider
func (c *spectrumSlider) Value(value float64) ISlider {
	c.PropValue = value
	return c
}

// Variant The visual variant of the slider
func (c *spectrumSlider) Variant(variant SliderVariant) ISlider {
	c.PropVariant = variant
	return c
}

func (c *spectrumSlider) VariantFilled() ISlider {
	return c.Variant(SliderVariantFilled)
}
func (c *spectrumSlider) VariantTick() ISlider {
	return c.Variant(SliderVariantTick)
}
func (c *spectrumSlider) VariantRamp() ISlider {
	return c.Variant(SliderVariantRamp)
}
func (c *spectrumSlider) VariantRange() ISlider {
	return c.Variant(SliderVariantRange)
}

// Body sets the content for the default slot
func (c *spectrumSlider) Body(elements ...app.UI) ISlider {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumSlider) AddToBody(element app.UI) ISlider {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumSlider) Text(text string) ISlider {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Optionally accepts two or more sp-slider-handle elements
func (c *spectrumSlider) Handle(content app.UI) ISlider {
	c.PropHandleSlot = content

	return c
}

// An alteration to the value of the element has been committed by the user.
func (c *spectrumSlider) OnChange(handler app.EventHandler) ISlider {
	c.PropOnChange = handler

	return c
}

// The value of the element has changed.
func (c *spectrumSlider) OnInput(handler app.EventHandler) ISlider {
	c.PropOnInput = handler

	return c
}

// Fired when a slider handle has been registered with the slider
func (c *spectrumSlider) OnSpSliderHandleReady(handler app.EventHandler) ISlider {
	c.PropOnSpSliderHandleReady = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumSlider) Style(key, format string, values ...any) ISlider {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumSlider) Styles(styles map[string]string) ISlider {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumSlider) Class(class string) ISlider {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumSlider) Classes(classes ...string) ISlider {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumSlider) Id(id string) ISlider {
	return c.ider.Id(id)
}

// Render renders the sp-slider component
func (c *spectrumSlider) Render() app.UI {
	element := app.Elem("sp-slider")

	// Set attributes
	if c.PropDefaultValue != 0 {
		element = element.Attr("default-value", c.PropDefaultValue)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropDragging {
		element = element.Attr("dragging", true)
	}
	if c.PropEditable {
		element = element.Attr("editable", true)
	}
	if c.PropFillStart != 0 {
		element = element.Attr("fill-start", c.PropFillStart)
	}
	if c.PropFormatOptions != "" {
		element = element.Attr("format-options", c.PropFormatOptions)
	}
	if c.PropHideStepper {
		element = element.Attr("hide-stepper", true)
	}
	if c.PropHighlight {
		element = element.Attr("highlight", true)
	}
	if c.PropIndeterminate {
		element = element.Attr("indeterminate", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropLabelVisibility != "" {
		element = element.Attr("label-visibility", string(c.PropLabelVisibility))
	}
	if c.PropMax != 0 {
		element = element.Attr("max", c.PropMax)
	}
	if c.PropMin != 0 {
		element = element.Attr("min", c.PropMin)
	}
	if c.PropName != "" {
		element = element.Attr("name", c.PropName)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropStep != 0 {
		element = element.Attr("step", c.PropStep)
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabindex", c.PropTabindex)
	}
	if c.PropTickLabels {
		element = element.Attr("tick-labels", true)
	}
	if c.PropTickStep != 0 {
		element = element.Attr("tick-step", c.PropTickStep)
	}
	if c.PropValue != 0 {
		element = element.Attr("value", c.PropValue)
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnInput != nil {
		element = element.On("input", c.PropOnInput)
	}
	if c.PropOnSpSliderHandleReady != nil {
		element = element.On("sp-slider-handle-ready", c.PropOnSpSliderHandleReady)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add handle slot
	if c.PropHandleSlot != nil {
		slotElem := c.PropHandleSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("handle")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "handle").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
