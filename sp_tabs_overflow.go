// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumTabsOverflow represents an sp-tabs-overflow component
type spectrumTabsOverflow struct {
	app.Compo
	*styler[*spectrumTabsOverflow]
	*classer[*spectrumTabsOverflow]
	*ider[*spectrumTabsOverflow]

	// Properties
	// Whether the tabs overflow should use a compact style
	PropCompact bool
	// Accessible label for the next button
	PropLabelnext string
	// Accessible label for the previous button
	PropLabelprevious string

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// ITabsOverflow is the interface for sp-tabs-overflow component methods
type ITabsOverflow interface {
	app.UI
	Styler[ITabsOverflow]
	Classer[ITabsOverflow]
	Ider[ITabsOverflow]
	Compact(bool) ITabsOverflow
	SetCompact() ITabsOverflow
	Labelnext(string) ITabsOverflow
	Labelprevious(string) ITabsOverflow

	Body(...app.UI) ITabsOverflow
	AddToBody(app.UI) ITabsOverflow
	Text(string) ITabsOverflow
}

// TabsOverflow The sp-tabs-overflow is a decorative component that works in conjunction with the sp-tabs component. It enables horizontal tab scrolling in cases where the available width is insufficient to display all tabs.
func TabsOverflow() ITabsOverflow {
	element := &spectrumTabsOverflow{
		PropCompact:       false,
		PropLabelnext:     "Scroll to next tabs",
		PropLabelprevious: "Scroll to previous tabs",
		PropBody:          []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Compact Whether the tabs overflow should use a compact style
func (c *spectrumTabsOverflow) Compact(compact bool) ITabsOverflow {
	c.PropCompact = compact
	return c
}

func (c *spectrumTabsOverflow) SetCompact() ITabsOverflow {
	return c.Compact(true)
}

// Labelnext Accessible label for the next button
func (c *spectrumTabsOverflow) Labelnext(labelNext string) ITabsOverflow {
	c.PropLabelnext = labelNext
	return c
}

// Labelprevious Accessible label for the previous button
func (c *spectrumTabsOverflow) Labelprevious(labelPrevious string) ITabsOverflow {
	c.PropLabelprevious = labelPrevious
	return c
}

// Body sets the content for the default slot
func (c *spectrumTabsOverflow) Body(elements ...app.UI) ITabsOverflow {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTabsOverflow) AddToBody(element app.UI) ITabsOverflow {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTabsOverflow) Text(text string) ITabsOverflow {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumTabsOverflow) Style(key, format string, values ...any) ITabsOverflow {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTabsOverflow) Styles(styles map[string]string) ITabsOverflow {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTabsOverflow) Class(class string) ITabsOverflow {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTabsOverflow) Classes(classes ...string) ITabsOverflow {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTabsOverflow) Id(id string) ITabsOverflow {
	return c.ider.Id(id)
}

// Render renders the sp-tabs-overflow component
func (c *spectrumTabsOverflow) Render() app.UI {
	element := app.Elem("sp-tabs-overflow")

	// Set attributes
	if c.PropCompact {
		element = element.Attr("compact", true)
	}
	if c.PropLabelnext != "" {
		element = element.Attr("labelNext", c.PropLabelnext)
	}
	if c.PropLabelprevious != "" {
		element = element.Attr("labelPrevious", c.PropLabelprevious)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
