// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumTab represents an sp-tab component
type spectrumTab struct {
	app.Compo
	*styler[*spectrumTab]
	*classer[*spectrumTab]
	*ider[*spectrumTab]

	// Properties
	// Prevents visitors from selecting this tab and its contents
	PropDisabled bool
	// Text label for the tab, used when no content is provided in the default slot
	PropLabel string
	// Indicates whether this tab is currently selected
	PropSelected bool
	// Value that associates this tab with its corresponding tab panel
	PropValue string
	// Displays the tab's icon and label in a vertical alignment
	PropVertical bool

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropIconSlot app.UI
}

// ITab is the interface for sp-tab component methods
type ITab interface {
	app.UI
	Styler[ITab]
	Classer[ITab]
	Ider[ITab]
	Disabled(bool) ITab
	SetDisabled() ITab
	Label(string) ITab
	Selected(bool) ITab
	SetSelected() ITab
	Value(string) ITab
	Vertical(bool) ITab
	SetVertical() ITab

	Body(...app.UI) ITab
	AddToBody(app.UI) ITab
	Text(string) ITab

	Icon(app.UI) ITab
}

// Tab An sp-tab element represents a tab in a tabbed interface. It can be associated with an sp-tab-panel that represents its content with the value attribute.
func Tab() ITab {
	element := &spectrumTab{
		PropDisabled: false,
		PropLabel:    "",
		PropSelected: false,
		PropValue:    "",
		PropVertical: false,
		PropBody:     []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled Prevents visitors from selecting this tab and its contents
func (c *spectrumTab) Disabled(disabled bool) ITab {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumTab) SetDisabled() ITab {
	return c.Disabled(true)
}

// Label Text label for the tab, used when no content is provided in the default slot
func (c *spectrumTab) Label(label string) ITab {
	c.PropLabel = label
	return c
}

// Selected Indicates whether this tab is currently selected
func (c *spectrumTab) Selected(selected bool) ITab {
	c.PropSelected = selected
	return c
}

func (c *spectrumTab) SetSelected() ITab {
	return c.Selected(true)
}

// Value Value that associates this tab with its corresponding tab panel
func (c *spectrumTab) Value(value string) ITab {
	c.PropValue = value
	return c
}

// Vertical Displays the tab's icon and label in a vertical alignment
func (c *spectrumTab) Vertical(vertical bool) ITab {
	c.PropVertical = vertical
	return c
}

func (c *spectrumTab) SetVertical() ITab {
	return c.Vertical(true)
}

// Body sets the content for the default slot
func (c *spectrumTab) Body(elements ...app.UI) ITab {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTab) AddToBody(element app.UI) ITab {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTab) Text(text string) ITab {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// The icon that appears on the left of the label
func (c *spectrumTab) Icon(content app.UI) ITab {
	c.PropIconSlot = content

	return c
}

// Style sets a style property with a value
func (c *spectrumTab) Style(key, format string, values ...any) ITab {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTab) Styles(styles map[string]string) ITab {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTab) Class(class string) ITab {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTab) Classes(classes ...string) ITab {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTab) Id(id string) ITab {
	return c.ider.Id(id)
}

// Render renders the sp-tab component
func (c *spectrumTab) Render() app.UI {
	element := app.Elem("sp-tab")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropSelected {
		element = element.Attr("selected", true)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}
	if c.PropVertical {
		element = element.Attr("vertical", true)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add icon slot
	if c.PropIconSlot != nil {
		slotElem := c.PropIconSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("icon")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "icon").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
