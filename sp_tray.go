// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumTray represents an sp-tray component
type spectrumTray struct {
	app.Compo
	*styler[*spectrumTray]
	*classer[*spectrumTray]
	*ider[*spectrumTray]

	// Properties
	// Whether the tray is currently open and visible
	PropOpen bool

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnClose app.EventHandler
}

// ITray is the interface for sp-tray component methods
type ITray interface {
	app.UI
	Styler[ITray]
	Classer[ITray]
	Ider[ITray]
	Open(bool) ITray
	SetOpen() ITray

	Body(...app.UI) ITray
	AddToBody(app.UI) ITray
	Text(string) ITray

	OnClose(app.EventHandler) ITray
}

// Tray An sp-tray element is typically used to portray information on mobile devices or smaller screens. It slides in from the bottom of the viewport.
func Tray() ITray {
	element := &spectrumTray{
		PropOpen: false,
		PropBody: []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Open Whether the tray is currently open and visible
func (c *spectrumTray) Open(open bool) ITray {
	c.PropOpen = open
	return c
}

func (c *spectrumTray) SetOpen() ITray {
	return c.Open(true)
}

// Body sets the content for the default slot
func (c *spectrumTray) Body(elements ...app.UI) ITray {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTray) AddToBody(element app.UI) ITray {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTray) Text(text string) ITray {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Announces that the tray has been closed
func (c *spectrumTray) OnClose(handler app.EventHandler) ITray {
	c.PropOnClose = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumTray) Style(key, format string, values ...any) ITray {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTray) Styles(styles map[string]string) ITray {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTray) Class(class string) ITray {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTray) Classes(classes ...string) ITray {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTray) Id(id string) ITray {
	return c.ider.Id(id)
}

// Render renders the sp-tray component
func (c *spectrumTray) Render() app.UI {
	element := app.Elem("sp-tray")

	// Set attributes
	if c.PropOpen {
		element = element.Attr("open", true)
	}

	// Add event handlers
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
