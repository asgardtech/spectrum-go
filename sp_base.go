// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// BaseDir represents the Sets the text direction. When not specified, inherits from document or containing sp-theme
type BaseDir string

// BaseDir values
const (
	BaseDirLtr BaseDir = "ltr"
	BaseDirRtl BaseDir = "rtl"
)

// spectrumBase represents an  component
type spectrumBase struct {
	app.Compo
	*styler[*spectrumBase]
	*classer[*spectrumBase]
	*ider[*spectrumBase]

	// Properties
	// Sets the text direction. When not specified, inherits from document or containing sp-theme
	PropDir BaseDir
}

// IBase is the interface for  component methods
type IBase interface {
	app.UI
	Styler[IBase]
	Classer[IBase]
	Ider[IBase]
	Dir(BaseDir) IBase
	DirLtr() IBase
	DirRtl() IBase
}

// Base The SpectrumElement base class is created by mixing SpectrumMixin onto LitElement. It provides foundational functionality for all Spectrum Web Components, including direction management and shadowRoot typing.
func Base() IBase {
	element := &spectrumBase{
		PropDir: BaseDirLtr,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Dir Sets the text direction. When not specified, inherits from document or containing sp-theme
func (c *spectrumBase) Dir(dir BaseDir) IBase {
	c.PropDir = dir
	return c
}

func (c *spectrumBase) DirLtr() IBase {
	return c.Dir(BaseDirLtr)
}
func (c *spectrumBase) DirRtl() IBase {
	return c.Dir(BaseDirRtl)
}

// Style sets a style property with a value
func (c *spectrumBase) Style(key, format string, values ...any) IBase {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumBase) Styles(styles map[string]string) IBase {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumBase) Class(class string) IBase {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumBase) Classes(classes ...string) IBase {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumBase) Id(id string) IBase {
	return c.ider.Id(id)
}

// Render renders the  component
func (c *spectrumBase) Render() app.UI {
	element := app.Elem("")

	// Set attributes
	if c.PropDir != "" {
		element = element.Attr("dir", string(c.PropDir))
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
