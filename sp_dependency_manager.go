// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumDependencyManager represents an  component
type spectrumDependencyManager struct {
	app.Compo
	*styler[*spectrumDependencyManager]
	*classer[*spectrumDependencyManager]
	*ider[*spectrumDependencyManager]

	// Properties
	// Indicates whether all managed dependencies have been loaded
	PropLoaded bool
}

// IDependencyManager is the interface for  component methods
type IDependencyManager interface {
	app.UI
	Styler[IDependencyManager]
	Classer[IDependencyManager]
	Ider[IDependencyManager]
	Loaded(bool) IDependencyManager
	SetLoaded() IDependencyManager
}

// DependencyManager A utility for managing custom element dependencies, allowing functionality to be delayed until required custom element definitions are registered.
func DependencyManager() IDependencyManager {
	element := &spectrumDependencyManager{
		PropLoaded: false,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Loaded Indicates whether all managed dependencies have been loaded
func (c *spectrumDependencyManager) Loaded(loaded bool) IDependencyManager {
	c.PropLoaded = loaded
	return c
}

func (c *spectrumDependencyManager) SetLoaded() IDependencyManager {
	return c.Loaded(true)
}

// Style sets a style property with a value
func (c *spectrumDependencyManager) Style(key, format string, values ...any) IDependencyManager {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumDependencyManager) Styles(styles map[string]string) IDependencyManager {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumDependencyManager) Class(class string) IDependencyManager {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumDependencyManager) Classes(classes ...string) IDependencyManager {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumDependencyManager) Id(id string) IDependencyManager {
	return c.ider.Id(id)
}

// Render renders the  component
func (c *spectrumDependencyManager) Render() app.UI {
	element := app.Elem("")

	// Set attributes
	if c.PropLoaded {
		element = element.Attr("loaded", true)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
