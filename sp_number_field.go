// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumNumberField represents an sp-number-field component
type spectrumNumberField struct {
	app.Compo
	*styler[*spectrumNumberField]
	*classer[*spectrumNumberField]
	*ider[*spectrumNumberField]

	// Properties
	// Form of assistance provided when supplying a value
	PropAutocomplete string
	// Disable this control
	PropDisabled bool
	// Intl.NumberFormatOptions object for value formatting
	PropFormatoptions any
	// Whether the stepper UI is hidden
	PropHidestepper bool
	// Whether the value is invalid
	PropInvalid bool
	// Accessible label when visible label not provided
	PropLabel string
	// Maximum allowed value
	PropMax float64
	// Minimum allowed value
	PropMin float64
	// Text shown when no value is set
	PropPlaceholder string
	// Display without visible background
	PropQuiet bool
	// Whether user can interact with the value
	PropReadonly bool
	// Whether field is required
	PropRequired bool
	// Increment/decrement step value
	PropStep float64
	// Multiplier for step when using shift key
	PropStepmodifier float64
	// The value held by the control
	PropValue string

	// Content slots
	PropHelpTextSlot         app.UI
	PropNegativeHelpTextSlot app.UI

	// Event handlers
	PropOnChange app.EventHandler
	PropOnInput  app.EventHandler
}

// INumberField is the interface for sp-number-field component methods
type INumberField interface {
	app.UI
	Styler[INumberField]
	Classer[INumberField]
	Ider[INumberField]
	Autocomplete(string) INumberField
	Disabled(bool) INumberField
	SetDisabled() INumberField
	Formatoptions(any) INumberField
	Hidestepper(bool) INumberField
	SetHidestepper() INumberField
	Invalid(bool) INumberField
	SetInvalid() INumberField
	Label(string) INumberField
	Max(float64) INumberField
	Min(float64) INumberField
	Placeholder(string) INumberField
	Quiet(bool) INumberField
	SetQuiet() INumberField
	Readonly(bool) INumberField
	SetReadonly() INumberField
	Required(bool) INumberField
	SetRequired() INumberField
	Step(float64) INumberField
	Stepmodifier(float64) INumberField
	Value(string) INumberField

	HelpText(app.UI) INumberField
	NegativeHelpText(app.UI) INumberField

	OnChange(app.EventHandler) INumberField
	OnInput(app.EventHandler) INumberField
}

// NumberField Elements used for numeric inputs with increment/decrement capabilities.
func NumberField() INumberField {
	element := &spectrumNumberField{
		PropAutocomplete:  "",
		PropDisabled:      false,
		PropFormatoptions: map[string]interface{}{},
		PropHidestepper:   false,
		PropInvalid:       false,
		PropLabel:         "",
		PropMax:           0,
		PropMin:           0,
		PropPlaceholder:   "",
		PropQuiet:         false,
		PropReadonly:      false,
		PropRequired:      false,
		PropStep:          1,
		PropStepmodifier:  10,
		PropValue:         "",
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Autocomplete Form of assistance provided when supplying a value
func (c *spectrumNumberField) Autocomplete(autocomplete string) INumberField {
	c.PropAutocomplete = autocomplete
	return c
}

// Disabled Disable this control
func (c *spectrumNumberField) Disabled(disabled bool) INumberField {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumNumberField) SetDisabled() INumberField {
	return c.Disabled(true)
}

// Formatoptions Intl.NumberFormatOptions object for value formatting
func (c *spectrumNumberField) Formatoptions(formatOptions any) INumberField {
	c.PropFormatoptions = formatOptions
	return c
}

// Hidestepper Whether the stepper UI is hidden
func (c *spectrumNumberField) Hidestepper(hideStepper bool) INumberField {
	c.PropHidestepper = hideStepper
	return c
}

func (c *spectrumNumberField) SetHidestepper() INumberField {
	return c.Hidestepper(true)
}

// Invalid Whether the value is invalid
func (c *spectrumNumberField) Invalid(invalid bool) INumberField {
	c.PropInvalid = invalid
	return c
}

func (c *spectrumNumberField) SetInvalid() INumberField {
	return c.Invalid(true)
}

// Label Accessible label when visible label not provided
func (c *spectrumNumberField) Label(label string) INumberField {
	c.PropLabel = label
	return c
}

// Max Maximum allowed value
func (c *spectrumNumberField) Max(max float64) INumberField {
	c.PropMax = max
	return c
}

// Min Minimum allowed value
func (c *spectrumNumberField) Min(min float64) INumberField {
	c.PropMin = min
	return c
}

// Placeholder Text shown when no value is set
func (c *spectrumNumberField) Placeholder(placeholder string) INumberField {
	c.PropPlaceholder = placeholder
	return c
}

// Quiet Display without visible background
func (c *spectrumNumberField) Quiet(quiet bool) INumberField {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumNumberField) SetQuiet() INumberField {
	return c.Quiet(true)
}

// Readonly Whether user can interact with the value
func (c *spectrumNumberField) Readonly(readonly bool) INumberField {
	c.PropReadonly = readonly
	return c
}

func (c *spectrumNumberField) SetReadonly() INumberField {
	return c.Readonly(true)
}

// Required Whether field is required
func (c *spectrumNumberField) Required(required bool) INumberField {
	c.PropRequired = required
	return c
}

func (c *spectrumNumberField) SetRequired() INumberField {
	return c.Required(true)
}

// Step Increment/decrement step value
func (c *spectrumNumberField) Step(step float64) INumberField {
	c.PropStep = step
	return c
}

// Stepmodifier Multiplier for step when using shift key
func (c *spectrumNumberField) Stepmodifier(stepModifier float64) INumberField {
	c.PropStepmodifier = stepModifier
	return c
}

// Value The value held by the control
func (c *spectrumNumberField) Value(value string) INumberField {
	c.PropValue = value
	return c
}

// Default or non-negative help text
func (c *spectrumNumberField) HelpText(content app.UI) INumberField {
	c.PropHelpTextSlot = content

	return c
}

// Negative help text shown when invalid
func (c *spectrumNumberField) NegativeHelpText(content app.UI) INumberField {
	c.PropNegativeHelpTextSlot = content

	return c
}

// Value has been committed by the user
func (c *spectrumNumberField) OnChange(handler app.EventHandler) INumberField {
	c.PropOnChange = handler

	return c
}

// Value of the element has changed
func (c *spectrumNumberField) OnInput(handler app.EventHandler) INumberField {
	c.PropOnInput = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumNumberField) Style(key, format string, values ...any) INumberField {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumNumberField) Styles(styles map[string]string) INumberField {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumNumberField) Class(class string) INumberField {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumNumberField) Classes(classes ...string) INumberField {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumNumberField) Id(id string) INumberField {
	return c.ider.Id(id)
}

// Render renders the sp-number-field component
func (c *spectrumNumberField) Render() app.UI {
	element := app.Elem("sp-number-field")

	// Set attributes
	if c.PropAutocomplete != "" {
		element = element.Attr("autocomplete", c.PropAutocomplete)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropFormatoptions != nil {
		element = element.Attr("formatOptions", c.PropFormatoptions)
	}
	if c.PropHidestepper {
		element = element.Attr("hideStepper", true)
	}
	if c.PropInvalid {
		element = element.Attr("invalid", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropMax != 0 {
		element = element.Attr("max", c.PropMax)
	}
	if c.PropMin != 0 {
		element = element.Attr("min", c.PropMin)
	}
	if c.PropPlaceholder != "" {
		element = element.Attr("placeholder", c.PropPlaceholder)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropReadonly {
		element = element.Attr("readonly", true)
	}
	if c.PropRequired {
		element = element.Attr("required", true)
	}
	if c.PropStep != 0 {
		element = element.Attr("step", c.PropStep)
	}
	if c.PropStepmodifier != 0 {
		element = element.Attr("stepModifier", c.PropStepmodifier)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnInput != nil {
		element = element.On("input", c.PropOnInput)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add help-text slot
	if c.PropHelpTextSlot != nil {
		slotElem := c.PropHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add negative-help-text slot
	if c.PropNegativeHelpTextSlot != nil {
		slotElem := c.PropNegativeHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("negative-help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "negative-help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
