// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ActionGroupSelects represents the Determines selection behavior: 'single' for radio-button behavior, 'multiple' for checkbox behavior
type ActionGroupSelects string

// ActionGroupSelects values
const (
	ActionGroupSelectsSingle   ActionGroupSelects = "single"
	ActionGroupSelectsMultiple ActionGroupSelects = "multiple"
)

// ActionGroupSize represents the Size of the action buttons in the group
type ActionGroupSize string

// ActionGroupSize values
const (
	ActionGroupSizeXs ActionGroupSize = "xs"
	ActionGroupSizeS  ActionGroupSize = "s"
	ActionGroupSizeM  ActionGroupSize = "m"
	ActionGroupSizeL  ActionGroupSize = "l"
	ActionGroupSizeXl ActionGroupSize = "xl"
)

// ActionGroupStaticcolor represents the Applies a specific color treatment to the buttons
type ActionGroupStaticcolor string

// ActionGroupStaticcolor values
const (
	ActionGroupStaticcolorWhite ActionGroupStaticcolor = "white"
	ActionGroupStaticcolorBlack ActionGroupStaticcolor = "black"
)

// spectrumActionGroup represents an sp-action-group component
type spectrumActionGroup struct {
	app.Compo
	*styler[*spectrumActionGroup]
	*classer[*spectrumActionGroup]
	*ider[*spectrumActionGroup]

	// Properties
	// Visually joins buttons together to clarify their relationship
	PropCompact bool
	// Applies visual emphasis to the buttons in the group
	PropEmphasized bool
	// Fills available horizontal space and evenly distributes that space across child buttons
	PropJustified bool
	// Accessible label for the action group
	PropLabel string
	// Applies a less visually prominent style to the buttons
	PropQuiet bool
	// Determines selection behavior: 'single' for radio-button behavior, 'multiple' for checkbox behavior
	PropSelects ActionGroupSelects
	// JSON string representation of selected button values array
	PropSelected string
	// Size of the action buttons in the group
	PropSize ActionGroupSize
	// Applies a specific color treatment to the buttons
	PropStaticcolor ActionGroupStaticcolor
	// Arranges buttons vertically instead of horizontally
	PropVertical bool

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnChange app.EventHandler
}

// IActionGroup is the interface for sp-action-group component methods
type IActionGroup interface {
	app.UI
	Styler[IActionGroup]
	Classer[IActionGroup]
	Ider[IActionGroup]
	Compact(bool) IActionGroup
	SetCompact() IActionGroup
	Emphasized(bool) IActionGroup
	SetEmphasized() IActionGroup
	Justified(bool) IActionGroup
	SetJustified() IActionGroup
	Label(string) IActionGroup
	Quiet(bool) IActionGroup
	SetQuiet() IActionGroup
	Selects(ActionGroupSelects) IActionGroup
	SelectsSingle() IActionGroup
	SelectsMultiple() IActionGroup
	Selected(string) IActionGroup
	Size(ActionGroupSize) IActionGroup
	SizeXs() IActionGroup
	SizeS() IActionGroup
	SizeM() IActionGroup
	SizeL() IActionGroup
	SizeXl() IActionGroup
	Staticcolor(ActionGroupStaticcolor) IActionGroup
	StaticcolorWhite() IActionGroup
	StaticcolorBlack() IActionGroup
	Vertical(bool) IActionGroup
	SetVertical() IActionGroup

	Body(...app.UI) IActionGroup
	AddToBody(app.UI) IActionGroup
	Text(string) IActionGroup

	OnChange(app.EventHandler) IActionGroup
}

// ActionGroup Delivers a set of action buttons in horizontal or vertical orientation while ensuring the appropriate spacing between those buttons. The compact attribute merges these buttons so that they are visually joined to clarify their relationship.
func ActionGroup() IActionGroup {
	element := &spectrumActionGroup{
		PropCompact:     false,
		PropEmphasized:  false,
		PropJustified:   false,
		PropLabel:       "",
		PropQuiet:       false,
		PropSelects:     "",
		PropSelected:    "[]",
		PropSize:        ActionGroupSizeM,
		PropStaticcolor: "",
		PropVertical:    false,
		PropBody:        []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Compact Visually joins buttons together to clarify their relationship
func (c *spectrumActionGroup) Compact(compact bool) IActionGroup {
	c.PropCompact = compact
	return c
}

func (c *spectrumActionGroup) SetCompact() IActionGroup {
	return c.Compact(true)
}

// Emphasized Applies visual emphasis to the buttons in the group
func (c *spectrumActionGroup) Emphasized(emphasized bool) IActionGroup {
	c.PropEmphasized = emphasized
	return c
}

func (c *spectrumActionGroup) SetEmphasized() IActionGroup {
	return c.Emphasized(true)
}

// Justified Fills available horizontal space and evenly distributes that space across child buttons
func (c *spectrumActionGroup) Justified(justified bool) IActionGroup {
	c.PropJustified = justified
	return c
}

func (c *spectrumActionGroup) SetJustified() IActionGroup {
	return c.Justified(true)
}

// Label Accessible label for the action group
func (c *spectrumActionGroup) Label(label string) IActionGroup {
	c.PropLabel = label
	return c
}

// Quiet Applies a less visually prominent style to the buttons
func (c *spectrumActionGroup) Quiet(quiet bool) IActionGroup {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumActionGroup) SetQuiet() IActionGroup {
	return c.Quiet(true)
}

// Selects Determines selection behavior: 'single' for radio-button behavior, 'multiple' for checkbox behavior
func (c *spectrumActionGroup) Selects(selects ActionGroupSelects) IActionGroup {
	c.PropSelects = selects
	return c
}

func (c *spectrumActionGroup) SelectsSingle() IActionGroup {
	return c.Selects(ActionGroupSelectsSingle)
}
func (c *spectrumActionGroup) SelectsMultiple() IActionGroup {
	return c.Selects(ActionGroupSelectsMultiple)
}

// Selected JSON string representation of selected button values array
func (c *spectrumActionGroup) Selected(selected string) IActionGroup {
	c.PropSelected = selected
	return c
}

// Size Size of the action buttons in the group
func (c *spectrumActionGroup) Size(size ActionGroupSize) IActionGroup {
	c.PropSize = size
	return c
}

func (c *spectrumActionGroup) SizeXs() IActionGroup {
	return c.Size(ActionGroupSizeXs)
}
func (c *spectrumActionGroup) SizeS() IActionGroup {
	return c.Size(ActionGroupSizeS)
}
func (c *spectrumActionGroup) SizeM() IActionGroup {
	return c.Size(ActionGroupSizeM)
}
func (c *spectrumActionGroup) SizeL() IActionGroup {
	return c.Size(ActionGroupSizeL)
}
func (c *spectrumActionGroup) SizeXl() IActionGroup {
	return c.Size(ActionGroupSizeXl)
}

// Staticcolor Applies a specific color treatment to the buttons
func (c *spectrumActionGroup) Staticcolor(staticColor ActionGroupStaticcolor) IActionGroup {
	c.PropStaticcolor = staticColor
	return c
}

func (c *spectrumActionGroup) StaticcolorWhite() IActionGroup {
	return c.Staticcolor(ActionGroupStaticcolorWhite)
}
func (c *spectrumActionGroup) StaticcolorBlack() IActionGroup {
	return c.Staticcolor(ActionGroupStaticcolorBlack)
}

// Vertical Arranges buttons vertically instead of horizontally
func (c *spectrumActionGroup) Vertical(vertical bool) IActionGroup {
	c.PropVertical = vertical
	return c
}

func (c *spectrumActionGroup) SetVertical() IActionGroup {
	return c.Vertical(true)
}

// Body sets the content for the default slot
func (c *spectrumActionGroup) Body(elements ...app.UI) IActionGroup {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumActionGroup) AddToBody(element app.UI) IActionGroup {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumActionGroup) Text(text string) IActionGroup {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Announces that selection state has been changed by user
func (c *spectrumActionGroup) OnChange(handler app.EventHandler) IActionGroup {
	c.PropOnChange = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumActionGroup) Style(key, format string, values ...any) IActionGroup {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumActionGroup) Styles(styles map[string]string) IActionGroup {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumActionGroup) Class(class string) IActionGroup {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumActionGroup) Classes(classes ...string) IActionGroup {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumActionGroup) Id(id string) IActionGroup {
	return c.ider.Id(id)
}

// Render renders the sp-action-group component
func (c *spectrumActionGroup) Render() app.UI {
	element := app.Elem("sp-action-group")

	// Set attributes
	if c.PropCompact {
		element = element.Attr("compact", true)
	}
	if c.PropEmphasized {
		element = element.Attr("emphasized", true)
	}
	if c.PropJustified {
		element = element.Attr("justified", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropSelects != "" {
		element = element.Attr("selects", string(c.PropSelects))
	}
	if c.PropSelected != "" {
		element = element.Attr("selected", c.PropSelected)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropStaticcolor != "" {
		element = element.Attr("staticColor", string(c.PropStaticcolor))
	}
	if c.PropVertical {
		element = element.Attr("vertical", true)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
