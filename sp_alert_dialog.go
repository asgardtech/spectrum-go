// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// AlertDialogVariant represents the The variant defines the style and purpose of the alert dialog
type AlertDialogVariant string

// AlertDialogVariant values
const (
	AlertDialogVariantConfirmation AlertDialogVariant = "confirmation"
	AlertDialogVariantInformation  AlertDialogVariant = "information"
	AlertDialogVariantWarning      AlertDialogVariant = "warning"
	AlertDialogVariantError        AlertDialogVariant = "error"
	AlertDialogVariantDestructive  AlertDialogVariant = "destructive"
	AlertDialogVariantSecondary    AlertDialogVariant = "secondary"
)

// spectrumAlertDialog represents an sp-alert-dialog component
type spectrumAlertDialog struct {
	app.Compo
	*styler[*spectrumAlertDialog]
	*classer[*spectrumAlertDialog]
	*ider[*spectrumAlertDialog]

	// Properties
	// The variant defines the style and purpose of the alert dialog
	PropVariant AlertDialogVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropHeadingSlot app.UI
	PropButtonSlot  app.UI

	// Event handlers
	PropOnClose app.EventHandler
}

// IAlertDialog is the interface for sp-alert-dialog component methods
type IAlertDialog interface {
	app.UI
	Styler[IAlertDialog]
	Classer[IAlertDialog]
	Ider[IAlertDialog]
	Variant(AlertDialogVariant) IAlertDialog
	VariantConfirmation() IAlertDialog
	VariantInformation() IAlertDialog
	VariantWarning() IAlertDialog
	VariantError() IAlertDialog
	VariantDestructive() IAlertDialog
	VariantSecondary() IAlertDialog

	Body(...app.UI) IAlertDialog
	AddToBody(app.UI) IAlertDialog
	Text(string) IAlertDialog

	Heading(app.UI) IAlertDialog
	Button(app.UI) IAlertDialog

	OnClose(app.EventHandler) IAlertDialog
}

// AlertDialog Displays important information that users need to acknowledge. It provides a slot-based API for deep customization of the content to be included in the overlay.
func AlertDialog() IAlertDialog {
	element := &spectrumAlertDialog{
		PropVariant: AlertDialogVariantConfirmation,
		PropBody:    []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Variant The variant defines the style and purpose of the alert dialog
func (c *spectrumAlertDialog) Variant(variant AlertDialogVariant) IAlertDialog {
	c.PropVariant = variant
	return c
}

func (c *spectrumAlertDialog) VariantConfirmation() IAlertDialog {
	return c.Variant(AlertDialogVariantConfirmation)
}
func (c *spectrumAlertDialog) VariantInformation() IAlertDialog {
	return c.Variant(AlertDialogVariantInformation)
}
func (c *spectrumAlertDialog) VariantWarning() IAlertDialog {
	return c.Variant(AlertDialogVariantWarning)
}
func (c *spectrumAlertDialog) VariantError() IAlertDialog {
	return c.Variant(AlertDialogVariantError)
}
func (c *spectrumAlertDialog) VariantDestructive() IAlertDialog {
	return c.Variant(AlertDialogVariantDestructive)
}
func (c *spectrumAlertDialog) VariantSecondary() IAlertDialog {
	return c.Variant(AlertDialogVariantSecondary)
}

// Body sets the content for the default slot
func (c *spectrumAlertDialog) Body(elements ...app.UI) IAlertDialog {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumAlertDialog) AddToBody(element app.UI) IAlertDialog {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumAlertDialog) Text(text string) IAlertDialog {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Dialog heading or title
func (c *spectrumAlertDialog) Heading(content app.UI) IAlertDialog {
	c.PropHeadingSlot = content

	return c
}

// Buttons for user actions (multiple buttons can be slotted here)
func (c *spectrumAlertDialog) Button(content app.UI) IAlertDialog {
	c.PropButtonSlot = content

	return c
}

// Dispatched when the dialog should be closed
func (c *spectrumAlertDialog) OnClose(handler app.EventHandler) IAlertDialog {
	c.PropOnClose = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumAlertDialog) Style(key, format string, values ...any) IAlertDialog {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumAlertDialog) Styles(styles map[string]string) IAlertDialog {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumAlertDialog) Class(class string) IAlertDialog {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumAlertDialog) Classes(classes ...string) IAlertDialog {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumAlertDialog) Id(id string) IAlertDialog {
	return c.ider.Id(id)
}

// Render renders the sp-alert-dialog component
func (c *spectrumAlertDialog) Render() app.UI {
	element := app.Elem("sp-alert-dialog")

	// Set attributes
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add heading slot
	if c.PropHeadingSlot != nil {
		slotElem := c.PropHeadingSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("heading")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "heading").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add button slot
	if c.PropButtonSlot != nil {
		slotElem := c.PropButtonSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("button")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "button").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
