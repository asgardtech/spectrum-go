// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// AssetVariant represents the The type of asset to represent if not providing an image
type AssetVariant string

// AssetVariant values
const (
	AssetVariantFile   AssetVariant = "file"
	AssetVariantFolder AssetVariant = "folder"
)

// spectrumAsset represents an sp-asset component
type spectrumAsset struct {
	app.Compo
	*styler[*spectrumAsset]
	*classer[*spectrumAsset]
	*ider[*spectrumAsset]

	// Properties
	// The label to display for the asset
	PropLabel string
	// The type of asset to represent if not providing an image
	PropVariant AssetVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// IAsset is the interface for sp-asset component methods
type IAsset interface {
	app.UI
	Styler[IAsset]
	Classer[IAsset]
	Ider[IAsset]
	Label(string) IAsset
	Variant(AssetVariant) IAsset
	VariantFile() IAsset
	VariantFolder() IAsset

	Body(...app.UI) IAsset
	AddToBody(app.UI) IAsset
	Text(string) IAsset
}

// Asset Visually represents a file, folder or image in your application. File and folder representations center themselves horizontally and vertically in the space provided, while images are contained to the element, growing to the element's full height while centering within the width.
func Asset() IAsset {
	element := &spectrumAsset{
		PropLabel:   "",
		PropVariant: "",
		PropBody:    []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Label The label to display for the asset
func (c *spectrumAsset) Label(label string) IAsset {
	c.PropLabel = label
	return c
}

// Variant The type of asset to represent if not providing an image
func (c *spectrumAsset) Variant(variant AssetVariant) IAsset {
	c.PropVariant = variant
	return c
}

func (c *spectrumAsset) VariantFile() IAsset {
	return c.Variant(AssetVariantFile)
}
func (c *spectrumAsset) VariantFolder() IAsset {
	return c.Variant(AssetVariantFolder)
}

// Body sets the content for the default slot
func (c *spectrumAsset) Body(elements ...app.UI) IAsset {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumAsset) AddToBody(element app.UI) IAsset {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumAsset) Text(text string) IAsset {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumAsset) Style(key, format string, values ...any) IAsset {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumAsset) Styles(styles map[string]string) IAsset {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumAsset) Class(class string) IAsset {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumAsset) Classes(classes ...string) IAsset {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumAsset) Id(id string) IAsset {
	return c.ider.Id(id)
}

// Render renders the sp-asset component
func (c *spectrumAsset) Render() app.UI {
	element := app.Elem("sp-asset")

	// Set attributes
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
