// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumBundle represents an sp-bundle component
type spectrumBundle struct {
	app.Compo
	*styler[*spectrumBundle]
	*classer[*spectrumBundle]
	*ider[*spectrumBundle]

	// Properties

}

// IBundle is the interface for sp-bundle component methods
type IBundle interface {
	app.UI
	Styler[IBundle]
	Classer[IBundle]
	Ider[IBundle]
}

// Bundle A master dependency that allows a project to import any and all of the Spectrum Web Components.
func Bundle() IBundle {
	element := &spectrumBundle{}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Style sets a style property with a value
func (c *spectrumBundle) Style(key, format string, values ...any) IBundle {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumBundle) Styles(styles map[string]string) IBundle {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumBundle) Class(class string) IBundle {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumBundle) Classes(classes ...string) IBundle {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumBundle) Id(id string) IBundle {
	return c.ider.Id(id)
}

// Render renders the sp-bundle component
func (c *spectrumBundle) Render() app.UI {
	element := app.Elem("sp-bundle")

	// Set attributes

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
