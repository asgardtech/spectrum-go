// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumRadioGroup represents an sp-radio-group component
type spectrumRadioGroup struct {
	app.Compo
	*styler[*spectrumRadioGroup]
	*classer[*spectrumRadioGroup]
	*ider[*spectrumRadioGroup]

	// Properties
	// Whether the radio buttons should be arranged horizontally
	PropHorizontal bool
	// Whether the radio group is in an invalid state
	PropInvalid bool
	// The accessible label for the radio group
	PropLabel string
	// The name of the radio group when used in a form
	PropName string
	// The value of the currently selected radio button
	PropSelected string
	// Whether the radio buttons should be arranged vertically
	PropVertical bool

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropHelpTextSlot         app.UI
	PropNegativeHelpTextSlot app.UI

	// Child components
	PropChildren []app.UI

	// Event handlers
	PropOnChange app.EventHandler
}

// IRadioGroup is the interface for sp-radio-group component methods
type IRadioGroup interface {
	app.UI
	Styler[IRadioGroup]
	Classer[IRadioGroup]
	Ider[IRadioGroup]
	Horizontal(bool) IRadioGroup
	SetHorizontal() IRadioGroup
	Invalid(bool) IRadioGroup
	SetInvalid() IRadioGroup
	Label(string) IRadioGroup
	Name(string) IRadioGroup
	Selected(string) IRadioGroup
	Vertical(bool) IRadioGroup
	SetVertical() IRadioGroup

	Body(...app.UI) IRadioGroup
	AddToBody(app.UI) IRadioGroup
	Text(string) IRadioGroup

	HelpText(app.UI) IRadioGroup
	NegativeHelpText(app.UI) IRadioGroup

	Children(...app.UI) IRadioGroup
	AddChild(app.UI) IRadioGroup

	OnChange(app.EventHandler) IRadioGroup
}

// RadioGroup Radio groups hold a list of radio buttons and are responsible for deselecting radio buttons when a new one is selected, which makes them responsible for tracking which one is selected.
func RadioGroup() IRadioGroup {
	element := &spectrumRadioGroup{
		PropHorizontal: false,
		PropInvalid:    false,
		PropLabel:      "",
		PropName:       "",
		PropSelected:   "",
		PropVertical:   false,
		PropBody:       []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Horizontal Whether the radio buttons should be arranged horizontally
func (c *spectrumRadioGroup) Horizontal(horizontal bool) IRadioGroup {
	c.PropHorizontal = horizontal
	return c
}

func (c *spectrumRadioGroup) SetHorizontal() IRadioGroup {
	return c.Horizontal(true)
}

// Invalid Whether the radio group is in an invalid state
func (c *spectrumRadioGroup) Invalid(invalid bool) IRadioGroup {
	c.PropInvalid = invalid
	return c
}

func (c *spectrumRadioGroup) SetInvalid() IRadioGroup {
	return c.Invalid(true)
}

// Label The accessible label for the radio group
func (c *spectrumRadioGroup) Label(label string) IRadioGroup {
	c.PropLabel = label
	return c
}

// Name The name of the radio group when used in a form
func (c *spectrumRadioGroup) Name(name string) IRadioGroup {
	c.PropName = name
	return c
}

// Selected The value of the currently selected radio button
func (c *spectrumRadioGroup) Selected(selected string) IRadioGroup {
	c.PropSelected = selected
	return c
}

// Vertical Whether the radio buttons should be arranged vertically
func (c *spectrumRadioGroup) Vertical(vertical bool) IRadioGroup {
	c.PropVertical = vertical
	return c
}

func (c *spectrumRadioGroup) SetVertical() IRadioGroup {
	return c.Vertical(true)
}

// Body sets the content for the default slot
func (c *spectrumRadioGroup) Body(elements ...app.UI) IRadioGroup {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumRadioGroup) AddToBody(element app.UI) IRadioGroup {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumRadioGroup) Text(text string) IRadioGroup {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Default or non-negative help text to associate to your form element
func (c *spectrumRadioGroup) HelpText(content app.UI) IRadioGroup {
	c.PropHelpTextSlot = content

	return c
}

// Negative help text to associate to your form element when invalid
func (c *spectrumRadioGroup) NegativeHelpText(content app.UI) IRadioGroup {
	c.PropNegativeHelpTextSlot = content

	return c
}

// Children sets the child components
func (c *spectrumRadioGroup) Children(children ...app.UI) IRadioGroup {
	c.PropChildren = children

	return c
}

// AddChild adds a child component
func (c *spectrumRadioGroup) AddChild(child app.UI) IRadioGroup {
	c.PropChildren = append(c.PropChildren, child)

	return c
}

// An alteration to the value of the element has been committed by the user.
func (c *spectrumRadioGroup) OnChange(handler app.EventHandler) IRadioGroup {
	c.PropOnChange = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumRadioGroup) Style(key, format string, values ...any) IRadioGroup {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumRadioGroup) Styles(styles map[string]string) IRadioGroup {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumRadioGroup) Class(class string) IRadioGroup {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumRadioGroup) Classes(classes ...string) IRadioGroup {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumRadioGroup) Id(id string) IRadioGroup {
	return c.ider.Id(id)
}

// Render renders the sp-radio-group component
func (c *spectrumRadioGroup) Render() app.UI {
	element := app.Elem("sp-radio-group")

	// Set attributes
	if c.PropHorizontal {
		element = element.Attr("horizontal", true)
	}
	if c.PropInvalid {
		element = element.Attr("invalid", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropName != "" {
		element = element.Attr("name", c.PropName)
	}
	if c.PropSelected != "" {
		element = element.Attr("selected", c.PropSelected)
	}
	if c.PropVertical {
		element = element.Attr("vertical", true)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add help-text slot
	if c.PropHelpTextSlot != nil {
		slotElem := c.PropHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add negative-help-text slot
	if c.PropNegativeHelpTextSlot != nil {
		slotElem := c.PropNegativeHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("negative-help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "negative-help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add children if no default slot content is provided
	if len(c.PropChildren) > 0 {
		// If there's a default slot, only add children if the default slot is empty
		if len(c.PropBody) == 0 {
			for _, child := range c.PropChildren {
				slotElements = append(slotElements, child)
			}
		}
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
