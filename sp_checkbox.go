// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// CheckboxSize represents the The size of the checkbox
type CheckboxSize string

// CheckboxSize values
const (
	CheckboxSizeS  CheckboxSize = "s"
	CheckboxSizeM  CheckboxSize = "m"
	CheckboxSizeL  CheckboxSize = "l"
	CheckboxSizeXl CheckboxSize = "xl"
)

// spectrumCheckbox represents an sp-checkbox component
type spectrumCheckbox struct {
	app.Compo
	*styler[*spectrumCheckbox]
	*classer[*spectrumCheckbox]
	*ider[*spectrumCheckbox]

	// Properties
	// Whether the checkbox is checked
	PropChecked bool
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Whether to use the emphasized (blue) visual style for the checkbox
	PropEmphasized bool
	// Whether the checkbox is in an indeterminate state
	PropIndeterminate bool
	// Whether the checkbox is in an invalid state
	PropInvalid bool
	// The name of the checkbox when used in a form
	PropName string
	// Whether the checkbox is readonly
	PropReadonly bool
	// The size of the checkbox
	PropSize CheckboxSize
	// The tab index of the checkbox
	PropTabindex float64

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnChange app.EventHandler
}

// ICheckbox is the interface for sp-checkbox component methods
type ICheckbox interface {
	app.UI
	Styler[ICheckbox]
	Classer[ICheckbox]
	Ider[ICheckbox]
	Checked(bool) ICheckbox
	SetChecked() ICheckbox
	Disabled(bool) ICheckbox
	SetDisabled() ICheckbox
	Emphasized(bool) ICheckbox
	SetEmphasized() ICheckbox
	Indeterminate(bool) ICheckbox
	SetIndeterminate() ICheckbox
	Invalid(bool) ICheckbox
	SetInvalid() ICheckbox
	Name(string) ICheckbox
	Readonly(bool) ICheckbox
	SetReadonly() ICheckbox
	Size(CheckboxSize) ICheckbox
	SizeS() ICheckbox
	SizeM() ICheckbox
	SizeL() ICheckbox
	SizeXl() ICheckbox
	Tabindex(float64) ICheckbox

	Body(...app.UI) ICheckbox
	AddToBody(app.UI) ICheckbox
	Text(string) ICheckbox

	OnChange(app.EventHandler) ICheckbox
}

// Checkbox Checkboxes allow users to select multiple items from a list of independent options, or to mark an individual option as selected.
func Checkbox() ICheckbox {
	element := &spectrumCheckbox{
		PropChecked:       false,
		PropDisabled:      false,
		PropEmphasized:    false,
		PropIndeterminate: false,
		PropInvalid:       false,
		PropReadonly:      false,
		PropSize:          CheckboxSizeM,
		PropTabindex:      0,
		PropBody:          []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Checked Whether the checkbox is checked
func (c *spectrumCheckbox) Checked(checked bool) ICheckbox {
	c.PropChecked = checked
	return c
}

func (c *spectrumCheckbox) SetChecked() ICheckbox {
	return c.Checked(true)
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumCheckbox) Disabled(disabled bool) ICheckbox {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumCheckbox) SetDisabled() ICheckbox {
	return c.Disabled(true)
}

// Emphasized Whether to use the emphasized (blue) visual style for the checkbox
func (c *spectrumCheckbox) Emphasized(emphasized bool) ICheckbox {
	c.PropEmphasized = emphasized
	return c
}

func (c *spectrumCheckbox) SetEmphasized() ICheckbox {
	return c.Emphasized(true)
}

// Indeterminate Whether the checkbox is in an indeterminate state
func (c *spectrumCheckbox) Indeterminate(indeterminate bool) ICheckbox {
	c.PropIndeterminate = indeterminate
	return c
}

func (c *spectrumCheckbox) SetIndeterminate() ICheckbox {
	return c.Indeterminate(true)
}

// Invalid Whether the checkbox is in an invalid state
func (c *spectrumCheckbox) Invalid(invalid bool) ICheckbox {
	c.PropInvalid = invalid
	return c
}

func (c *spectrumCheckbox) SetInvalid() ICheckbox {
	return c.Invalid(true)
}

// Name The name of the checkbox when used in a form
func (c *spectrumCheckbox) Name(name string) ICheckbox {
	c.PropName = name
	return c
}

// Readonly Whether the checkbox is readonly
func (c *spectrumCheckbox) Readonly(readonly bool) ICheckbox {
	c.PropReadonly = readonly
	return c
}

func (c *spectrumCheckbox) SetReadonly() ICheckbox {
	return c.Readonly(true)
}

// Size The size of the checkbox
func (c *spectrumCheckbox) Size(size CheckboxSize) ICheckbox {
	c.PropSize = size
	return c
}

func (c *spectrumCheckbox) SizeS() ICheckbox {
	return c.Size(CheckboxSizeS)
}
func (c *spectrumCheckbox) SizeM() ICheckbox {
	return c.Size(CheckboxSizeM)
}
func (c *spectrumCheckbox) SizeL() ICheckbox {
	return c.Size(CheckboxSizeL)
}
func (c *spectrumCheckbox) SizeXl() ICheckbox {
	return c.Size(CheckboxSizeXl)
}

// Tabindex The tab index of the checkbox
func (c *spectrumCheckbox) Tabindex(tabindex float64) ICheckbox {
	c.PropTabindex = tabindex
	return c
}

// Body sets the content for the default slot
func (c *spectrumCheckbox) Body(elements ...app.UI) ICheckbox {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumCheckbox) AddToBody(element app.UI) ICheckbox {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumCheckbox) Text(text string) ICheckbox {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Announces a change in the checked property of a Checkbox
func (c *spectrumCheckbox) OnChange(handler app.EventHandler) ICheckbox {
	c.PropOnChange = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumCheckbox) Style(key, format string, values ...any) ICheckbox {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumCheckbox) Styles(styles map[string]string) ICheckbox {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumCheckbox) Class(class string) ICheckbox {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumCheckbox) Classes(classes ...string) ICheckbox {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumCheckbox) Id(id string) ICheckbox {
	return c.ider.Id(id)
}

// Render renders the sp-checkbox component
func (c *spectrumCheckbox) Render() app.UI {
	element := app.Elem("sp-checkbox")

	// Set attributes
	if c.PropChecked {
		element = element.Attr("checked", true)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropEmphasized {
		element = element.Attr("emphasized", true)
	}
	if c.PropIndeterminate {
		element = element.Attr("indeterminate", true)
	}
	if c.PropInvalid {
		element = element.Attr("invalid", true)
	}
	if c.PropName != "" {
		element = element.Attr("name", c.PropName)
	}
	if c.PropReadonly {
		element = element.Attr("readonly", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabindex", c.PropTabindex)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
