// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// CoachIndicatorStaticcolor represents the Applies a specific color treatment to the indicator
type CoachIndicatorStaticcolor string

// CoachIndicatorStaticcolor values
const (
	CoachIndicatorStaticcolorWhite CoachIndicatorStaticcolor = "white"
	CoachIndicatorStaticcolorBlack CoachIndicatorStaticcolor = "black"
	CoachIndicatorStaticcolorLight CoachIndicatorStaticcolor = "light"
	CoachIndicatorStaticcolorDark  CoachIndicatorStaticcolor = "dark"
)

// spectrumCoachIndicator represents an sp-coach-indicator component
type spectrumCoachIndicator struct {
	app.Compo
	*styler[*spectrumCoachIndicator]
	*classer[*spectrumCoachIndicator]
	*ider[*spectrumCoachIndicator]

	// Properties
	// Applies a less visually prominent style
	PropQuiet bool
	// Applies a specific color treatment to the indicator
	PropStaticcolor CoachIndicatorStaticcolor
}

// ICoachIndicator is the interface for sp-coach-indicator component methods
type ICoachIndicator interface {
	app.UI
	Styler[ICoachIndicator]
	Classer[ICoachIndicator]
	Ider[ICoachIndicator]
	Quiet(bool) ICoachIndicator
	SetQuiet() ICoachIndicator
	Staticcolor(CoachIndicatorStaticcolor) ICoachIndicator
	StaticcolorWhite() ICoachIndicator
	StaticcolorBlack() ICoachIndicator
	StaticcolorLight() ICoachIndicator
	StaticcolorDark() ICoachIndicator
}

// CoachIndicator Shows the connection between an object and its explanation in a touring mode â€” for example, the source of information in an onboarding tour.
func CoachIndicator() ICoachIndicator {
	element := &spectrumCoachIndicator{
		PropQuiet:       false,
		PropStaticcolor: "",
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Quiet Applies a less visually prominent style
func (c *spectrumCoachIndicator) Quiet(quiet bool) ICoachIndicator {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumCoachIndicator) SetQuiet() ICoachIndicator {
	return c.Quiet(true)
}

// Staticcolor Applies a specific color treatment to the indicator
func (c *spectrumCoachIndicator) Staticcolor(staticColor CoachIndicatorStaticcolor) ICoachIndicator {
	c.PropStaticcolor = staticColor
	return c
}

func (c *spectrumCoachIndicator) StaticcolorWhite() ICoachIndicator {
	return c.Staticcolor(CoachIndicatorStaticcolorWhite)
}
func (c *spectrumCoachIndicator) StaticcolorBlack() ICoachIndicator {
	return c.Staticcolor(CoachIndicatorStaticcolorBlack)
}
func (c *spectrumCoachIndicator) StaticcolorLight() ICoachIndicator {
	return c.Staticcolor(CoachIndicatorStaticcolorLight)
}
func (c *spectrumCoachIndicator) StaticcolorDark() ICoachIndicator {
	return c.Staticcolor(CoachIndicatorStaticcolorDark)
}

// Style sets a style property with a value
func (c *spectrumCoachIndicator) Style(key, format string, values ...any) ICoachIndicator {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumCoachIndicator) Styles(styles map[string]string) ICoachIndicator {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumCoachIndicator) Class(class string) ICoachIndicator {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumCoachIndicator) Classes(classes ...string) ICoachIndicator {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumCoachIndicator) Id(id string) ICoachIndicator {
	return c.ider.Id(id)
}

// Render renders the sp-coach-indicator component
func (c *spectrumCoachIndicator) Render() app.UI {
	element := app.Elem("sp-coach-indicator")

	// Set attributes
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropStaticcolor != "" {
		element = element.Attr("staticColor", string(c.PropStaticcolor))
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
