// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumPendingState represents an  component
type spectrumPendingState struct {
	app.Compo
	*styler[*spectrumPendingState]
	*classer[*spectrumPendingState]
	*ider[*spectrumPendingState]

	// Properties
	// Whether the items are currently loading
	PropPending bool
	// Whether the host is disabled
	PropDisabled bool
	// Defines a string value that labels the element while it is in pending state
	PropPendingLabel string
}

// IPendingState is the interface for  component methods
type IPendingState interface {
	app.UI
	Styler[IPendingState]
	Classer[IPendingState]
	Ider[IPendingState]
	Pending(bool) IPendingState
	SetPending() IPendingState
	Disabled(bool) IPendingState
	SetDisabled() IPendingState
	PendingLabel(string) IPendingState
}

// PendingState The PendingStateController helps manage the pending state of a reactive element. It provides a standardized way to indicate when an element is in a pending state, such as during an asynchronous operation.
func PendingState() IPendingState {
	element := &spectrumPendingState{
		PropPending:      false,
		PropDisabled:     false,
		PropPendingLabel: "Pending",
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Pending Whether the items are currently loading
func (c *spectrumPendingState) Pending(pending bool) IPendingState {
	c.PropPending = pending
	return c
}

func (c *spectrumPendingState) SetPending() IPendingState {
	return c.Pending(true)
}

// Disabled Whether the host is disabled
func (c *spectrumPendingState) Disabled(disabled bool) IPendingState {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumPendingState) SetDisabled() IPendingState {
	return c.Disabled(true)
}

// PendingLabel Defines a string value that labels the element while it is in pending state
func (c *spectrumPendingState) PendingLabel(pendingLabel string) IPendingState {
	c.PropPendingLabel = pendingLabel
	return c
}

// Style sets a style property with a value
func (c *spectrumPendingState) Style(key, format string, values ...any) IPendingState {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumPendingState) Styles(styles map[string]string) IPendingState {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumPendingState) Class(class string) IPendingState {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumPendingState) Classes(classes ...string) IPendingState {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumPendingState) Id(id string) IPendingState {
	return c.ider.Id(id)
}

// Render renders the  component
func (c *spectrumPendingState) Render() app.UI {
	element := app.Elem("")

	// Set attributes
	if c.PropPending {
		element = element.Attr("pending", true)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropPendingLabel != "" {
		element = element.Attr("pending-label", c.PropPendingLabel)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
