// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// SearchSize represents the Size variant of the search field
type SearchSize string

// SearchSize values
const (
	SearchSizeS  SearchSize = "s"
	SearchSizeM  SearchSize = "m"
	SearchSizeL  SearchSize = "l"
	SearchSizeXl SearchSize = "xl"
)

// spectrumSearch represents an sp-search component
type spectrumSearch struct {
	app.Compo
	*styler[*spectrumSearch]
	*classer[*spectrumSearch]
	*ider[*spectrumSearch]

	// Properties
	// The action URL for the search form
	PropAction string
	// What form of assistance should be provided when attempting to supply a value to the form control
	PropAutocomplete string
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Whether a form control delivered with the `multiline` attribute will change size vertically to accommodate longer input
	PropGrows bool
	// Controls whether the typed value should be held when the Escape key is pressed
	PropHoldvalueonescape bool
	// Whether the `value` held by the form control is invalid
	PropInvalid bool
	// A string applied via `aria-label` to the form control when a user visible label is not provided
	PropLabel string
	// Defines the maximum string length that the user can enter
	PropMaxlength float64
	// HTTP method to use for the form submission
	PropMethod string
	// Defines the minimum string length that the user can enter
	PropMinlength float64
	// Whether the form control should accept a value longer than one line
	PropMultiline bool
	// Name of the form control
	PropName string
	// Pattern the `value` must match to be valid
	PropPattern string
	// Text that appears in the form control when it has no value set
	PropPlaceholder string
	// Whether to display the form control with no visible background
	PropQuiet bool
	// Whether a user can interact with the value of the form control
	PropReadonly bool
	// Whether the form control will be found to be invalid when it holds no `value`
	PropRequired bool
	// The specific number of rows the form control should provide in the user interface
	PropRows float64
	// Size variant of the search field
	PropSize SearchSize
	// The tab index to apply to this control
	PropTabindex float64
	// Whether the `value` held by the form control is valid
	PropValid bool
	// The value held by the form control
	PropValue string

	// Content slots
	PropHelpTextSlot         app.UI
	PropNegativeHelpTextSlot app.UI

	// Event handlers
	PropOnChange app.EventHandler
	PropOnInput  app.EventHandler
	PropOnSubmit app.EventHandler
}

// ISearch is the interface for sp-search component methods
type ISearch interface {
	app.UI
	Styler[ISearch]
	Classer[ISearch]
	Ider[ISearch]
	Action(string) ISearch
	Autocomplete(string) ISearch
	Disabled(bool) ISearch
	SetDisabled() ISearch
	Grows(bool) ISearch
	SetGrows() ISearch
	Holdvalueonescape(bool) ISearch
	SetHoldvalueonescape() ISearch
	Invalid(bool) ISearch
	SetInvalid() ISearch
	Label(string) ISearch
	Maxlength(float64) ISearch
	Method(string) ISearch
	Minlength(float64) ISearch
	Multiline(bool) ISearch
	SetMultiline() ISearch
	Name(string) ISearch
	Pattern(string) ISearch
	Placeholder(string) ISearch
	Quiet(bool) ISearch
	SetQuiet() ISearch
	Readonly(bool) ISearch
	SetReadonly() ISearch
	Required(bool) ISearch
	SetRequired() ISearch
	Rows(float64) ISearch
	Size(SearchSize) ISearch
	SizeS() ISearch
	SizeM() ISearch
	SizeL() ISearch
	SizeXl() ISearch
	Tabindex(float64) ISearch
	Valid(bool) ISearch
	SetValid() ISearch
	Value(string) ISearch

	HelpText(app.UI) ISearch
	NegativeHelpText(app.UI) ISearch

	OnChange(app.EventHandler) ISearch
	OnInput(app.EventHandler) ISearch
	OnSubmit(app.EventHandler) ISearch
}

// Search Delivers a single input field with a "reset" button as well as a magnifying glass icon with which to power search interactions.
func Search() ISearch {
	element := &spectrumSearch{
		PropAction:            "",
		PropAutocomplete:      "",
		PropDisabled:          false,
		PropGrows:             false,
		PropHoldvalueonescape: false,
		PropInvalid:           false,
		PropLabel:             "Search",
		PropMaxlength:         -1,
		PropMethod:            "",
		PropMinlength:         -1,
		PropMultiline:         false,
		PropName:              "",
		PropPattern:           "",
		PropPlaceholder:       "Search",
		PropQuiet:             false,
		PropReadonly:          false,
		PropRequired:          false,
		PropRows:              -1,
		PropSize:              SearchSizeM,
		PropTabindex:          0,
		PropValid:             false,
		PropValue:             "",
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Action The action URL for the search form
func (c *spectrumSearch) Action(action string) ISearch {
	c.PropAction = action
	return c
}

// Autocomplete What form of assistance should be provided when attempting to supply a value to the form control
func (c *spectrumSearch) Autocomplete(autocomplete string) ISearch {
	c.PropAutocomplete = autocomplete
	return c
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumSearch) Disabled(disabled bool) ISearch {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumSearch) SetDisabled() ISearch {
	return c.Disabled(true)
}

// Grows Whether a form control delivered with the `multiline` attribute will change size vertically to accommodate longer input
func (c *spectrumSearch) Grows(grows bool) ISearch {
	c.PropGrows = grows
	return c
}

func (c *spectrumSearch) SetGrows() ISearch {
	return c.Grows(true)
}

// Holdvalueonescape Controls whether the typed value should be held when the Escape key is pressed
func (c *spectrumSearch) Holdvalueonescape(holdValueOnEscape bool) ISearch {
	c.PropHoldvalueonescape = holdValueOnEscape
	return c
}

func (c *spectrumSearch) SetHoldvalueonescape() ISearch {
	return c.Holdvalueonescape(true)
}

// Invalid Whether the `value` held by the form control is invalid
func (c *spectrumSearch) Invalid(invalid bool) ISearch {
	c.PropInvalid = invalid
	return c
}

func (c *spectrumSearch) SetInvalid() ISearch {
	return c.Invalid(true)
}

// Label A string applied via `aria-label` to the form control when a user visible label is not provided
func (c *spectrumSearch) Label(label string) ISearch {
	c.PropLabel = label
	return c
}

// Maxlength Defines the maximum string length that the user can enter
func (c *spectrumSearch) Maxlength(maxlength float64) ISearch {
	c.PropMaxlength = maxlength
	return c
}

// Method HTTP method to use for the form submission
func (c *spectrumSearch) Method(method string) ISearch {
	c.PropMethod = method
	return c
}

// Minlength Defines the minimum string length that the user can enter
func (c *spectrumSearch) Minlength(minlength float64) ISearch {
	c.PropMinlength = minlength
	return c
}

// Multiline Whether the form control should accept a value longer than one line
func (c *spectrumSearch) Multiline(multiline bool) ISearch {
	c.PropMultiline = multiline
	return c
}

func (c *spectrumSearch) SetMultiline() ISearch {
	return c.Multiline(true)
}

// Name Name of the form control
func (c *spectrumSearch) Name(name string) ISearch {
	c.PropName = name
	return c
}

// Pattern Pattern the `value` must match to be valid
func (c *spectrumSearch) Pattern(pattern string) ISearch {
	c.PropPattern = pattern
	return c
}

// Placeholder Text that appears in the form control when it has no value set
func (c *spectrumSearch) Placeholder(placeholder string) ISearch {
	c.PropPlaceholder = placeholder
	return c
}

// Quiet Whether to display the form control with no visible background
func (c *spectrumSearch) Quiet(quiet bool) ISearch {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumSearch) SetQuiet() ISearch {
	return c.Quiet(true)
}

// Readonly Whether a user can interact with the value of the form control
func (c *spectrumSearch) Readonly(readonly bool) ISearch {
	c.PropReadonly = readonly
	return c
}

func (c *spectrumSearch) SetReadonly() ISearch {
	return c.Readonly(true)
}

// Required Whether the form control will be found to be invalid when it holds no `value`
func (c *spectrumSearch) Required(required bool) ISearch {
	c.PropRequired = required
	return c
}

func (c *spectrumSearch) SetRequired() ISearch {
	return c.Required(true)
}

// Rows The specific number of rows the form control should provide in the user interface
func (c *spectrumSearch) Rows(rows float64) ISearch {
	c.PropRows = rows
	return c
}

// Size Size variant of the search field
func (c *spectrumSearch) Size(size SearchSize) ISearch {
	c.PropSize = size
	return c
}

func (c *spectrumSearch) SizeS() ISearch {
	return c.Size(SearchSizeS)
}
func (c *spectrumSearch) SizeM() ISearch {
	return c.Size(SearchSizeM)
}
func (c *spectrumSearch) SizeL() ISearch {
	return c.Size(SearchSizeL)
}
func (c *spectrumSearch) SizeXl() ISearch {
	return c.Size(SearchSizeXl)
}

// Tabindex The tab index to apply to this control
func (c *spectrumSearch) Tabindex(tabIndex float64) ISearch {
	c.PropTabindex = tabIndex
	return c
}

// Valid Whether the `value` held by the form control is valid
func (c *spectrumSearch) Valid(valid bool) ISearch {
	c.PropValid = valid
	return c
}

func (c *spectrumSearch) SetValid() ISearch {
	return c.Valid(true)
}

// Value The value held by the form control
func (c *spectrumSearch) Value(value string) ISearch {
	c.PropValue = value
	return c
}

// Default or non-negative help text to associate to your form element
func (c *spectrumSearch) HelpText(content app.UI) ISearch {
	c.PropHelpTextSlot = content

	return c
}

// Negative help text to associate to your form element when `invalid`
func (c *spectrumSearch) NegativeHelpText(content app.UI) ISearch {
	c.PropNegativeHelpTextSlot = content

	return c
}

// An alteration to the value of the element has been committed by the user
func (c *spectrumSearch) OnChange(handler app.EventHandler) ISearch {
	c.PropOnChange = handler

	return c
}

// The value of the element has changed
func (c *spectrumSearch) OnInput(handler app.EventHandler) ISearch {
	c.PropOnInput = handler

	return c
}

// The search form has been submitted
func (c *spectrumSearch) OnSubmit(handler app.EventHandler) ISearch {
	c.PropOnSubmit = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumSearch) Style(key, format string, values ...any) ISearch {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumSearch) Styles(styles map[string]string) ISearch {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumSearch) Class(class string) ISearch {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumSearch) Classes(classes ...string) ISearch {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumSearch) Id(id string) ISearch {
	return c.ider.Id(id)
}

// Render renders the sp-search component
func (c *spectrumSearch) Render() app.UI {
	element := app.Elem("sp-search")

	// Set attributes
	if c.PropAction != "" {
		element = element.Attr("action", c.PropAction)
	}
	if c.PropAutocomplete != "" {
		element = element.Attr("autocomplete", c.PropAutocomplete)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropGrows {
		element = element.Attr("grows", true)
	}
	if c.PropHoldvalueonescape {
		element = element.Attr("holdValueOnEscape", true)
	}
	if c.PropInvalid {
		element = element.Attr("invalid", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropMaxlength != 0 {
		element = element.Attr("maxlength", c.PropMaxlength)
	}
	if c.PropMethod != "" {
		element = element.Attr("method", c.PropMethod)
	}
	if c.PropMinlength != 0 {
		element = element.Attr("minlength", c.PropMinlength)
	}
	if c.PropMultiline {
		element = element.Attr("multiline", true)
	}
	if c.PropName != "" {
		element = element.Attr("name", c.PropName)
	}
	if c.PropPattern != "" {
		element = element.Attr("pattern", c.PropPattern)
	}
	if c.PropPlaceholder != "" {
		element = element.Attr("placeholder", c.PropPlaceholder)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropReadonly {
		element = element.Attr("readonly", true)
	}
	if c.PropRequired {
		element = element.Attr("required", true)
	}
	if c.PropRows != 0 {
		element = element.Attr("rows", c.PropRows)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabIndex", c.PropTabindex)
	}
	if c.PropValid {
		element = element.Attr("valid", true)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnInput != nil {
		element = element.On("input", c.PropOnInput)
	}
	if c.PropOnSubmit != nil {
		element = element.On("submit", c.PropOnSubmit)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add help-text slot
	if c.PropHelpTextSlot != nil {
		slotElem := c.PropHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add negative-help-text slot
	if c.PropNegativeHelpTextSlot != nil {
		slotElem := c.PropNegativeHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("negative-help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "negative-help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
