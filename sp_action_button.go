// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ActionButtonReferrerpolicy represents the How much of the referrer to send when following the link.
type ActionButtonReferrerpolicy string

// ActionButtonReferrerpolicy values
const (
	ActionButtonReferrerpolicyNoReferrer                  ActionButtonReferrerpolicy = "no-referrer"
	ActionButtonReferrerpolicyNoReferrerWhenDowngrade     ActionButtonReferrerpolicy = "no-referrer-when-downgrade"
	ActionButtonReferrerpolicyOrigin                      ActionButtonReferrerpolicy = "origin"
	ActionButtonReferrerpolicyOriginWhenCrossOrigin       ActionButtonReferrerpolicy = "origin-when-cross-origin"
	ActionButtonReferrerpolicySameOrigin                  ActionButtonReferrerpolicy = "same-origin"
	ActionButtonReferrerpolicyStrictOrigin                ActionButtonReferrerpolicy = "strict-origin"
	ActionButtonReferrerpolicyStrictOriginWhenCrossOrigin ActionButtonReferrerpolicy = "strict-origin-when-cross-origin"
	ActionButtonReferrerpolicyUnsafeUrl                   ActionButtonReferrerpolicy = "unsafe-url"
)

// ActionButtonStaticColor represents the The static color variant to use for the action button.
type ActionButtonStaticColor string

// ActionButtonStaticColor values
const (
	ActionButtonStaticColorWhite ActionButtonStaticColor = "white"
	ActionButtonStaticColorBlack ActionButtonStaticColor = "black"
)

// ActionButtonTarget represents the Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
type ActionButtonTarget string

// ActionButtonTarget values
const (
	ActionButtonTarget_blank  ActionButtonTarget = "_blank"
	ActionButtonTarget_parent ActionButtonTarget = "_parent"
	ActionButtonTarget_self   ActionButtonTarget = "_self"
	ActionButtonTarget_top    ActionButtonTarget = "_top"
)

// ActionButtonType represents the The default behavior of the button. Possible values are: button (default), submit, and reset.
type ActionButtonType string

// ActionButtonType values
const (
	ActionButtonTypeButton ActionButtonType = "button"
	ActionButtonTypeSubmit ActionButtonType = "submit"
	ActionButtonTypeReset  ActionButtonType = "reset"
)

// spectrumActionButton represents an sp-action-button component
type spectrumActionButton struct {
	app.Compo
	*styler[*spectrumActionButton]
	*classer[*spectrumActionButton]
	*ider[*spectrumActionButton]

	// Properties
	// Whether the button appears in an active state
	PropActive bool
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Causes the browser to treat the linked URL as a download.
	PropDownload string
	// Whether to apply the emphasized visual style
	PropEmphasized bool
	// Whether to display a visual affordance indicating longpress functionality
	PropHoldAffordance bool
	// The URL that the hyperlink points to.
	PropHref string
	// An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
	PropLabel string
	// Whether to apply the quiet visual style
	PropQuiet bool
	// How much of the referrer to send when following the link.
	PropReferrerpolicy ActionButtonReferrerpolicy
	// The relationship of the linked URL as space-separated link types.
	PropRel string
	// The ARIA role for the action button
	PropRole string
	// Whether an Action Button with role='button' should also be aria-pressed='true'
	PropSelected bool
	// The static color variant to use for the action button.
	PropStaticColor ActionButtonStaticColor
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64
	// Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
	PropTarget ActionButtonTarget
	// Whether to automatically manage the selected attribute on interaction and whether aria-pressed="false" should be used when selected === false
	PropToggles bool
	// The default behavior of the button. Possible values are: button (default), submit, and reset.
	PropType ActionButtonType
	// The value associated with the button
	PropValue string

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropIconSlot app.UI

	// Event handlers
	PropOnChange    app.EventHandler
	PropOnLongpress app.EventHandler
	PropOnClick     app.EventHandler
}

// IActionButton is the interface for sp-action-button component methods
type IActionButton interface {
	app.UI
	Styler[IActionButton]
	Classer[IActionButton]
	Ider[IActionButton]
	Active(bool) IActionButton
	SetActive() IActionButton
	Disabled(bool) IActionButton
	SetDisabled() IActionButton
	Download(string) IActionButton
	Emphasized(bool) IActionButton
	SetEmphasized() IActionButton
	HoldAffordance(bool) IActionButton
	SetHoldAffordance() IActionButton
	Href(string) IActionButton
	Label(string) IActionButton
	Quiet(bool) IActionButton
	SetQuiet() IActionButton
	Referrerpolicy(ActionButtonReferrerpolicy) IActionButton
	ReferrerpolicyNoReferrer() IActionButton
	ReferrerpolicyNoReferrerWhenDowngrade() IActionButton
	ReferrerpolicyOrigin() IActionButton
	ReferrerpolicyOriginWhenCrossOrigin() IActionButton
	ReferrerpolicySameOrigin() IActionButton
	ReferrerpolicyStrictOrigin() IActionButton
	ReferrerpolicyStrictOriginWhenCrossOrigin() IActionButton
	ReferrerpolicyUnsafeUrl() IActionButton
	Rel(string) IActionButton
	Role(string) IActionButton
	Selected(bool) IActionButton
	SetSelected() IActionButton
	StaticColor(ActionButtonStaticColor) IActionButton
	StaticColorWhite() IActionButton
	StaticColorBlack() IActionButton
	Tabindex(float64) IActionButton
	Target(ActionButtonTarget) IActionButton
	Target_blank() IActionButton
	Target_parent() IActionButton
	Target_self() IActionButton
	Target_top() IActionButton
	Toggles(bool) IActionButton
	SetToggles() IActionButton
	Type(ActionButtonType) IActionButton
	TypeButton() IActionButton
	TypeSubmit() IActionButton
	TypeReset() IActionButton
	Value(string) IActionButton

	Body(...app.UI) IActionButton
	AddToBody(app.UI) IActionButton
	Text(string) IActionButton

	Icon(app.UI) IActionButton

	OnChange(app.EventHandler) IActionButton
	OnLongpress(app.EventHandler) IActionButton
	OnClick(app.EventHandler) IActionButton
}

// ActionButton An sp-action-button represents an action a user can take.
func ActionButton() IActionButton {
	element := &spectrumActionButton{
		PropActive:         false,
		PropDisabled:       false,
		PropEmphasized:     false,
		PropHoldAffordance: false,
		PropQuiet:          false,
		PropRole:           "button",
		PropSelected:       false,
		PropTabindex:       0,
		PropToggles:        false,
		PropType:           ActionButtonTypeButton,
		PropBody:           []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Active Whether the button appears in an active state
func (c *spectrumActionButton) Active(active bool) IActionButton {
	c.PropActive = active
	return c
}

func (c *spectrumActionButton) SetActive() IActionButton {
	return c.Active(true)
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumActionButton) Disabled(disabled bool) IActionButton {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumActionButton) SetDisabled() IActionButton {
	return c.Disabled(true)
}

// Download Causes the browser to treat the linked URL as a download.
func (c *spectrumActionButton) Download(download string) IActionButton {
	c.PropDownload = download
	return c
}

// Emphasized Whether to apply the emphasized visual style
func (c *spectrumActionButton) Emphasized(emphasized bool) IActionButton {
	c.PropEmphasized = emphasized
	return c
}

func (c *spectrumActionButton) SetEmphasized() IActionButton {
	return c.Emphasized(true)
}

// HoldAffordance Whether to display a visual affordance indicating longpress functionality
func (c *spectrumActionButton) HoldAffordance(holdAffordance bool) IActionButton {
	c.PropHoldAffordance = holdAffordance
	return c
}

func (c *spectrumActionButton) SetHoldAffordance() IActionButton {
	return c.HoldAffordance(true)
}

// Href The URL that the hyperlink points to.
func (c *spectrumActionButton) Href(href string) IActionButton {
	c.PropHref = href
	return c
}

// Label An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
func (c *spectrumActionButton) Label(label string) IActionButton {
	c.PropLabel = label
	return c
}

// Quiet Whether to apply the quiet visual style
func (c *spectrumActionButton) Quiet(quiet bool) IActionButton {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumActionButton) SetQuiet() IActionButton {
	return c.Quiet(true)
}

// Referrerpolicy How much of the referrer to send when following the link.
func (c *spectrumActionButton) Referrerpolicy(referrerpolicy ActionButtonReferrerpolicy) IActionButton {
	c.PropReferrerpolicy = referrerpolicy
	return c
}

func (c *spectrumActionButton) ReferrerpolicyNoReferrer() IActionButton {
	return c.Referrerpolicy(ActionButtonReferrerpolicyNoReferrer)
}
func (c *spectrumActionButton) ReferrerpolicyNoReferrerWhenDowngrade() IActionButton {
	return c.Referrerpolicy(ActionButtonReferrerpolicyNoReferrerWhenDowngrade)
}
func (c *spectrumActionButton) ReferrerpolicyOrigin() IActionButton {
	return c.Referrerpolicy(ActionButtonReferrerpolicyOrigin)
}
func (c *spectrumActionButton) ReferrerpolicyOriginWhenCrossOrigin() IActionButton {
	return c.Referrerpolicy(ActionButtonReferrerpolicyOriginWhenCrossOrigin)
}
func (c *spectrumActionButton) ReferrerpolicySameOrigin() IActionButton {
	return c.Referrerpolicy(ActionButtonReferrerpolicySameOrigin)
}
func (c *spectrumActionButton) ReferrerpolicyStrictOrigin() IActionButton {
	return c.Referrerpolicy(ActionButtonReferrerpolicyStrictOrigin)
}
func (c *spectrumActionButton) ReferrerpolicyStrictOriginWhenCrossOrigin() IActionButton {
	return c.Referrerpolicy(ActionButtonReferrerpolicyStrictOriginWhenCrossOrigin)
}
func (c *spectrumActionButton) ReferrerpolicyUnsafeUrl() IActionButton {
	return c.Referrerpolicy(ActionButtonReferrerpolicyUnsafeUrl)
}

// Rel The relationship of the linked URL as space-separated link types.
func (c *spectrumActionButton) Rel(rel string) IActionButton {
	c.PropRel = rel
	return c
}

// Role The ARIA role for the action button
func (c *spectrumActionButton) Role(role string) IActionButton {
	c.PropRole = role
	return c
}

// Selected Whether an Action Button with role='button' should also be aria-pressed='true'
func (c *spectrumActionButton) Selected(selected bool) IActionButton {
	c.PropSelected = selected
	return c
}

func (c *spectrumActionButton) SetSelected() IActionButton {
	return c.Selected(true)
}

// StaticColor The static color variant to use for the action button.
func (c *spectrumActionButton) StaticColor(staticColor ActionButtonStaticColor) IActionButton {
	c.PropStaticColor = staticColor
	return c
}

func (c *spectrumActionButton) StaticColorWhite() IActionButton {
	return c.StaticColor(ActionButtonStaticColorWhite)
}
func (c *spectrumActionButton) StaticColorBlack() IActionButton {
	return c.StaticColor(ActionButtonStaticColorBlack)
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumActionButton) Tabindex(tabindex float64) IActionButton {
	c.PropTabindex = tabindex
	return c
}

// Target Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
func (c *spectrumActionButton) Target(target ActionButtonTarget) IActionButton {
	c.PropTarget = target
	return c
}

func (c *spectrumActionButton) Target_blank() IActionButton {
	return c.Target(ActionButtonTarget_blank)
}
func (c *spectrumActionButton) Target_parent() IActionButton {
	return c.Target(ActionButtonTarget_parent)
}
func (c *spectrumActionButton) Target_self() IActionButton {
	return c.Target(ActionButtonTarget_self)
}
func (c *spectrumActionButton) Target_top() IActionButton {
	return c.Target(ActionButtonTarget_top)
}

// Toggles Whether to automatically manage the selected attribute on interaction and whether aria-pressed="false" should be used when selected === false
func (c *spectrumActionButton) Toggles(toggles bool) IActionButton {
	c.PropToggles = toggles
	return c
}

func (c *spectrumActionButton) SetToggles() IActionButton {
	return c.Toggles(true)
}

// Type The default behavior of the button. Possible values are: button (default), submit, and reset.
func (c *spectrumActionButton) Type(typeValue ActionButtonType) IActionButton {
	c.PropType = typeValue
	return c
}

func (c *spectrumActionButton) TypeButton() IActionButton {
	return c.Type(ActionButtonTypeButton)
}
func (c *spectrumActionButton) TypeSubmit() IActionButton {
	return c.Type(ActionButtonTypeSubmit)
}
func (c *spectrumActionButton) TypeReset() IActionButton {
	return c.Type(ActionButtonTypeReset)
}

// Value The value associated with the button
func (c *spectrumActionButton) Value(value string) IActionButton {
	c.PropValue = value
	return c
}

// Body sets the content for the default slot
func (c *spectrumActionButton) Body(elements ...app.UI) IActionButton {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumActionButton) AddToBody(element app.UI) IActionButton {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumActionButton) Text(text string) IActionButton {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// The icon to use for Action Button
func (c *spectrumActionButton) Icon(content app.UI) IActionButton {
	c.PropIconSlot = content

	return c
}

// Announces a change in the selected property of an action button
func (c *spectrumActionButton) OnChange(handler app.EventHandler) IActionButton {
	c.PropOnChange = handler

	return c
}

// Synthesizes a longpress interaction that signifies a pointerdown event that is >=300ms or a keyboard event where code is Space or code is ArrowDown while altKey===true.
func (c *spectrumActionButton) OnLongpress(handler app.EventHandler) IActionButton {
	c.PropOnLongpress = handler

	return c
}

// Fired when the button is clicked
func (c *spectrumActionButton) OnClick(handler app.EventHandler) IActionButton {
	c.PropOnClick = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumActionButton) Style(key, format string, values ...any) IActionButton {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumActionButton) Styles(styles map[string]string) IActionButton {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumActionButton) Class(class string) IActionButton {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumActionButton) Classes(classes ...string) IActionButton {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumActionButton) Id(id string) IActionButton {
	return c.ider.Id(id)
}

// Render renders the sp-action-button component
func (c *spectrumActionButton) Render() app.UI {
	element := app.Elem("sp-action-button")

	// Set attributes
	if c.PropActive {
		element = element.Attr("active", true)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropDownload != "" {
		element = element.Attr("download", c.PropDownload)
	}
	if c.PropEmphasized {
		element = element.Attr("emphasized", true)
	}
	if c.PropHoldAffordance {
		element = element.Attr("hold-affordance", true)
	}
	if c.PropHref != "" {
		element = element.Attr("href", c.PropHref)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropReferrerpolicy != "" {
		element = element.Attr("referrerpolicy", string(c.PropReferrerpolicy))
	}
	if c.PropRel != "" {
		element = element.Attr("rel", c.PropRel)
	}
	if c.PropRole != "" {
		element = element.Attr("role", c.PropRole)
	}
	if c.PropSelected {
		element = element.Attr("selected", true)
	}
	if c.PropStaticColor != "" {
		element = element.Attr("static-color", string(c.PropStaticColor))
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabindex", c.PropTabindex)
	}
	if c.PropTarget != "" {
		element = element.Attr("target", string(c.PropTarget))
	}
	if c.PropToggles {
		element = element.Attr("toggles", true)
	}
	if c.PropType != "" {
		element = element.Attr("type", string(c.PropType))
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnLongpress != nil {
		element = element.On("longpress", c.PropOnLongpress)
	}
	if c.PropOnClick != nil {
		element = element.On("click", c.PropOnClick)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add icon slot
	if c.PropIconSlot != nil {
		slotElem := c.PropIconSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("icon")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "icon").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
