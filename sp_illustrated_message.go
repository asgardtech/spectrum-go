// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumIllustratedMessage represents an sp-illustrated-message component
type spectrumIllustratedMessage struct {
	app.Compo
	*styler[*spectrumIllustratedMessage]
	*classer[*spectrumIllustratedMessage]
	*ider[*spectrumIllustratedMessage]

	// Properties
	// Additional descriptive text explaining the illustrated message
	PropDescription string
	// Main heading or title for the illustrated message
	PropHeading string

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropDescriptionSlot app.UI
	PropHeadingSlot     app.UI
}

// IIllustratedMessage is the interface for sp-illustrated-message component methods
type IIllustratedMessage interface {
	app.UI
	Styler[IIllustratedMessage]
	Classer[IIllustratedMessage]
	Ider[IIllustratedMessage]
	Description(string) IIllustratedMessage
	Heading(string) IIllustratedMessage

	Body(...app.UI) IIllustratedMessage
	AddToBody(app.UI) IIllustratedMessage
	Text(string) IIllustratedMessage

	DescriptionContent(app.UI) IIllustratedMessage
	HeadingContent(app.UI) IIllustratedMessage
}

// IllustratedMessage An sp-illustrated-message displays an illustration icon and a message, usually in an empty state or on an error page. It is also used inside a DropZone.
func IllustratedMessage() IIllustratedMessage {
	element := &spectrumIllustratedMessage{
		PropDescription: "",
		PropHeading:     "",
		PropBody:        []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Description Additional descriptive text explaining the illustrated message
func (c *spectrumIllustratedMessage) Description(description string) IIllustratedMessage {
	c.PropDescription = description
	return c
}

// Heading Main heading or title for the illustrated message
func (c *spectrumIllustratedMessage) Heading(heading string) IIllustratedMessage {
	c.PropHeading = heading
	return c
}

// Body sets the content for the default slot
func (c *spectrumIllustratedMessage) Body(elements ...app.UI) IIllustratedMessage {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumIllustratedMessage) AddToBody(element app.UI) IIllustratedMessage {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumIllustratedMessage) Text(text string) IIllustratedMessage {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Description text for the illustration
func (c *spectrumIllustratedMessage) DescriptionContent(content app.UI) IIllustratedMessage {
	c.PropDescriptionSlot = content

	return c
}

// Headline for the message
func (c *spectrumIllustratedMessage) HeadingContent(content app.UI) IIllustratedMessage {
	c.PropHeadingSlot = content

	return c
}

// Style sets a style property with a value
func (c *spectrumIllustratedMessage) Style(key, format string, values ...any) IIllustratedMessage {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumIllustratedMessage) Styles(styles map[string]string) IIllustratedMessage {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumIllustratedMessage) Class(class string) IIllustratedMessage {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumIllustratedMessage) Classes(classes ...string) IIllustratedMessage {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumIllustratedMessage) Id(id string) IIllustratedMessage {
	return c.ider.Id(id)
}

// Render renders the sp-illustrated-message component
func (c *spectrumIllustratedMessage) Render() app.UI {
	element := app.Elem("sp-illustrated-message")

	// Set attributes
	if c.PropDescription != "" {
		element = element.Attr("description", c.PropDescription)
	}
	if c.PropHeading != "" {
		element = element.Attr("heading", c.PropHeading)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add description slot
	if c.PropDescriptionSlot != nil {
		slotElem := c.PropDescriptionSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("description")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "description").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add heading slot
	if c.PropHeadingSlot != nil {
		slotElem := c.PropHeadingSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("heading")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "heading").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
