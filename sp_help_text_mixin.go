// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumHelpTextMixin represents an  component
type spectrumHelpTextMixin struct {
	app.Compo
	*styler[*spectrumHelpTextMixin]
	*classer[*spectrumHelpTextMixin]
	*ider[*spectrumHelpTextMixin]

	// Properties
	// The id attribute of the associated sp-help-text
	PropHelptextid string
	// A method that returns a TemplateResult with the help-text and negative-help-text slots
	PropRenderhelptext string

	// Content slots
	PropHelpTextSlot         app.UI
	PropNegativeHelpTextSlot app.UI
}

// IHelpTextMixin is the interface for  component methods
type IHelpTextMixin interface {
	app.UI
	Styler[IHelpTextMixin]
	Classer[IHelpTextMixin]
	Ider[IHelpTextMixin]
	Helptextid(string) IHelpTextMixin
	Renderhelptext(string) IHelpTextMixin

	HelpText(app.UI) IHelpTextMixin
	NegativeHelpText(app.UI) IHelpTextMixin
}

// HelpTextMixin A mixin that allows associating slotted sp-help-text elements with the elements they describe, providing accessible ARIA references between elements in different shadow roots.
func HelpTextMixin() IHelpTextMixin {
	element := &spectrumHelpTextMixin{}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Helptextid The id attribute of the associated sp-help-text
func (c *spectrumHelpTextMixin) Helptextid(helpTextId string) IHelpTextMixin {
	c.PropHelptextid = helpTextId
	return c
}

// Renderhelptext A method that returns a TemplateResult with the help-text and negative-help-text slots
func (c *spectrumHelpTextMixin) Renderhelptext(renderHelpText string) IHelpTextMixin {
	c.PropRenderhelptext = renderHelpText
	return c
}

// Default or non-negative help text to associate to your form element
func (c *spectrumHelpTextMixin) HelpText(content app.UI) IHelpTextMixin {
	c.PropHelpTextSlot = content

	return c
}

// Negative help text to associate to your form element when invalid
func (c *spectrumHelpTextMixin) NegativeHelpText(content app.UI) IHelpTextMixin {
	c.PropNegativeHelpTextSlot = content

	return c
}

// Style sets a style property with a value
func (c *spectrumHelpTextMixin) Style(key, format string, values ...any) IHelpTextMixin {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumHelpTextMixin) Styles(styles map[string]string) IHelpTextMixin {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumHelpTextMixin) Class(class string) IHelpTextMixin {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumHelpTextMixin) Classes(classes ...string) IHelpTextMixin {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumHelpTextMixin) Id(id string) IHelpTextMixin {
	return c.ider.Id(id)
}

// Render renders the  component
func (c *spectrumHelpTextMixin) Render() app.UI {
	element := app.Elem("")

	// Set attributes
	if c.PropHelptextid != "" {
		element = element.Attr("helpTextId", c.PropHelptextid)
	}
	if c.PropRenderhelptext != "" {
		element = element.Attr("renderHelpText", c.PropRenderhelptext)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add help-text slot
	if c.PropHelpTextSlot != nil {
		slotElem := c.PropHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add negative-help-text slot
	if c.PropNegativeHelpTextSlot != nil {
		slotElem := c.PropNegativeHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("negative-help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "negative-help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
