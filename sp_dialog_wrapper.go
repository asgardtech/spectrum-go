// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// DialogWrapperHeadlinevisibility represents the Controls visibility of the headline
type DialogWrapperHeadlinevisibility string

// DialogWrapperHeadlinevisibility values
const (
	DialogWrapperHeadlinevisibilityNone DialogWrapperHeadlinevisibility = "none"
)

// DialogWrapperMode represents the The display mode of the dialog
type DialogWrapperMode string

// DialogWrapperMode values
const (
	DialogWrapperModeFullscreen         DialogWrapperMode = "fullscreen"
	DialogWrapperModeFullscreentakeover DialogWrapperMode = "fullscreenTakeover"
)

// DialogWrapperSize represents the Size of the dialog
type DialogWrapperSize string

// DialogWrapperSize values
const (
	DialogWrapperSizeS DialogWrapperSize = "s"
	DialogWrapperSizeM DialogWrapperSize = "m"
	DialogWrapperSizeL DialogWrapperSize = "l"
)

// spectrumDialogWrapper represents an sp-dialog-wrapper component
type spectrumDialogWrapper struct {
	app.Compo
	*styler[*spectrumDialogWrapper]
	*classer[*spectrumDialogWrapper]
	*ider[*spectrumDialogWrapper]

	// Properties
	// Label for the cancel button
	PropCancellabel string
	// Label for the confirm button
	PropConfirmlabel string
	// Label for the dismiss button
	PropDismisslabel string
	// Whether the dialog has a close button
	PropDismissable bool
	// Whether the dialog represents an error state
	PropError bool
	// Text content for the footer
	PropFooter string
	// Text for the dialog heading
	PropHeadline string
	// Controls visibility of the headline
	PropHeadlinevisibility DialogWrapperHeadlinevisibility
	// URL or content for hero image
	PropHero string
	// Accessible label for the hero content
	PropHerolabel string
	// The display mode of the dialog
	PropMode DialogWrapperMode
	// Whether to hide the divider between header and content
	PropNodivider bool
	// Whether the dialog is open
	PropOpen bool
	// When set to true, fills screens smaller than 350px high and 400px wide with the full dialog
	PropResponsive bool
	// Label for the secondary button
	PropSecondarylabel string
	// Size of the dialog
	PropSize DialogWrapperSize
	// Whether to show an underlay beneath the dialog
	PropUnderlay bool

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnCancel    app.EventHandler
	PropOnClose     app.EventHandler
	PropOnConfirm   app.EventHandler
	PropOnSecondary app.EventHandler
}

// IDialogWrapper is the interface for sp-dialog-wrapper component methods
type IDialogWrapper interface {
	app.UI
	Styler[IDialogWrapper]
	Classer[IDialogWrapper]
	Ider[IDialogWrapper]
	Cancellabel(string) IDialogWrapper
	Confirmlabel(string) IDialogWrapper
	Dismisslabel(string) IDialogWrapper
	Dismissable(bool) IDialogWrapper
	SetDismissable() IDialogWrapper
	Error(bool) IDialogWrapper
	SetError() IDialogWrapper
	Footer(string) IDialogWrapper
	Headline(string) IDialogWrapper
	Headlinevisibility(DialogWrapperHeadlinevisibility) IDialogWrapper
	HeadlinevisibilityNone() IDialogWrapper
	Hero(string) IDialogWrapper
	Herolabel(string) IDialogWrapper
	Mode(DialogWrapperMode) IDialogWrapper
	ModeFullscreen() IDialogWrapper
	ModeFullscreentakeover() IDialogWrapper
	Nodivider(bool) IDialogWrapper
	SetNodivider() IDialogWrapper
	Open(bool) IDialogWrapper
	SetOpen() IDialogWrapper
	Responsive(bool) IDialogWrapper
	SetResponsive() IDialogWrapper
	Secondarylabel(string) IDialogWrapper
	Size(DialogWrapperSize) IDialogWrapper
	SizeS() IDialogWrapper
	SizeM() IDialogWrapper
	SizeL() IDialogWrapper
	Underlay(bool) IDialogWrapper
	SetUnderlay() IDialogWrapper

	Body(...app.UI) IDialogWrapper
	AddToBody(app.UI) IDialogWrapper
	Text(string) IDialogWrapper

	OnCancel(app.EventHandler) IDialogWrapper
	OnClose(app.EventHandler) IDialogWrapper
	OnConfirm(app.EventHandler) IDialogWrapper
	OnSecondary(app.EventHandler) IDialogWrapper
}

// DialogWrapper Supplies an attribute based interface for the managed customization of an sp-dialog element and the light DOM supplied to it.
func DialogWrapper() IDialogWrapper {
	element := &spectrumDialogWrapper{
		PropCancellabel:        "",
		PropConfirmlabel:       "",
		PropDismisslabel:       "Close",
		PropDismissable:        false,
		PropError:              false,
		PropFooter:             "",
		PropHeadline:           "",
		PropHeadlinevisibility: "",
		PropHero:               "",
		PropHerolabel:          "",
		PropMode:               "",
		PropNodivider:          false,
		PropOpen:               false,
		PropResponsive:         false,
		PropSecondarylabel:     "",
		PropSize:               "",
		PropUnderlay:           false,
		PropBody:               []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Cancellabel Label for the cancel button
func (c *spectrumDialogWrapper) Cancellabel(cancelLabel string) IDialogWrapper {
	c.PropCancellabel = cancelLabel
	return c
}

// Confirmlabel Label for the confirm button
func (c *spectrumDialogWrapper) Confirmlabel(confirmLabel string) IDialogWrapper {
	c.PropConfirmlabel = confirmLabel
	return c
}

// Dismisslabel Label for the dismiss button
func (c *spectrumDialogWrapper) Dismisslabel(dismissLabel string) IDialogWrapper {
	c.PropDismisslabel = dismissLabel
	return c
}

// Dismissable Whether the dialog has a close button
func (c *spectrumDialogWrapper) Dismissable(dismissable bool) IDialogWrapper {
	c.PropDismissable = dismissable
	return c
}

func (c *spectrumDialogWrapper) SetDismissable() IDialogWrapper {
	return c.Dismissable(true)
}

// Error Whether the dialog represents an error state
func (c *spectrumDialogWrapper) Error(error bool) IDialogWrapper {
	c.PropError = error
	return c
}

func (c *spectrumDialogWrapper) SetError() IDialogWrapper {
	return c.Error(true)
}

// Footer Text content for the footer
func (c *spectrumDialogWrapper) Footer(footer string) IDialogWrapper {
	c.PropFooter = footer
	return c
}

// Headline Text for the dialog heading
func (c *spectrumDialogWrapper) Headline(headline string) IDialogWrapper {
	c.PropHeadline = headline
	return c
}

// Headlinevisibility Controls visibility of the headline
func (c *spectrumDialogWrapper) Headlinevisibility(headlineVisibility DialogWrapperHeadlinevisibility) IDialogWrapper {
	c.PropHeadlinevisibility = headlineVisibility
	return c
}

func (c *spectrumDialogWrapper) HeadlinevisibilityNone() IDialogWrapper {
	return c.Headlinevisibility(DialogWrapperHeadlinevisibilityNone)
}

// Hero URL or content for hero image
func (c *spectrumDialogWrapper) Hero(hero string) IDialogWrapper {
	c.PropHero = hero
	return c
}

// Herolabel Accessible label for the hero content
func (c *spectrumDialogWrapper) Herolabel(heroLabel string) IDialogWrapper {
	c.PropHerolabel = heroLabel
	return c
}

// Mode The display mode of the dialog
func (c *spectrumDialogWrapper) Mode(mode DialogWrapperMode) IDialogWrapper {
	c.PropMode = mode
	return c
}

func (c *spectrumDialogWrapper) ModeFullscreen() IDialogWrapper {
	return c.Mode(DialogWrapperModeFullscreen)
}
func (c *spectrumDialogWrapper) ModeFullscreentakeover() IDialogWrapper {
	return c.Mode(DialogWrapperModeFullscreentakeover)
}

// Nodivider Whether to hide the divider between header and content
func (c *spectrumDialogWrapper) Nodivider(noDivider bool) IDialogWrapper {
	c.PropNodivider = noDivider
	return c
}

func (c *spectrumDialogWrapper) SetNodivider() IDialogWrapper {
	return c.Nodivider(true)
}

// Open Whether the dialog is open
func (c *spectrumDialogWrapper) Open(open bool) IDialogWrapper {
	c.PropOpen = open
	return c
}

func (c *spectrumDialogWrapper) SetOpen() IDialogWrapper {
	return c.Open(true)
}

// Responsive When set to true, fills screens smaller than 350px high and 400px wide with the full dialog
func (c *spectrumDialogWrapper) Responsive(responsive bool) IDialogWrapper {
	c.PropResponsive = responsive
	return c
}

func (c *spectrumDialogWrapper) SetResponsive() IDialogWrapper {
	return c.Responsive(true)
}

// Secondarylabel Label for the secondary button
func (c *spectrumDialogWrapper) Secondarylabel(secondaryLabel string) IDialogWrapper {
	c.PropSecondarylabel = secondaryLabel
	return c
}

// Size Size of the dialog
func (c *spectrumDialogWrapper) Size(size DialogWrapperSize) IDialogWrapper {
	c.PropSize = size
	return c
}

func (c *spectrumDialogWrapper) SizeS() IDialogWrapper {
	return c.Size(DialogWrapperSizeS)
}
func (c *spectrumDialogWrapper) SizeM() IDialogWrapper {
	return c.Size(DialogWrapperSizeM)
}
func (c *spectrumDialogWrapper) SizeL() IDialogWrapper {
	return c.Size(DialogWrapperSizeL)
}

// Underlay Whether to show an underlay beneath the dialog
func (c *spectrumDialogWrapper) Underlay(underlay bool) IDialogWrapper {
	c.PropUnderlay = underlay
	return c
}

func (c *spectrumDialogWrapper) SetUnderlay() IDialogWrapper {
	return c.Underlay(true)
}

// Body sets the content for the default slot
func (c *spectrumDialogWrapper) Body(elements ...app.UI) IDialogWrapper {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumDialogWrapper) AddToBody(element app.UI) IDialogWrapper {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumDialogWrapper) Text(text string) IDialogWrapper {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Announces that the cancel button has been clicked
func (c *spectrumDialogWrapper) OnCancel(handler app.EventHandler) IDialogWrapper {
	c.PropOnCancel = handler

	return c
}

// Announces that the dialog has been closed
func (c *spectrumDialogWrapper) OnClose(handler app.EventHandler) IDialogWrapper {
	c.PropOnClose = handler

	return c
}

// Announces that the confirm button has been clicked
func (c *spectrumDialogWrapper) OnConfirm(handler app.EventHandler) IDialogWrapper {
	c.PropOnConfirm = handler

	return c
}

// Announces that the secondary button has been clicked
func (c *spectrumDialogWrapper) OnSecondary(handler app.EventHandler) IDialogWrapper {
	c.PropOnSecondary = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumDialogWrapper) Style(key, format string, values ...any) IDialogWrapper {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumDialogWrapper) Styles(styles map[string]string) IDialogWrapper {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumDialogWrapper) Class(class string) IDialogWrapper {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumDialogWrapper) Classes(classes ...string) IDialogWrapper {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumDialogWrapper) Id(id string) IDialogWrapper {
	return c.ider.Id(id)
}

// Render renders the sp-dialog-wrapper component
func (c *spectrumDialogWrapper) Render() app.UI {
	element := app.Elem("sp-dialog-wrapper")

	// Set attributes
	if c.PropCancellabel != "" {
		element = element.Attr("cancelLabel", c.PropCancellabel)
	}
	if c.PropConfirmlabel != "" {
		element = element.Attr("confirmLabel", c.PropConfirmlabel)
	}
	if c.PropDismisslabel != "" {
		element = element.Attr("dismissLabel", c.PropDismisslabel)
	}
	if c.PropDismissable {
		element = element.Attr("dismissable", true)
	}
	if c.PropError {
		element = element.Attr("error", true)
	}
	if c.PropFooter != "" {
		element = element.Attr("footer", c.PropFooter)
	}
	if c.PropHeadline != "" {
		element = element.Attr("headline", c.PropHeadline)
	}
	if c.PropHeadlinevisibility != "" {
		element = element.Attr("headlineVisibility", string(c.PropHeadlinevisibility))
	}
	if c.PropHero != "" {
		element = element.Attr("hero", c.PropHero)
	}
	if c.PropHerolabel != "" {
		element = element.Attr("heroLabel", c.PropHerolabel)
	}
	if c.PropMode != "" {
		element = element.Attr("mode", string(c.PropMode))
	}
	if c.PropNodivider {
		element = element.Attr("noDivider", true)
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropResponsive {
		element = element.Attr("responsive", true)
	}
	if c.PropSecondarylabel != "" {
		element = element.Attr("secondaryLabel", c.PropSecondarylabel)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropUnderlay {
		element = element.Attr("underlay", true)
	}

	// Add event handlers
	if c.PropOnCancel != nil {
		element = element.On("cancel", c.PropOnCancel)
	}
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}
	if c.PropOnConfirm != nil {
		element = element.On("confirm", c.PropOnConfirm)
	}
	if c.PropOnSecondary != nil {
		element = element.On("secondary", c.PropOnSecondary)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
