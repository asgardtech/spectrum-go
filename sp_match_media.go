// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumMatchMedia represents an  component
type spectrumMatchMedia struct {
	app.Compo
	*styler[*spectrumMatchMedia]
	*classer[*spectrumMatchMedia]
	*ider[*spectrumMatchMedia]

	// Properties
	// Indicates whether the media query currently matches
	PropMatches bool
}

// IMatchMedia is the interface for  component methods
type IMatchMedia interface {
	app.UI
	Styler[IMatchMedia]
	Classer[IMatchMedia]
	Ider[IMatchMedia]
	Matches(bool) IMatchMedia
	SetMatches() IMatchMedia
}

// MatchMedia The MatchMediaController allows for querying the state of a CSS media query from JavaScript while providing an event-based API to listen for changes to whether that query is currently matched or not.
func MatchMedia() IMatchMedia {
	element := &spectrumMatchMedia{
		PropMatches: false,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Matches Indicates whether the media query currently matches
func (c *spectrumMatchMedia) Matches(matches bool) IMatchMedia {
	c.PropMatches = matches
	return c
}

func (c *spectrumMatchMedia) SetMatches() IMatchMedia {
	return c.Matches(true)
}

// Style sets a style property with a value
func (c *spectrumMatchMedia) Style(key, format string, values ...any) IMatchMedia {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumMatchMedia) Styles(styles map[string]string) IMatchMedia {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumMatchMedia) Class(class string) IMatchMedia {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumMatchMedia) Classes(classes ...string) IMatchMedia {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumMatchMedia) Id(id string) IMatchMedia {
	return c.ider.Id(id)
}

// Render renders the  component
func (c *spectrumMatchMedia) Render() app.UI {
	element := app.Elem("")

	// Set attributes
	if c.PropMatches {
		element = element.Attr("matches", true)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
