// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// CardAsset represents the Represents the card as a file or folder asset type
type CardAsset string

// CardAsset values
const (
	CardAssetFile   CardAsset = "file"
	CardAssetFolder CardAsset = "folder"
)

// CardReferrerpolicy represents the How much of the referrer to send when following the link
type CardReferrerpolicy string

// CardReferrerpolicy values
const (
	CardReferrerpolicyNoReferrer                  CardReferrerpolicy = "no-referrer"
	CardReferrerpolicyNoReferrerWhenDowngrade     CardReferrerpolicy = "no-referrer-when-downgrade"
	CardReferrerpolicyOrigin                      CardReferrerpolicy = "origin"
	CardReferrerpolicyOriginWhenCrossOrigin       CardReferrerpolicy = "origin-when-cross-origin"
	CardReferrerpolicySameOrigin                  CardReferrerpolicy = "same-origin"
	CardReferrerpolicyStrictOrigin                CardReferrerpolicy = "strict-origin"
	CardReferrerpolicyStrictOriginWhenCrossOrigin CardReferrerpolicy = "strict-origin-when-cross-origin"
	CardReferrerpolicyUnsafeUrl                   CardReferrerpolicy = "unsafe-url"
)

// CardTarget represents the Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe)
type CardTarget string

// CardTarget values
const (
	CardTarget_blank  CardTarget = "_blank"
	CardTarget_parent CardTarget = "_parent"
	CardTarget_self   CardTarget = "_self"
	CardTarget_top    CardTarget = "_top"
)

// CardVariant represents the The visual variant of the card
type CardVariant string

// CardVariant values
const (
	CardVariantStandard CardVariant = "standard"
	CardVariantGallery  CardVariant = "gallery"
	CardVariantQuiet    CardVariant = "quiet"
)

// spectrumCard represents an sp-card component
type spectrumCard struct {
	app.Compo
	*styler[*spectrumCard]
	*classer[*spectrumCard]
	*ider[*spectrumCard]

	// Properties
	// Represents the card as a file or folder asset type
	PropAsset CardAsset
	// Causes the browser to treat the linked URL as a download
	PropDownload string
	// Whether the card has focus
	PropFocused bool
	// The card heading text
	PropHeading string
	// Whether the card should use a horizontal layout
	PropHorizontal bool
	// The URL that the card links to when clicked
	PropHref string
	// An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
	PropLabel string
	// How much of the referrer to send when following the link
	PropReferrerpolicy CardReferrerpolicy
	// The relationship of the linked URL as space-separated link types
	PropRel string
	// The card subheading text
	PropSubheading string
	// Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe)
	PropTarget CardTarget
	// Whether the card can be toggled between selected and unselected states
	PropToggles bool
	// The value associated with the card
	PropValue string
	// The visual variant of the card
	PropVariant CardVariant

	// Content slots
	PropActionsSlot     app.UI
	PropCoverPhotoSlot  app.UI
	PropDescriptionSlot app.UI
	PropFooterSlot      app.UI
	PropHeadingSlot     app.UI
	PropPreviewSlot     app.UI
	PropSubheadingSlot  app.UI

	// Event handlers
	PropOnChange app.EventHandler
	PropOnClick  app.EventHandler
}

// ICard is the interface for sp-card component methods
type ICard interface {
	app.UI
	Styler[ICard]
	Classer[ICard]
	Ider[ICard]
	Asset(CardAsset) ICard
	AssetFile() ICard
	AssetFolder() ICard
	Download(string) ICard
	Focused(bool) ICard
	SetFocused() ICard
	Heading(string) ICard
	Horizontal(bool) ICard
	SetHorizontal() ICard
	Href(string) ICard
	Label(string) ICard
	Referrerpolicy(CardReferrerpolicy) ICard
	ReferrerpolicyNoReferrer() ICard
	ReferrerpolicyNoReferrerWhenDowngrade() ICard
	ReferrerpolicyOrigin() ICard
	ReferrerpolicyOriginWhenCrossOrigin() ICard
	ReferrerpolicySameOrigin() ICard
	ReferrerpolicyStrictOrigin() ICard
	ReferrerpolicyStrictOriginWhenCrossOrigin() ICard
	ReferrerpolicyUnsafeUrl() ICard
	Rel(string) ICard
	Subheading(string) ICard
	Target(CardTarget) ICard
	Target_blank() ICard
	Target_parent() ICard
	Target_self() ICard
	Target_top() ICard
	Toggles(bool) ICard
	SetToggles() ICard
	Value(string) ICard
	Variant(CardVariant) ICard
	VariantStandard() ICard
	VariantGallery() ICard
	VariantQuiet() ICard

	Actions(app.UI) ICard
	CoverPhoto(app.UI) ICard
	Description(app.UI) ICard
	Footer(app.UI) ICard
	HeadingContent(app.UI) ICard
	Preview(app.UI) ICard
	SubheadingContent(app.UI) ICard

	OnChange(app.EventHandler) ICard
	OnClick(app.EventHandler) ICard
}

// Card A card represents a rectangular container that contains a variety of text and image layouts. Cards are typically used to encapsulate units of a data set, such as a gallery of image/caption pairs.
func Card() ICard {
	element := &spectrumCard{
		PropFocused:    false,
		PropHeading:    "",
		PropHorizontal: false,
		PropSubheading: "",
		PropToggles:    false,
		PropValue:      "",
		PropVariant:    CardVariantStandard,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Asset Represents the card as a file or folder asset type
func (c *spectrumCard) Asset(asset CardAsset) ICard {
	c.PropAsset = asset
	return c
}

func (c *spectrumCard) AssetFile() ICard {
	return c.Asset(CardAssetFile)
}
func (c *spectrumCard) AssetFolder() ICard {
	return c.Asset(CardAssetFolder)
}

// Download Causes the browser to treat the linked URL as a download
func (c *spectrumCard) Download(download string) ICard {
	c.PropDownload = download
	return c
}

// Focused Whether the card has focus
func (c *spectrumCard) Focused(focused bool) ICard {
	c.PropFocused = focused
	return c
}

func (c *spectrumCard) SetFocused() ICard {
	return c.Focused(true)
}

// Heading The card heading text
func (c *spectrumCard) Heading(heading string) ICard {
	c.PropHeading = heading
	return c
}

// Horizontal Whether the card should use a horizontal layout
func (c *spectrumCard) Horizontal(horizontal bool) ICard {
	c.PropHorizontal = horizontal
	return c
}

func (c *spectrumCard) SetHorizontal() ICard {
	return c.Horizontal(true)
}

// Href The URL that the card links to when clicked
func (c *spectrumCard) Href(href string) ICard {
	c.PropHref = href
	return c
}

// Label An accessible label that describes the component. It will be applied to aria-label, but not visually rendered.
func (c *spectrumCard) Label(label string) ICard {
	c.PropLabel = label
	return c
}

// Referrerpolicy How much of the referrer to send when following the link
func (c *spectrumCard) Referrerpolicy(referrerpolicy CardReferrerpolicy) ICard {
	c.PropReferrerpolicy = referrerpolicy
	return c
}

func (c *spectrumCard) ReferrerpolicyNoReferrer() ICard {
	return c.Referrerpolicy(CardReferrerpolicyNoReferrer)
}
func (c *spectrumCard) ReferrerpolicyNoReferrerWhenDowngrade() ICard {
	return c.Referrerpolicy(CardReferrerpolicyNoReferrerWhenDowngrade)
}
func (c *spectrumCard) ReferrerpolicyOrigin() ICard {
	return c.Referrerpolicy(CardReferrerpolicyOrigin)
}
func (c *spectrumCard) ReferrerpolicyOriginWhenCrossOrigin() ICard {
	return c.Referrerpolicy(CardReferrerpolicyOriginWhenCrossOrigin)
}
func (c *spectrumCard) ReferrerpolicySameOrigin() ICard {
	return c.Referrerpolicy(CardReferrerpolicySameOrigin)
}
func (c *spectrumCard) ReferrerpolicyStrictOrigin() ICard {
	return c.Referrerpolicy(CardReferrerpolicyStrictOrigin)
}
func (c *spectrumCard) ReferrerpolicyStrictOriginWhenCrossOrigin() ICard {
	return c.Referrerpolicy(CardReferrerpolicyStrictOriginWhenCrossOrigin)
}
func (c *spectrumCard) ReferrerpolicyUnsafeUrl() ICard {
	return c.Referrerpolicy(CardReferrerpolicyUnsafeUrl)
}

// Rel The relationship of the linked URL as space-separated link types
func (c *spectrumCard) Rel(rel string) ICard {
	c.PropRel = rel
	return c
}

// Subheading The card subheading text
func (c *spectrumCard) Subheading(subheading string) ICard {
	c.PropSubheading = subheading
	return c
}

// Target Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe)
func (c *spectrumCard) Target(target CardTarget) ICard {
	c.PropTarget = target
	return c
}

func (c *spectrumCard) Target_blank() ICard {
	return c.Target(CardTarget_blank)
}
func (c *spectrumCard) Target_parent() ICard {
	return c.Target(CardTarget_parent)
}
func (c *spectrumCard) Target_self() ICard {
	return c.Target(CardTarget_self)
}
func (c *spectrumCard) Target_top() ICard {
	return c.Target(CardTarget_top)
}

// Toggles Whether the card can be toggled between selected and unselected states
func (c *spectrumCard) Toggles(toggles bool) ICard {
	c.PropToggles = toggles
	return c
}

func (c *spectrumCard) SetToggles() ICard {
	return c.Toggles(true)
}

// Value The value associated with the card
func (c *spectrumCard) Value(value string) ICard {
	c.PropValue = value
	return c
}

// Variant The visual variant of the card
func (c *spectrumCard) Variant(variant CardVariant) ICard {
	c.PropVariant = variant
	return c
}

func (c *spectrumCard) VariantStandard() ICard {
	return c.Variant(CardVariantStandard)
}
func (c *spectrumCard) VariantGallery() ICard {
	return c.Variant(CardVariantGallery)
}
func (c *spectrumCard) VariantQuiet() ICard {
	return c.Variant(CardVariantQuiet)
}

// An sp-action-menu element outlining actions to take on the represented object
func (c *spectrumCard) Actions(content app.UI) ICard {
	c.PropActionsSlot = content

	return c
}

// This is the cover photo for Default and Quiet Cards
func (c *spectrumCard) CoverPhoto(content app.UI) ICard {
	c.PropCoverPhotoSlot = content

	return c
}

// A description of the card
func (c *spectrumCard) Description(content app.UI) ICard {
	c.PropDescriptionSlot = content

	return c
}

// Footer text
func (c *spectrumCard) Footer(content app.UI) ICard {
	c.PropFooterSlot = content

	return c
}

// HTML content to be listed as the heading
func (c *spectrumCard) HeadingContent(content app.UI) ICard {
	c.PropHeadingSlot = content

	return c
}

// This is the preview image for Gallery Cards
func (c *spectrumCard) Preview(content app.UI) ICard {
	c.PropPreviewSlot = content

	return c
}

// HTML content to be listed as the subheading
func (c *spectrumCard) SubheadingContent(content app.UI) ICard {
	c.PropSubheadingSlot = content

	return c
}

// Announces a change in the selected property of a card
func (c *spectrumCard) OnChange(handler app.EventHandler) ICard {
	c.PropOnChange = handler

	return c
}

// Fired when the card is clicked
func (c *spectrumCard) OnClick(handler app.EventHandler) ICard {
	c.PropOnClick = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumCard) Style(key, format string, values ...any) ICard {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumCard) Styles(styles map[string]string) ICard {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumCard) Class(class string) ICard {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumCard) Classes(classes ...string) ICard {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumCard) Id(id string) ICard {
	return c.ider.Id(id)
}

// Render renders the sp-card component
func (c *spectrumCard) Render() app.UI {
	element := app.Elem("sp-card")

	// Set attributes
	if c.PropAsset != "" {
		element = element.Attr("asset", string(c.PropAsset))
	}
	if c.PropDownload != "" {
		element = element.Attr("download", c.PropDownload)
	}
	if c.PropFocused {
		element = element.Attr("focused", true)
	}
	if c.PropHeading != "" {
		element = element.Attr("heading", c.PropHeading)
	}
	if c.PropHorizontal {
		element = element.Attr("horizontal", true)
	}
	if c.PropHref != "" {
		element = element.Attr("href", c.PropHref)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropReferrerpolicy != "" {
		element = element.Attr("referrerpolicy", string(c.PropReferrerpolicy))
	}
	if c.PropRel != "" {
		element = element.Attr("rel", c.PropRel)
	}
	if c.PropSubheading != "" {
		element = element.Attr("subheading", c.PropSubheading)
	}
	if c.PropTarget != "" {
		element = element.Attr("target", string(c.PropTarget))
	}
	if c.PropToggles {
		element = element.Attr("toggles", true)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnClick != nil {
		element = element.On("click", c.PropOnClick)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add actions slot
	if c.PropActionsSlot != nil {
		slotElem := c.PropActionsSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("actions")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "actions").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add cover-photo slot
	if c.PropCoverPhotoSlot != nil {
		slotElem := c.PropCoverPhotoSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("cover-photo")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "cover-photo").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add description slot
	if c.PropDescriptionSlot != nil {
		slotElem := c.PropDescriptionSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("description")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "description").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add footer slot
	if c.PropFooterSlot != nil {
		slotElem := c.PropFooterSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("footer")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "footer").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add heading slot
	if c.PropHeadingSlot != nil {
		slotElem := c.PropHeadingSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("heading")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "heading").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add preview slot
	if c.PropPreviewSlot != nil {
		slotElem := c.PropPreviewSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("preview")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "preview").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add subheading slot
	if c.PropSubheadingSlot != nil {
		slotElem := c.PropSubheadingSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("subheading")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "subheading").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
