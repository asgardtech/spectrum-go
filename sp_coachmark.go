// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// CoachmarkAsset represents the The type of asset to represent
type CoachmarkAsset string

// CoachmarkAsset values
const (
	CoachmarkAssetFile   CoachmarkAsset = "file"
	CoachmarkAssetFolder CoachmarkAsset = "folder"
)

// CoachmarkMediatype represents the Type of media to display
type CoachmarkMediatype string

// CoachmarkMediatype values
const (
	CoachmarkMediatypeImage CoachmarkMediatype = "image"
	CoachmarkMediatypeGif   CoachmarkMediatype = "gif"
)

// CoachmarkPlacement represents the Position of the coachmark relative to its target
type CoachmarkPlacement string

// CoachmarkPlacement values
const (
	CoachmarkPlacementTop         CoachmarkPlacement = "top"
	CoachmarkPlacementTopStart    CoachmarkPlacement = "top-start"
	CoachmarkPlacementTopEnd      CoachmarkPlacement = "top-end"
	CoachmarkPlacementRight       CoachmarkPlacement = "right"
	CoachmarkPlacementRightStart  CoachmarkPlacement = "right-start"
	CoachmarkPlacementRightEnd    CoachmarkPlacement = "right-end"
	CoachmarkPlacementBottom      CoachmarkPlacement = "bottom"
	CoachmarkPlacementBottomStart CoachmarkPlacement = "bottom-start"
	CoachmarkPlacementBottomEnd   CoachmarkPlacement = "bottom-end"
	CoachmarkPlacementLeft        CoachmarkPlacement = "left"
	CoachmarkPlacementLeftStart   CoachmarkPlacement = "left-start"
	CoachmarkPlacementLeftEnd     CoachmarkPlacement = "left-end"
)

// spectrumCoachmark represents an sp-coachmark component
type spectrumCoachmark struct {
	app.Compo
	*styler[*spectrumCoachmark]
	*classer[*spectrumCoachmark]
	*ider[*spectrumCoachmark]

	// Properties
	// The type of asset to represent
	PropAsset CoachmarkAsset
	// Current step in a multi-step tour
	PropCurrentstep float64
	// Whether the coachmark has an asset
	PropHasasset bool
	// Type of media to display
	PropMediatype CoachmarkMediatype
	// Array of modifier key labels (e.g., 'Shift', 'Alt', 'Cmd') that can be used with the shortcut key
	PropModifierkeys []string
	// Whether the coachmark is visible or not
	PropOpen bool
	// Position of the coachmark relative to its target
	PropPlacement CoachmarkPlacement
	// Text for the primary call-to-action button
	PropPrimarycta string
	// Text for the secondary call-to-action button
	PropSecondarycta string
	// The primary key used to trigger an interaction
	PropShortcutkey string
	// URL for the image or media to display
	PropSrc string
	// Whether to show the tip/arrow pointing to the target
	PropTip bool
	// Total number of steps in a multi-step tour
	PropTotalsteps float64

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropActionsSlot   app.UI
	PropAssetSlot     app.UI
	PropContentSlot   app.UI
	PropTitleSlot     app.UI
	PropStepCountSlot app.UI

	// Event handlers
	PropOnPrimary   app.EventHandler
	PropOnSecondary app.EventHandler
}

// ICoachmark is the interface for sp-coachmark component methods
type ICoachmark interface {
	app.UI
	Styler[ICoachmark]
	Classer[ICoachmark]
	Ider[ICoachmark]
	Asset(CoachmarkAsset) ICoachmark
	AssetFile() ICoachmark
	AssetFolder() ICoachmark
	Currentstep(float64) ICoachmark
	Hasasset(bool) ICoachmark
	SetHasasset() ICoachmark
	Mediatype(CoachmarkMediatype) ICoachmark
	MediatypeImage() ICoachmark
	MediatypeGif() ICoachmark
	Modifierkeys([]string) ICoachmark
	Open(bool) ICoachmark
	SetOpen() ICoachmark
	Placement(CoachmarkPlacement) ICoachmark
	PlacementTop() ICoachmark
	PlacementTopStart() ICoachmark
	PlacementTopEnd() ICoachmark
	PlacementRight() ICoachmark
	PlacementRightStart() ICoachmark
	PlacementRightEnd() ICoachmark
	PlacementBottom() ICoachmark
	PlacementBottomStart() ICoachmark
	PlacementBottomEnd() ICoachmark
	PlacementLeft() ICoachmark
	PlacementLeftStart() ICoachmark
	PlacementLeftEnd() ICoachmark
	Primarycta(string) ICoachmark
	Secondarycta(string) ICoachmark
	Shortcutkey(string) ICoachmark
	Src(string) ICoachmark
	Tip(bool) ICoachmark
	SetTip() ICoachmark
	Totalsteps(float64) ICoachmark

	Body(...app.UI) ICoachmark
	AddToBody(app.UI) ICoachmark
	Text(string) ICoachmark

	Actions(app.UI) ICoachmark
	AssetContent(app.UI) ICoachmark
	Content(app.UI) ICoachmark
	Title(app.UI) ICoachmark
	StepCount(app.UI) ICoachmark

	OnPrimary(app.EventHandler) ICoachmark
	OnSecondary(app.EventHandler) ICoachmark
}

// Coachmark A temporary message that educates users through new or unfamiliar product experiences. Coachmarks can be chained into a sequence to form a tour.
func Coachmark() ICoachmark {
	element := &spectrumCoachmark{
		PropCurrentstep:  0,
		PropHasasset:     false,
		PropModifierkeys: []string{},
		PropOpen:         false,
		PropPlacement:    CoachmarkPlacementRight,
		PropTip:          false,
		PropTotalsteps:   0,
		PropBody:         []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Asset The type of asset to represent
func (c *spectrumCoachmark) Asset(asset CoachmarkAsset) ICoachmark {
	c.PropAsset = asset
	return c
}

func (c *spectrumCoachmark) AssetFile() ICoachmark {
	return c.Asset(CoachmarkAssetFile)
}
func (c *spectrumCoachmark) AssetFolder() ICoachmark {
	return c.Asset(CoachmarkAssetFolder)
}

// Currentstep Current step in a multi-step tour
func (c *spectrumCoachmark) Currentstep(currentStep float64) ICoachmark {
	c.PropCurrentstep = currentStep
	return c
}

// Hasasset Whether the coachmark has an asset
func (c *spectrumCoachmark) Hasasset(hasAsset bool) ICoachmark {
	c.PropHasasset = hasAsset
	return c
}

func (c *spectrumCoachmark) SetHasasset() ICoachmark {
	return c.Hasasset(true)
}

// Mediatype Type of media to display
func (c *spectrumCoachmark) Mediatype(mediaType CoachmarkMediatype) ICoachmark {
	c.PropMediatype = mediaType
	return c
}

func (c *spectrumCoachmark) MediatypeImage() ICoachmark {
	return c.Mediatype(CoachmarkMediatypeImage)
}
func (c *spectrumCoachmark) MediatypeGif() ICoachmark {
	return c.Mediatype(CoachmarkMediatypeGif)
}

// Modifierkeys Array of modifier key labels (e.g., 'Shift', 'Alt', 'Cmd') that can be used with the shortcut key
func (c *spectrumCoachmark) Modifierkeys(modifierKeys []string) ICoachmark {
	c.PropModifierkeys = modifierKeys
	return c
}

// Open Whether the coachmark is visible or not
func (c *spectrumCoachmark) Open(open bool) ICoachmark {
	c.PropOpen = open
	return c
}

func (c *spectrumCoachmark) SetOpen() ICoachmark {
	return c.Open(true)
}

// Placement Position of the coachmark relative to its target
func (c *spectrumCoachmark) Placement(placement CoachmarkPlacement) ICoachmark {
	c.PropPlacement = placement
	return c
}

func (c *spectrumCoachmark) PlacementTop() ICoachmark {
	return c.Placement(CoachmarkPlacementTop)
}
func (c *spectrumCoachmark) PlacementTopStart() ICoachmark {
	return c.Placement(CoachmarkPlacementTopStart)
}
func (c *spectrumCoachmark) PlacementTopEnd() ICoachmark {
	return c.Placement(CoachmarkPlacementTopEnd)
}
func (c *spectrumCoachmark) PlacementRight() ICoachmark {
	return c.Placement(CoachmarkPlacementRight)
}
func (c *spectrumCoachmark) PlacementRightStart() ICoachmark {
	return c.Placement(CoachmarkPlacementRightStart)
}
func (c *spectrumCoachmark) PlacementRightEnd() ICoachmark {
	return c.Placement(CoachmarkPlacementRightEnd)
}
func (c *spectrumCoachmark) PlacementBottom() ICoachmark {
	return c.Placement(CoachmarkPlacementBottom)
}
func (c *spectrumCoachmark) PlacementBottomStart() ICoachmark {
	return c.Placement(CoachmarkPlacementBottomStart)
}
func (c *spectrumCoachmark) PlacementBottomEnd() ICoachmark {
	return c.Placement(CoachmarkPlacementBottomEnd)
}
func (c *spectrumCoachmark) PlacementLeft() ICoachmark {
	return c.Placement(CoachmarkPlacementLeft)
}
func (c *spectrumCoachmark) PlacementLeftStart() ICoachmark {
	return c.Placement(CoachmarkPlacementLeftStart)
}
func (c *spectrumCoachmark) PlacementLeftEnd() ICoachmark {
	return c.Placement(CoachmarkPlacementLeftEnd)
}

// Primarycta Text for the primary call-to-action button
func (c *spectrumCoachmark) Primarycta(primaryCta string) ICoachmark {
	c.PropPrimarycta = primaryCta
	return c
}

// Secondarycta Text for the secondary call-to-action button
func (c *spectrumCoachmark) Secondarycta(secondaryCta string) ICoachmark {
	c.PropSecondarycta = secondaryCta
	return c
}

// Shortcutkey The primary key used to trigger an interaction
func (c *spectrumCoachmark) Shortcutkey(shortcutKey string) ICoachmark {
	c.PropShortcutkey = shortcutKey
	return c
}

// Src URL for the image or media to display
func (c *spectrumCoachmark) Src(src string) ICoachmark {
	c.PropSrc = src
	return c
}

// Tip Whether to show the tip/arrow pointing to the target
func (c *spectrumCoachmark) Tip(tip bool) ICoachmark {
	c.PropTip = tip
	return c
}

func (c *spectrumCoachmark) SetTip() ICoachmark {
	return c.Tip(true)
}

// Totalsteps Total number of steps in a multi-step tour
func (c *spectrumCoachmark) Totalsteps(totalSteps float64) ICoachmark {
	c.PropTotalsteps = totalSteps
	return c
}

// Body sets the content for the default slot
func (c *spectrumCoachmark) Body(elements ...app.UI) ICoachmark {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumCoachmark) AddToBody(element app.UI) ICoachmark {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumCoachmark) Text(text string) ICoachmark {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// An sp-action-menu element outlining actions related to the tour (e.g., 'Skip tour', 'Restart tour')
func (c *spectrumCoachmark) Actions(content app.UI) ICoachmark {
	c.PropActionsSlot = content

	return c
}

// Custom media content to display in the coachmark
func (c *spectrumCoachmark) AssetContent(content app.UI) ICoachmark {
	c.PropAssetSlot = content

	return c
}

// The main content of the coachmark
func (c *spectrumCoachmark) Content(content app.UI) ICoachmark {
	c.PropContentSlot = content

	return c
}

// The title or heading of the coachmark
func (c *spectrumCoachmark) Title(content app.UI) ICoachmark {
	c.PropTitleSlot = content

	return c
}

// Override the default pagination display with custom content
func (c *spectrumCoachmark) StepCount(content app.UI) ICoachmark {
	c.PropStepCountSlot = content

	return c
}

// Announces that the primary button has been clicked
func (c *spectrumCoachmark) OnPrimary(handler app.EventHandler) ICoachmark {
	c.PropOnPrimary = handler

	return c
}

// Announces that the secondary button has been clicked
func (c *spectrumCoachmark) OnSecondary(handler app.EventHandler) ICoachmark {
	c.PropOnSecondary = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumCoachmark) Style(key, format string, values ...any) ICoachmark {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumCoachmark) Styles(styles map[string]string) ICoachmark {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumCoachmark) Class(class string) ICoachmark {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumCoachmark) Classes(classes ...string) ICoachmark {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumCoachmark) Id(id string) ICoachmark {
	return c.ider.Id(id)
}

// Render renders the sp-coachmark component
func (c *spectrumCoachmark) Render() app.UI {
	element := app.Elem("sp-coachmark")

	// Set attributes
	if c.PropAsset != "" {
		element = element.Attr("asset", string(c.PropAsset))
	}
	if c.PropCurrentstep != 0 {
		element = element.Attr("currentStep", c.PropCurrentstep)
	}
	if c.PropHasasset {
		element = element.Attr("hasAsset", true)
	}
	if c.PropMediatype != "" {
		element = element.Attr("mediaType", string(c.PropMediatype))
	}
	if len(c.PropModifierkeys) > 0 {
		element = element.Attr("modifierKeys", c.PropModifierkeys)
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropPlacement != "" {
		element = element.Attr("placement", string(c.PropPlacement))
	}
	if c.PropPrimarycta != "" {
		element = element.Attr("primaryCta", c.PropPrimarycta)
	}
	if c.PropSecondarycta != "" {
		element = element.Attr("secondaryCta", c.PropSecondarycta)
	}
	if c.PropShortcutkey != "" {
		element = element.Attr("shortcutKey", c.PropShortcutkey)
	}
	if c.PropSrc != "" {
		element = element.Attr("src", c.PropSrc)
	}
	if c.PropTip {
		element = element.Attr("tip", true)
	}
	if c.PropTotalsteps != 0 {
		element = element.Attr("totalSteps", c.PropTotalsteps)
	}

	// Add event handlers
	if c.PropOnPrimary != nil {
		element = element.On("primary", c.PropOnPrimary)
	}
	if c.PropOnSecondary != nil {
		element = element.On("secondary", c.PropOnSecondary)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add actions slot
	if c.PropActionsSlot != nil {
		slotElem := c.PropActionsSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("actions")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "actions").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add asset slot
	if c.PropAssetSlot != nil {
		slotElem := c.PropAssetSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("asset")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "asset").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add content slot
	if c.PropContentSlot != nil {
		slotElem := c.PropContentSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("content")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "content").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add title slot
	if c.PropTitleSlot != nil {
		slotElem := c.PropTitleSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("title")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "title").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add step-count slot
	if c.PropStepCountSlot != nil {
		slotElem := c.PropStepCountSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("step-count")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "step-count").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
