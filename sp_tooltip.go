// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// TooltipPlacement represents the Position of the tooltip relative to its target
type TooltipPlacement string

// TooltipPlacement values
const (
	TooltipPlacementTop         TooltipPlacement = "top"
	TooltipPlacementTopStart    TooltipPlacement = "top-start"
	TooltipPlacementTopEnd      TooltipPlacement = "top-end"
	TooltipPlacementRight       TooltipPlacement = "right"
	TooltipPlacementRightStart  TooltipPlacement = "right-start"
	TooltipPlacementRightEnd    TooltipPlacement = "right-end"
	TooltipPlacementBottom      TooltipPlacement = "bottom"
	TooltipPlacementBottomStart TooltipPlacement = "bottom-start"
	TooltipPlacementBottomEnd   TooltipPlacement = "bottom-end"
	TooltipPlacementLeft        TooltipPlacement = "left"
	TooltipPlacementLeftStart   TooltipPlacement = "left-start"
	TooltipPlacementLeftEnd     TooltipPlacement = "left-end"
)

// TooltipVariant represents the Visual variant of the tooltip
type TooltipVariant string

// TooltipVariant values
const (
	TooltipVariantInfo     TooltipVariant = "info"
	TooltipVariantPositive TooltipVariant = "positive"
	TooltipVariantNegative TooltipVariant = "negative"
)

// spectrumTooltip represents an sp-tooltip component
type spectrumTooltip struct {
	app.Compo
	*styler[*spectrumTooltip]
	*classer[*spectrumTooltip]
	*ider[*spectrumTooltip]

	// Properties
	// Distance between the tooltip and its target element
	PropOffset float64
	// Whether the tooltip is currently visible
	PropOpen bool
	// Position of the tooltip relative to its target
	PropPlacement TooltipPlacement
	// Automatically bind to the parent element of the assigned slot or the parent element of the sp-tooltip. Without this, you must provide your own overlay-trigger.
	PropSelfManaged bool
	// Distance from the edge of the tooltip to the tip
	PropTipPadding float64
	// Visual variant of the tooltip
	PropVariant TooltipVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropIconSlot app.UI

	// Event handlers
	PropOnTransitionend app.EventHandler
}

// ITooltip is the interface for sp-tooltip component methods
type ITooltip interface {
	app.UI
	Styler[ITooltip]
	Classer[ITooltip]
	Ider[ITooltip]
	Offset(float64) ITooltip
	Open(bool) ITooltip
	SetOpen() ITooltip
	Placement(TooltipPlacement) ITooltip
	PlacementTop() ITooltip
	PlacementTopStart() ITooltip
	PlacementTopEnd() ITooltip
	PlacementRight() ITooltip
	PlacementRightStart() ITooltip
	PlacementRightEnd() ITooltip
	PlacementBottom() ITooltip
	PlacementBottomStart() ITooltip
	PlacementBottomEnd() ITooltip
	PlacementLeft() ITooltip
	PlacementLeftStart() ITooltip
	PlacementLeftEnd() ITooltip
	SelfManaged(bool) ITooltip
	SetSelfManaged() ITooltip
	TipPadding(float64) ITooltip
	Variant(TooltipVariant) ITooltip
	VariantInfo() ITooltip
	VariantPositive() ITooltip
	VariantNegative() ITooltip

	Body(...app.UI) ITooltip
	AddToBody(app.UI) ITooltip
	Text(string) ITooltip

	Icon(app.UI) ITooltip

	OnTransitionend(app.EventHandler) ITooltip
}

// Tooltip Tooltips allow users to get contextual help or information about specific components when hovering or focusing on them.
func Tooltip() ITooltip {
	element := &spectrumTooltip{
		PropOffset:      0,
		PropOpen:        false,
		PropPlacement:   TooltipPlacementTop,
		PropSelfManaged: false,
		PropTipPadding:  0,
		PropVariant:     "",
		PropBody:        []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Offset Distance between the tooltip and its target element
func (c *spectrumTooltip) Offset(offset float64) ITooltip {
	c.PropOffset = offset
	return c
}

// Open Whether the tooltip is currently visible
func (c *spectrumTooltip) Open(open bool) ITooltip {
	c.PropOpen = open
	return c
}

func (c *spectrumTooltip) SetOpen() ITooltip {
	return c.Open(true)
}

// Placement Position of the tooltip relative to its target
func (c *spectrumTooltip) Placement(placement TooltipPlacement) ITooltip {
	c.PropPlacement = placement
	return c
}

func (c *spectrumTooltip) PlacementTop() ITooltip {
	return c.Placement(TooltipPlacementTop)
}
func (c *spectrumTooltip) PlacementTopStart() ITooltip {
	return c.Placement(TooltipPlacementTopStart)
}
func (c *spectrumTooltip) PlacementTopEnd() ITooltip {
	return c.Placement(TooltipPlacementTopEnd)
}
func (c *spectrumTooltip) PlacementRight() ITooltip {
	return c.Placement(TooltipPlacementRight)
}
func (c *spectrumTooltip) PlacementRightStart() ITooltip {
	return c.Placement(TooltipPlacementRightStart)
}
func (c *spectrumTooltip) PlacementRightEnd() ITooltip {
	return c.Placement(TooltipPlacementRightEnd)
}
func (c *spectrumTooltip) PlacementBottom() ITooltip {
	return c.Placement(TooltipPlacementBottom)
}
func (c *spectrumTooltip) PlacementBottomStart() ITooltip {
	return c.Placement(TooltipPlacementBottomStart)
}
func (c *spectrumTooltip) PlacementBottomEnd() ITooltip {
	return c.Placement(TooltipPlacementBottomEnd)
}
func (c *spectrumTooltip) PlacementLeft() ITooltip {
	return c.Placement(TooltipPlacementLeft)
}
func (c *spectrumTooltip) PlacementLeftStart() ITooltip {
	return c.Placement(TooltipPlacementLeftStart)
}
func (c *spectrumTooltip) PlacementLeftEnd() ITooltip {
	return c.Placement(TooltipPlacementLeftEnd)
}

// SelfManaged Automatically bind to the parent element of the assigned slot or the parent element of the sp-tooltip. Without this, you must provide your own overlay-trigger.
func (c *spectrumTooltip) SelfManaged(selfManaged bool) ITooltip {
	c.PropSelfManaged = selfManaged
	return c
}

func (c *spectrumTooltip) SetSelfManaged() ITooltip {
	return c.SelfManaged(true)
}

// TipPadding Distance from the edge of the tooltip to the tip
func (c *spectrumTooltip) TipPadding(tipPadding float64) ITooltip {
	c.PropTipPadding = tipPadding
	return c
}

// Variant Visual variant of the tooltip
func (c *spectrumTooltip) Variant(variant TooltipVariant) ITooltip {
	c.PropVariant = variant
	return c
}

func (c *spectrumTooltip) VariantInfo() ITooltip {
	return c.Variant(TooltipVariantInfo)
}
func (c *spectrumTooltip) VariantPositive() ITooltip {
	return c.Variant(TooltipVariantPositive)
}
func (c *spectrumTooltip) VariantNegative() ITooltip {
	return c.Variant(TooltipVariantNegative)
}

// Body sets the content for the default slot
func (c *spectrumTooltip) Body(elements ...app.UI) ITooltip {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTooltip) AddToBody(element app.UI) ITooltip {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTooltip) Text(text string) ITooltip {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// The icon element appearing at the start of the label
func (c *spectrumTooltip) Icon(content app.UI) ITooltip {
	c.PropIconSlot = content

	return c
}

// Fired when a transition completes
func (c *spectrumTooltip) OnTransitionend(handler app.EventHandler) ITooltip {
	c.PropOnTransitionend = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumTooltip) Style(key, format string, values ...any) ITooltip {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTooltip) Styles(styles map[string]string) ITooltip {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTooltip) Class(class string) ITooltip {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTooltip) Classes(classes ...string) ITooltip {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTooltip) Id(id string) ITooltip {
	return c.ider.Id(id)
}

// Render renders the sp-tooltip component
func (c *spectrumTooltip) Render() app.UI {
	element := app.Elem("sp-tooltip")

	// Set attributes
	if c.PropOffset != 0 {
		element = element.Attr("offset", c.PropOffset)
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropPlacement != "" {
		element = element.Attr("placement", string(c.PropPlacement))
	}
	if c.PropSelfManaged {
		element = element.Attr("self-managed", true)
	}
	if c.PropTipPadding != 0 {
		element = element.Attr("tip-padding", c.PropTipPadding)
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnTransitionend != nil {
		element = element.On("transitionend", c.PropOnTransitionend)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add icon slot
	if c.PropIconSlot != nil {
		slotElem := c.PropIconSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("icon")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "icon").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
