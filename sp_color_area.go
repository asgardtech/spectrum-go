// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumColorArea represents an sp-color-area component
type spectrumColorArea struct {
	app.Compo
	*styler[*spectrumColorArea]
	*classer[*spectrumColorArea]
	*ider[*spectrumColorArea]

	// Properties
	// The current color value in various supported formats (Hex, HSV, HSL, RGB, color strings)
	PropColor string
	// Disables the color area interaction
	PropDisabled bool
	// Indicates whether the color area has focus
	PropFocused bool
	// The hue value to use for the color area's gradient
	PropHue float64
	// Accessible label for the x-axis of the color area
	PropLabelX string
	// Accessible label for the y-axis of the color area
	PropLabelY string
	// The increment amount for keyboard navigation
	PropStep float64
	// The x-coordinate value (typically represents saturation)
	PropX float64
	// The y-coordinate value (typically represents luminosity)
	PropY float64

	// Content slots
	PropGradientSlot app.UI

	// Event handlers
	PropOnChange app.EventHandler
	PropOnInput  app.EventHandler
}

// IColorArea is the interface for sp-color-area component methods
type IColorArea interface {
	app.UI
	Styler[IColorArea]
	Classer[IColorArea]
	Ider[IColorArea]
	Color(string) IColorArea
	Disabled(bool) IColorArea
	SetDisabled() IColorArea
	Focused(bool) IColorArea
	SetFocused() IColorArea
	Hue(float64) IColorArea
	LabelX(string) IColorArea
	LabelY(string) IColorArea
	Step(float64) IColorArea
	X(float64) IColorArea
	Y(float64) IColorArea

	Gradient(app.UI) IColorArea

	OnChange(app.EventHandler) IColorArea
	OnInput(app.EventHandler) IColorArea
}

// ColorArea An sp-color-area allows users to visually select two properties of a color simultaneously. It's commonly used together with a color slider or color wheel.
func ColorArea() IColorArea {
	element := &spectrumColorArea{
		PropDisabled: false,
		PropFocused:  false,
		PropHue:      0,
		PropLabelX:   "saturation",
		PropLabelY:   "luminosity",
		PropStep:     0.01,
		PropX:        0,
		PropY:        0,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Color The current color value in various supported formats (Hex, HSV, HSL, RGB, color strings)
func (c *spectrumColorArea) Color(color string) IColorArea {
	c.PropColor = color
	return c
}

// Disabled Disables the color area interaction
func (c *spectrumColorArea) Disabled(disabled bool) IColorArea {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumColorArea) SetDisabled() IColorArea {
	return c.Disabled(true)
}

// Focused Indicates whether the color area has focus
func (c *spectrumColorArea) Focused(focused bool) IColorArea {
	c.PropFocused = focused
	return c
}

func (c *spectrumColorArea) SetFocused() IColorArea {
	return c.Focused(true)
}

// Hue The hue value to use for the color area's gradient
func (c *spectrumColorArea) Hue(hue float64) IColorArea {
	c.PropHue = hue
	return c
}

// LabelX Accessible label for the x-axis of the color area
func (c *spectrumColorArea) LabelX(labelX string) IColorArea {
	c.PropLabelX = labelX
	return c
}

// LabelY Accessible label for the y-axis of the color area
func (c *spectrumColorArea) LabelY(labelY string) IColorArea {
	c.PropLabelY = labelY
	return c
}

// Step The increment amount for keyboard navigation
func (c *spectrumColorArea) Step(step float64) IColorArea {
	c.PropStep = step
	return c
}

// X The x-coordinate value (typically represents saturation)
func (c *spectrumColorArea) X(x float64) IColorArea {
	c.PropX = x
	return c
}

// Y The y-coordinate value (typically represents luminosity)
func (c *spectrumColorArea) Y(y float64) IColorArea {
	c.PropY = y
	return c
}

// A custom gradient visually outlining the available color values
func (c *spectrumColorArea) Gradient(content app.UI) IColorArea {
	c.PropGradientSlot = content

	return c
}

// An alteration to the value of the Color Area has been committed by the user
func (c *spectrumColorArea) OnChange(handler app.EventHandler) IColorArea {
	c.PropOnChange = handler

	return c
}

// The value of the Color Area has changed
func (c *spectrumColorArea) OnInput(handler app.EventHandler) IColorArea {
	c.PropOnInput = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumColorArea) Style(key, format string, values ...any) IColorArea {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumColorArea) Styles(styles map[string]string) IColorArea {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumColorArea) Class(class string) IColorArea {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumColorArea) Classes(classes ...string) IColorArea {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumColorArea) Id(id string) IColorArea {
	return c.ider.Id(id)
}

// Render renders the sp-color-area component
func (c *spectrumColorArea) Render() app.UI {
	element := app.Elem("sp-color-area")

	// Set attributes
	if c.PropColor != "" {
		element = element.Attr("color", c.PropColor)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropFocused {
		element = element.Attr("focused", true)
	}
	if c.PropHue != 0 {
		element = element.Attr("hue", c.PropHue)
	}
	if c.PropLabelX != "" {
		element = element.Attr("label-x", c.PropLabelX)
	}
	if c.PropLabelY != "" {
		element = element.Attr("label-y", c.PropLabelY)
	}
	if c.PropStep != 0 {
		element = element.Attr("step", c.PropStep)
	}
	if c.PropX != 0 {
		element = element.Attr("x", c.PropX)
	}
	if c.PropY != 0 {
		element = element.Attr("y", c.PropY)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnInput != nil {
		element = element.On("input", c.PropOnInput)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add gradient slot
	if c.PropGradientSlot != nil {
		slotElem := c.PropGradientSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("gradient")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "gradient").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
