// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumButtonGroup represents an sp-button-group component
type spectrumButtonGroup struct {
	app.Compo
	*styler[*spectrumButtonGroup]
	*classer[*spectrumButtonGroup]
	*ider[*spectrumButtonGroup]

	// Properties
	// Use vertical orientation when horizontal space is limited
	PropVertical bool

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// IButtonGroup is the interface for sp-button-group component methods
type IButtonGroup interface {
	app.UI
	Styler[IButtonGroup]
	Classer[IButtonGroup]
	Ider[IButtonGroup]
	Vertical(bool) IButtonGroup
	SetVertical() IButtonGroup

	Body(...app.UI) IButtonGroup
	AddToBody(app.UI) IButtonGroup
	Text(string) IButtonGroup
}

// ButtonGroup A sp-button-group delivers a set of buttons in horizontal or vertical orientation while ensuring the appropriate spacing between those buttons.
func ButtonGroup() IButtonGroup {
	element := &spectrumButtonGroup{
		PropVertical: false,
		PropBody:     []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Vertical Use vertical orientation when horizontal space is limited
func (c *spectrumButtonGroup) Vertical(vertical bool) IButtonGroup {
	c.PropVertical = vertical
	return c
}

func (c *spectrumButtonGroup) SetVertical() IButtonGroup {
	return c.Vertical(true)
}

// Body sets the content for the default slot
func (c *spectrumButtonGroup) Body(elements ...app.UI) IButtonGroup {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumButtonGroup) AddToBody(element app.UI) IButtonGroup {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumButtonGroup) Text(text string) IButtonGroup {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumButtonGroup) Style(key, format string, values ...any) IButtonGroup {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumButtonGroup) Styles(styles map[string]string) IButtonGroup {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumButtonGroup) Class(class string) IButtonGroup {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumButtonGroup) Classes(classes ...string) IButtonGroup {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumButtonGroup) Id(id string) IButtonGroup {
	return c.ider.Id(id)
}

// Render renders the sp-button-group component
func (c *spectrumButtonGroup) Render() app.UI {
	element := app.Elem("sp-button-group")

	// Set attributes
	if c.PropVertical {
		element = element.Attr("vertical", true)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
