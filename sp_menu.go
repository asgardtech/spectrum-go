// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// MenuSelects represents the How the menu allows selection of its items: - undefined (default): no selection is allowed - inherit: the selection behavior is managed from an ancestor - single: only one item can be selected at a time - multiple: multiple items can be selected
type MenuSelects string

// MenuSelects values
const (
	MenuSelectsInherit  MenuSelects = "inherit"
	MenuSelectsSingle   MenuSelects = "single"
	MenuSelectsMultiple MenuSelects = "multiple"
)

// MenuSize represents the The size of the menu
type MenuSize string

// MenuSize values
const (
	MenuSizeS  MenuSize = "s"
	MenuSizeM  MenuSize = "m"
	MenuSizeL  MenuSize = "l"
	MenuSizeXl MenuSize = "xl"
)

// spectrumMenu represents an sp-menu component
type spectrumMenu struct {
	app.Compo
	*styler[*spectrumMenu]
	*classer[*spectrumMenu]
	*ider[*spectrumMenu]

	// Properties
	// Whether menu should be ignored by roving tabindex controller
	PropIgnore bool
	// Label of the menu for accessibility
	PropLabel string
	// How the menu allows selection of its items: - undefined (default): no selection is allowed - inherit: the selection behavior is managed from an ancestor - single: only one item can be selected at a time - multiple: multiple items can be selected
	PropSelects MenuSelects
	// The size of the menu
	PropSize MenuSize
	// Value of the selected item(s)
	PropValue string
	// Separator for multiple values when selects is multiple
	PropValueSeparator string

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Child components
	PropChildren []app.UI

	// Event handlers
	PropOnChange app.EventHandler
	PropOnClose  app.EventHandler
}

// IMenu is the interface for sp-menu component methods
type IMenu interface {
	app.UI
	Styler[IMenu]
	Classer[IMenu]
	Ider[IMenu]
	Ignore(bool) IMenu
	SetIgnore() IMenu
	Label(string) IMenu
	Selects(MenuSelects) IMenu
	SelectsInherit() IMenu
	SelectsSingle() IMenu
	SelectsMultiple() IMenu
	Size(MenuSize) IMenu
	SizeS() IMenu
	SizeM() IMenu
	SizeL() IMenu
	SizeXl() IMenu
	Value(string) IMenu
	ValueSeparator(string) IMenu

	Body(...app.UI) IMenu
	AddToBody(app.UI) IMenu
	Text(string) IMenu

	Children(...app.UI) IMenu
	AddChild(app.UI) IMenu

	OnChange(app.EventHandler) IMenu
	OnClose(app.EventHandler) IMenu
}

// Menu A menu is used for creating a menu list. The various elements inside a menu are given as menu-group, menu-item, or menu-divider. Often a menu element will appear in a popover element so that it displays as a toggling menu.
func Menu() IMenu {
	element := &spectrumMenu{
		PropIgnore:         false,
		PropLabel:          "",
		PropSize:           MenuSizeM,
		PropValue:          "",
		PropValueSeparator: ",",
		PropBody:           []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Ignore Whether menu should be ignored by roving tabindex controller
func (c *spectrumMenu) Ignore(ignore bool) IMenu {
	c.PropIgnore = ignore
	return c
}

func (c *spectrumMenu) SetIgnore() IMenu {
	return c.Ignore(true)
}

// Label Label of the menu for accessibility
func (c *spectrumMenu) Label(label string) IMenu {
	c.PropLabel = label
	return c
}

// Selects How the menu allows selection of its items: - undefined (default): no selection is allowed - inherit: the selection behavior is managed from an ancestor - single: only one item can be selected at a time - multiple: multiple items can be selected
func (c *spectrumMenu) Selects(selects MenuSelects) IMenu {
	c.PropSelects = selects
	return c
}

func (c *spectrumMenu) SelectsInherit() IMenu {
	return c.Selects(MenuSelectsInherit)
}
func (c *spectrumMenu) SelectsSingle() IMenu {
	return c.Selects(MenuSelectsSingle)
}
func (c *spectrumMenu) SelectsMultiple() IMenu {
	return c.Selects(MenuSelectsMultiple)
}

// Size The size of the menu
func (c *spectrumMenu) Size(size MenuSize) IMenu {
	c.PropSize = size
	return c
}

func (c *spectrumMenu) SizeS() IMenu {
	return c.Size(MenuSizeS)
}
func (c *spectrumMenu) SizeM() IMenu {
	return c.Size(MenuSizeM)
}
func (c *spectrumMenu) SizeL() IMenu {
	return c.Size(MenuSizeL)
}
func (c *spectrumMenu) SizeXl() IMenu {
	return c.Size(MenuSizeXl)
}

// Value Value of the selected item(s)
func (c *spectrumMenu) Value(value string) IMenu {
	c.PropValue = value
	return c
}

// ValueSeparator Separator for multiple values when selects is multiple
func (c *spectrumMenu) ValueSeparator(valueSeparator string) IMenu {
	c.PropValueSeparator = valueSeparator
	return c
}

// Body sets the content for the default slot
func (c *spectrumMenu) Body(elements ...app.UI) IMenu {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumMenu) AddToBody(element app.UI) IMenu {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumMenu) Text(text string) IMenu {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Children sets the child components
func (c *spectrumMenu) Children(children ...app.UI) IMenu {
	c.PropChildren = children

	return c
}

// AddChild adds a child component
func (c *spectrumMenu) AddChild(child app.UI) IMenu {
	c.PropChildren = append(c.PropChildren, child)

	return c
}

// Announces that the value of the element has changed
func (c *spectrumMenu) OnChange(handler app.EventHandler) IMenu {
	c.PropOnChange = handler

	return c
}

// Fired when the menu should be closed, typically after item selection
func (c *spectrumMenu) OnClose(handler app.EventHandler) IMenu {
	c.PropOnClose = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumMenu) Style(key, format string, values ...any) IMenu {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumMenu) Styles(styles map[string]string) IMenu {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumMenu) Class(class string) IMenu {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumMenu) Classes(classes ...string) IMenu {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumMenu) Id(id string) IMenu {
	return c.ider.Id(id)
}

// Render renders the sp-menu component
func (c *spectrumMenu) Render() app.UI {
	element := app.Elem("sp-menu")

	// Set attributes
	if c.PropIgnore {
		element = element.Attr("ignore", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropSelects != "" {
		element = element.Attr("selects", string(c.PropSelects))
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}
	if c.PropValueSeparator != "" {
		element = element.Attr("value-separator", c.PropValueSeparator)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add children if no default slot content is provided
	if len(c.PropChildren) > 0 {
		// If there's a default slot, only add children if the default slot is empty
		if len(c.PropBody) == 0 {
			for _, child := range c.PropChildren {
				slotElements = append(slotElements, child)
			}
		}
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
