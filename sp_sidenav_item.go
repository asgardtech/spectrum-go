// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumSidenavItem represents an sp-sidenav-item component
type spectrumSidenavItem struct {
	app.Compo
	*styler[*spectrumSidenavItem]
	*classer[*spectrumSidenavItem]
	*ider[*spectrumSidenavItem]

	// Properties
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Causes the browser to treat the linked URL as a download
	PropDownload string
	// Whether the child items are visible
	PropExpanded bool
	// The URL that the hyperlink points to
	PropHref string
	// An accessible label describing the component. Applied to aria-label but not visually rendered
	PropLabel string
	// How much of the referrer to send when following the link
	PropReferrerpolicy string
	// The relationship of the linked URL as space-separated link types
	PropRel string
	// Whether this item is currently selected
	PropSelected bool
	// The tab index to apply to this control
	PropTabindex float64
	// Where to display the linked URL (e.g., '_blank', '_self')
	PropTarget string
	// The value of this item when selected
	PropValue string

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropIconSlot app.UI

	// Event handlers
	PropOnClick app.EventHandler
}

// ISidenavItem is the interface for sp-sidenav-item component methods
type ISidenavItem interface {
	app.UI
	Styler[ISidenavItem]
	Classer[ISidenavItem]
	Ider[ISidenavItem]
	Disabled(bool) ISidenavItem
	SetDisabled() ISidenavItem
	Download(string) ISidenavItem
	Expanded(bool) ISidenavItem
	SetExpanded() ISidenavItem
	Href(string) ISidenavItem
	Label(string) ISidenavItem
	Referrerpolicy(string) ISidenavItem
	Rel(string) ISidenavItem
	Selected(bool) ISidenavItem
	SetSelected() ISidenavItem
	Tabindex(float64) ISidenavItem
	Target(string) ISidenavItem
	Value(string) ISidenavItem

	Body(...app.UI) ISidenavItem
	AddToBody(app.UI) ISidenavItem
	Text(string) ISidenavItem

	Icon(app.UI) ISidenavItem

	OnClick(app.EventHandler) ISidenavItem
}

// SidenavItem Child item of a sidenav element that can also be a parent for further subdivisions of navigation. Can toggle visibility of child items.
func SidenavItem() ISidenavItem {
	element := &spectrumSidenavItem{
		PropDisabled:       false,
		PropDownload:       "",
		PropExpanded:       false,
		PropHref:           "",
		PropLabel:          "",
		PropReferrerpolicy: "",
		PropRel:            "",
		PropSelected:       false,
		PropTabindex:       0,
		PropTarget:         "",
		PropValue:          "",
		PropBody:           []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumSidenavItem) Disabled(disabled bool) ISidenavItem {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumSidenavItem) SetDisabled() ISidenavItem {
	return c.Disabled(true)
}

// Download Causes the browser to treat the linked URL as a download
func (c *spectrumSidenavItem) Download(download string) ISidenavItem {
	c.PropDownload = download
	return c
}

// Expanded Whether the child items are visible
func (c *spectrumSidenavItem) Expanded(expanded bool) ISidenavItem {
	c.PropExpanded = expanded
	return c
}

func (c *spectrumSidenavItem) SetExpanded() ISidenavItem {
	return c.Expanded(true)
}

// Href The URL that the hyperlink points to
func (c *spectrumSidenavItem) Href(href string) ISidenavItem {
	c.PropHref = href
	return c
}

// Label An accessible label describing the component. Applied to aria-label but not visually rendered
func (c *spectrumSidenavItem) Label(label string) ISidenavItem {
	c.PropLabel = label
	return c
}

// Referrerpolicy How much of the referrer to send when following the link
func (c *spectrumSidenavItem) Referrerpolicy(referrerpolicy string) ISidenavItem {
	c.PropReferrerpolicy = referrerpolicy
	return c
}

// Rel The relationship of the linked URL as space-separated link types
func (c *spectrumSidenavItem) Rel(rel string) ISidenavItem {
	c.PropRel = rel
	return c
}

// Selected Whether this item is currently selected
func (c *spectrumSidenavItem) Selected(selected bool) ISidenavItem {
	c.PropSelected = selected
	return c
}

func (c *spectrumSidenavItem) SetSelected() ISidenavItem {
	return c.Selected(true)
}

// Tabindex The tab index to apply to this control
func (c *spectrumSidenavItem) Tabindex(tabIndex float64) ISidenavItem {
	c.PropTabindex = tabIndex
	return c
}

// Target Where to display the linked URL (e.g., '_blank', '_self')
func (c *spectrumSidenavItem) Target(target string) ISidenavItem {
	c.PropTarget = target
	return c
}

// Value The value of this item when selected
func (c *spectrumSidenavItem) Value(value string) ISidenavItem {
	c.PropValue = value
	return c
}

// Body sets the content for the default slot
func (c *spectrumSidenavItem) Body(elements ...app.UI) ISidenavItem {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumSidenavItem) AddToBody(element app.UI) ISidenavItem {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumSidenavItem) Text(text string) ISidenavItem {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Optional icon to display with the item
func (c *spectrumSidenavItem) Icon(content app.UI) ISidenavItem {
	c.PropIconSlot = content

	return c
}

// Fired when the item is clicked
func (c *spectrumSidenavItem) OnClick(handler app.EventHandler) ISidenavItem {
	c.PropOnClick = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumSidenavItem) Style(key, format string, values ...any) ISidenavItem {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumSidenavItem) Styles(styles map[string]string) ISidenavItem {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumSidenavItem) Class(class string) ISidenavItem {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumSidenavItem) Classes(classes ...string) ISidenavItem {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumSidenavItem) Id(id string) ISidenavItem {
	return c.ider.Id(id)
}

// Render renders the sp-sidenav-item component
func (c *spectrumSidenavItem) Render() app.UI {
	element := app.Elem("sp-sidenav-item")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropDownload != "" {
		element = element.Attr("download", c.PropDownload)
	}
	if c.PropExpanded {
		element = element.Attr("expanded", true)
	}
	if c.PropHref != "" {
		element = element.Attr("href", c.PropHref)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropReferrerpolicy != "" {
		element = element.Attr("referrerpolicy", c.PropReferrerpolicy)
	}
	if c.PropRel != "" {
		element = element.Attr("rel", c.PropRel)
	}
	if c.PropSelected {
		element = element.Attr("selected", true)
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabIndex", c.PropTabindex)
	}
	if c.PropTarget != "" {
		element = element.Attr("target", c.PropTarget)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}

	// Add event handlers
	if c.PropOnClick != nil {
		element = element.On("click", c.PropOnClick)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add icon slot
	if c.PropIconSlot != nil {
		slotElem := c.PropIconSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("icon")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "icon").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
