// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// TabsDirection represents the Direction of the tabs layout
type TabsDirection string

// TabsDirection values
const (
	TabsDirectionHorizontal    TabsDirection = "horizontal"
	TabsDirectionVertical      TabsDirection = "vertical"
	TabsDirectionVerticalRight TabsDirection = "vertical-right"
)

// TabsSize represents the Size of the tabs
type TabsSize string

// TabsSize values
const (
	TabsSizeS  TabsSize = "s"
	TabsSizeM  TabsSize = "m"
	TabsSizeL  TabsSize = "l"
	TabsSizeXl TabsSize = "xl"
)

// spectrumTabs represents an sp-tabs component
type spectrumTabs struct {
	app.Compo
	*styler[*spectrumTabs]
	*classer[*spectrumTabs]
	*ider[*spectrumTabs]

	// Properties
	// Whether to activate a tab on keyboard focus or not
	PropAuto bool
	// The tab items are displayed closer together
	PropCompact bool
	// Direction of the tabs layout
	PropDirection TabsDirection
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Emphasize the selected tab
	PropEmphasized bool
	// Enable scrolling when tabs exceed available space
	PropEnabletabsscroll bool
	// Accessible label for the tabs component
	PropLabel string
	// The tab list is displayed without a border
	PropQuiet bool
	// Value of the currently selected tab
	PropSelected string
	// Size of the tabs
	PropSize TabsSize
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropTabPanelSlot app.UI

	// Event handlers
	PropOnChange app.EventHandler
}

// ITabs is the interface for sp-tabs component methods
type ITabs interface {
	app.UI
	Styler[ITabs]
	Classer[ITabs]
	Ider[ITabs]
	Auto(bool) ITabs
	SetAuto() ITabs
	Compact(bool) ITabs
	SetCompact() ITabs
	Direction(TabsDirection) ITabs
	DirectionHorizontal() ITabs
	DirectionVertical() ITabs
	DirectionVerticalRight() ITabs
	Disabled(bool) ITabs
	SetDisabled() ITabs
	Emphasized(bool) ITabs
	SetEmphasized() ITabs
	Enabletabsscroll(bool) ITabs
	SetEnabletabsscroll() ITabs
	Label(string) ITabs
	Quiet(bool) ITabs
	SetQuiet() ITabs
	Selected(string) ITabs
	Size(TabsSize) ITabs
	SizeS() ITabs
	SizeM() ITabs
	SizeL() ITabs
	SizeXl() ITabs
	Tabindex(float64) ITabs

	Body(...app.UI) ITabs
	AddToBody(app.UI) ITabs
	Text(string) ITabs

	TabPanel(app.UI) ITabs

	OnChange(app.EventHandler) ITabs
}

// Tabs The sp-tabs component displays a list of sp-tab element children as a tablist. It manages tab selection and displays the content of the corresponding sp-tab-panel.
func Tabs() ITabs {
	element := &spectrumTabs{
		PropAuto:             false,
		PropCompact:          false,
		PropDirection:        TabsDirectionHorizontal,
		PropDisabled:         false,
		PropEmphasized:       false,
		PropEnabletabsscroll: false,
		PropLabel:            "",
		PropQuiet:            false,
		PropSelected:         "",
		PropSize:             TabsSizeM,
		PropTabindex:         0,
		PropBody:             []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Auto Whether to activate a tab on keyboard focus or not
func (c *spectrumTabs) Auto(auto bool) ITabs {
	c.PropAuto = auto
	return c
}

func (c *spectrumTabs) SetAuto() ITabs {
	return c.Auto(true)
}

// Compact The tab items are displayed closer together
func (c *spectrumTabs) Compact(compact bool) ITabs {
	c.PropCompact = compact
	return c
}

func (c *spectrumTabs) SetCompact() ITabs {
	return c.Compact(true)
}

// Direction Direction of the tabs layout
func (c *spectrumTabs) Direction(direction TabsDirection) ITabs {
	c.PropDirection = direction
	return c
}

func (c *spectrumTabs) DirectionHorizontal() ITabs {
	return c.Direction(TabsDirectionHorizontal)
}
func (c *spectrumTabs) DirectionVertical() ITabs {
	return c.Direction(TabsDirectionVertical)
}
func (c *spectrumTabs) DirectionVerticalRight() ITabs {
	return c.Direction(TabsDirectionVerticalRight)
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumTabs) Disabled(disabled bool) ITabs {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumTabs) SetDisabled() ITabs {
	return c.Disabled(true)
}

// Emphasized Emphasize the selected tab
func (c *spectrumTabs) Emphasized(emphasized bool) ITabs {
	c.PropEmphasized = emphasized
	return c
}

func (c *spectrumTabs) SetEmphasized() ITabs {
	return c.Emphasized(true)
}

// Enabletabsscroll Enable scrolling when tabs exceed available space
func (c *spectrumTabs) Enabletabsscroll(enableTabsScroll bool) ITabs {
	c.PropEnabletabsscroll = enableTabsScroll
	return c
}

func (c *spectrumTabs) SetEnabletabsscroll() ITabs {
	return c.Enabletabsscroll(true)
}

// Label Accessible label for the tabs component
func (c *spectrumTabs) Label(label string) ITabs {
	c.PropLabel = label
	return c
}

// Quiet The tab list is displayed without a border
func (c *spectrumTabs) Quiet(quiet bool) ITabs {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumTabs) SetQuiet() ITabs {
	return c.Quiet(true)
}

// Selected Value of the currently selected tab
func (c *spectrumTabs) Selected(selected string) ITabs {
	c.PropSelected = selected
	return c
}

// Size Size of the tabs
func (c *spectrumTabs) Size(size TabsSize) ITabs {
	c.PropSize = size
	return c
}

func (c *spectrumTabs) SizeS() ITabs {
	return c.Size(TabsSizeS)
}
func (c *spectrumTabs) SizeM() ITabs {
	return c.Size(TabsSizeM)
}
func (c *spectrumTabs) SizeL() ITabs {
	return c.Size(TabsSizeL)
}
func (c *spectrumTabs) SizeXl() ITabs {
	return c.Size(TabsSizeXl)
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumTabs) Tabindex(tabIndex float64) ITabs {
	c.PropTabindex = tabIndex
	return c
}

// Body sets the content for the default slot
func (c *spectrumTabs) Body(elements ...app.UI) ITabs {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTabs) AddToBody(element app.UI) ITabs {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTabs) Text(text string) ITabs {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Tab Panel elements related to the listed Tab elements
func (c *spectrumTabs) TabPanel(content app.UI) ITabs {
	c.PropTabPanelSlot = content

	return c
}

// The selected Tab child has changed
func (c *spectrumTabs) OnChange(handler app.EventHandler) ITabs {
	c.PropOnChange = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumTabs) Style(key, format string, values ...any) ITabs {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTabs) Styles(styles map[string]string) ITabs {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTabs) Class(class string) ITabs {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTabs) Classes(classes ...string) ITabs {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTabs) Id(id string) ITabs {
	return c.ider.Id(id)
}

// Render renders the sp-tabs component
func (c *spectrumTabs) Render() app.UI {
	element := app.Elem("sp-tabs")

	// Set attributes
	if c.PropAuto {
		element = element.Attr("auto", true)
	}
	if c.PropCompact {
		element = element.Attr("compact", true)
	}
	if c.PropDirection != "" {
		element = element.Attr("direction", string(c.PropDirection))
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropEmphasized {
		element = element.Attr("emphasized", true)
	}
	if c.PropEnabletabsscroll {
		element = element.Attr("enableTabsScroll", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropSelected != "" {
		element = element.Attr("selected", c.PropSelected)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabIndex", c.PropTabindex)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add tab-panel slot
	if c.PropTabPanelSlot != nil {
		slotElem := c.PropTabPanelSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("tab-panel")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "tab-panel").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
