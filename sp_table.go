// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// TableSize represents the Size variant for the table
type TableSize string

// TableSize values
const (
	TableSizeS TableSize = "s"
	TableSizeM TableSize = "m"
	TableSizeL TableSize = "l"
)

// spectrumTable represents an sp-table component
type spectrumTable struct {
	app.Compo
	*styler[*spectrumTable]
	*classer[*spectrumTable]
	*ider[*spectrumTable]

	// Properties
	// Size variant for the table
	PropSize TableSize
	// Whether the table has a reduced visual style
	PropQuiet bool
	// Whether the table has reduced spacing between rows
	PropDensely bool
	// Whether the table has alternating row backgrounds
	PropStriped bool
	// Whether the table header has enhanced visual prominence
	PropEmphasized bool

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// ITable is the interface for sp-table component methods
type ITable interface {
	app.UI
	Styler[ITable]
	Classer[ITable]
	Ider[ITable]
	Size(TableSize) ITable
	SizeS() ITable
	SizeM() ITable
	SizeL() ITable
	Quiet(bool) ITable
	SetQuiet() ITable
	Densely(bool) ITable
	SetDensely() ITable
	Striped(bool) ITable
	SetStriped() ITable
	Emphasized(bool) ITable
	SetEmphasized() ITable

	Body(...app.UI) ITable
	AddToBody(app.UI) ITable
	Text(string) ITable
}

// Table Tables display information in a grid-like format of rows and columns. They organize information in a way that's easy to scan, so that users can look for patterns and insights.
func Table() ITable {
	element := &spectrumTable{
		PropSize:       TableSizeM,
		PropQuiet:      false,
		PropDensely:    false,
		PropStriped:    false,
		PropEmphasized: false,
		PropBody:       []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Size Size variant for the table
func (c *spectrumTable) Size(size TableSize) ITable {
	c.PropSize = size
	return c
}

func (c *spectrumTable) SizeS() ITable {
	return c.Size(TableSizeS)
}
func (c *spectrumTable) SizeM() ITable {
	return c.Size(TableSizeM)
}
func (c *spectrumTable) SizeL() ITable {
	return c.Size(TableSizeL)
}

// Quiet Whether the table has a reduced visual style
func (c *spectrumTable) Quiet(quiet bool) ITable {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumTable) SetQuiet() ITable {
	return c.Quiet(true)
}

// Densely Whether the table has reduced spacing between rows
func (c *spectrumTable) Densely(densely bool) ITable {
	c.PropDensely = densely
	return c
}

func (c *spectrumTable) SetDensely() ITable {
	return c.Densely(true)
}

// Striped Whether the table has alternating row backgrounds
func (c *spectrumTable) Striped(striped bool) ITable {
	c.PropStriped = striped
	return c
}

func (c *spectrumTable) SetStriped() ITable {
	return c.Striped(true)
}

// Emphasized Whether the table header has enhanced visual prominence
func (c *spectrumTable) Emphasized(emphasized bool) ITable {
	c.PropEmphasized = emphasized
	return c
}

func (c *spectrumTable) SetEmphasized() ITable {
	return c.Emphasized(true)
}

// Body sets the content for the default slot
func (c *spectrumTable) Body(elements ...app.UI) ITable {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumTable) AddToBody(element app.UI) ITable {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumTable) Text(text string) ITable {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumTable) Style(key, format string, values ...any) ITable {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumTable) Styles(styles map[string]string) ITable {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumTable) Class(class string) ITable {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumTable) Classes(classes ...string) ITable {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumTable) Id(id string) ITable {
	return c.ider.Id(id)
}

// Render renders the sp-table component
func (c *spectrumTable) Render() app.UI {
	element := app.Elem("sp-table")

	// Set attributes
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropDensely {
		element = element.Attr("densely", true)
	}
	if c.PropStriped {
		element = element.Attr("striped", true)
	}
	if c.PropEmphasized {
		element = element.Attr("emphasized", true)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
