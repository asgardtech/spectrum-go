// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// AccordionDensity represents the Sets the spacing between the content to borders of an accordion item
type AccordionDensity string

// AccordionDensity values
const (
	AccordionDensityCompact  AccordionDensity = "compact"
	AccordionDensitySpacious AccordionDensity = "spacious"
)

// AccordionSize represents the The size of the accordion
type AccordionSize string

// AccordionSize values
const (
	AccordionSizeS  AccordionSize = "s"
	AccordionSizeM  AccordionSize = "m"
	AccordionSizeL  AccordionSize = "l"
	AccordionSizeXl AccordionSize = "xl"
)

// spectrumAccordion represents an sp-accordion component
type spectrumAccordion struct {
	app.Compo
	*styler[*spectrumAccordion]
	*classer[*spectrumAccordion]
	*ider[*spectrumAccordion]

	// Properties
	// Allows multiple accordion items to be opened at the same time
	PropAllowMultiple bool
	// Sets the spacing between the content to borders of an accordion item
	PropDensity AccordionDensity
	// The size of the accordion
	PropSize AccordionSize

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Child components
	PropChildren []app.UI
}

// IAccordion is the interface for sp-accordion component methods
type IAccordion interface {
	app.UI
	Styler[IAccordion]
	Classer[IAccordion]
	Ider[IAccordion]
	AllowMultiple(bool) IAccordion
	SetAllowMultiple() IAccordion
	Density(AccordionDensity) IAccordion
	DensityCompact() IAccordion
	DensitySpacious() IAccordion
	Size(AccordionSize) IAccordion
	SizeS() IAccordion
	SizeM() IAccordion
	SizeL() IAccordion
	SizeXl() IAccordion

	Body(...app.UI) IAccordion
	AddToBody(app.UI) IAccordion
	Text(string) IAccordion

	Children(...app.UI) IAccordion
	AddChild(app.UI) IAccordion
}

// Accordion The sp-accordion element contains a list of items that can be expanded or collapsed to reveal additional content or information associated with each item.
func Accordion() IAccordion {
	element := &spectrumAccordion{
		PropAllowMultiple: false,
		PropSize:          AccordionSizeM,
		PropBody:          []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// AllowMultiple Allows multiple accordion items to be opened at the same time
func (c *spectrumAccordion) AllowMultiple(allowMultiple bool) IAccordion {
	c.PropAllowMultiple = allowMultiple
	return c
}

func (c *spectrumAccordion) SetAllowMultiple() IAccordion {
	return c.AllowMultiple(true)
}

// Density Sets the spacing between the content to borders of an accordion item
func (c *spectrumAccordion) Density(density AccordionDensity) IAccordion {
	c.PropDensity = density
	return c
}

func (c *spectrumAccordion) DensityCompact() IAccordion {
	return c.Density(AccordionDensityCompact)
}
func (c *spectrumAccordion) DensitySpacious() IAccordion {
	return c.Density(AccordionDensitySpacious)
}

// Size The size of the accordion
func (c *spectrumAccordion) Size(size AccordionSize) IAccordion {
	c.PropSize = size
	return c
}

func (c *spectrumAccordion) SizeS() IAccordion {
	return c.Size(AccordionSizeS)
}
func (c *spectrumAccordion) SizeM() IAccordion {
	return c.Size(AccordionSizeM)
}
func (c *spectrumAccordion) SizeL() IAccordion {
	return c.Size(AccordionSizeL)
}
func (c *spectrumAccordion) SizeXl() IAccordion {
	return c.Size(AccordionSizeXl)
}

// Body sets the content for the default slot
func (c *spectrumAccordion) Body(elements ...app.UI) IAccordion {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumAccordion) AddToBody(element app.UI) IAccordion {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumAccordion) Text(text string) IAccordion {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Children sets the child components
func (c *spectrumAccordion) Children(children ...app.UI) IAccordion {
	c.PropChildren = children

	return c
}

// AddChild adds a child component
func (c *spectrumAccordion) AddChild(child app.UI) IAccordion {
	c.PropChildren = append(c.PropChildren, child)

	return c
}

// Style sets a style property with a value
func (c *spectrumAccordion) Style(key, format string, values ...any) IAccordion {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumAccordion) Styles(styles map[string]string) IAccordion {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumAccordion) Class(class string) IAccordion {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumAccordion) Classes(classes ...string) IAccordion {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumAccordion) Id(id string) IAccordion {
	return c.ider.Id(id)
}

// Render renders the sp-accordion component
func (c *spectrumAccordion) Render() app.UI {
	element := app.Elem("sp-accordion")

	// Set attributes
	if c.PropAllowMultiple {
		element = element.Attr("allow-multiple", true)
	}
	if c.PropDensity != "" {
		element = element.Attr("density", string(c.PropDensity))
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add children if no default slot content is provided
	if len(c.PropChildren) > 0 {
		// If there's a default slot, only add children if the default slot is empty
		if len(c.PropBody) == 0 {
			for _, child := range c.PropChildren {
				slotElements = append(slotElements, child)
			}
		}
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
