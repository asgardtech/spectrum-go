// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ComboboxAutocomplete represents the Type of assistance when supplying values
type ComboboxAutocomplete string

// ComboboxAutocomplete values
const (
	ComboboxAutocompleteList ComboboxAutocomplete = "list"
	ComboboxAutocompleteNone ComboboxAutocomplete = "none"
)

// spectrumCombobox represents an sp-combobox component
type spectrumCombobox struct {
	app.Compo
	*styler[*spectrumCombobox]
	*classer[*spectrumCombobox]
	*ider[*spectrumCombobox]

	// Properties
	// Type of assistance when supplying values
	PropAutocomplete ComboboxAutocomplete
	// Disable this control
	PropDisabled bool
	// Whether the value is invalid
	PropInvalid bool
	// Accessible label when visible label not provided
	PropLabel string
	// Whether the listbox is visible
	PropOpen bool
	// Whether items are currently loading
	PropPending bool
	// Label for the combobox in pending state
	PropPendinglabel string
	// Text shown when no value is set
	PropPlaceholder string
	// Display without visible background
	PropQuiet bool
	// Whether field is required
	PropRequired bool
	// The value held by the control
	PropValue string

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropHelpTextSlot         app.UI
	PropNegativeHelpTextSlot app.UI
	PropTooltipSlot          app.UI

	// Event handlers
	PropOnChange app.EventHandler
	PropOnInput  app.EventHandler
}

// ICombobox is the interface for sp-combobox component methods
type ICombobox interface {
	app.UI
	Styler[ICombobox]
	Classer[ICombobox]
	Ider[ICombobox]
	Autocomplete(ComboboxAutocomplete) ICombobox
	AutocompleteList() ICombobox
	AutocompleteNone() ICombobox
	Disabled(bool) ICombobox
	SetDisabled() ICombobox
	Invalid(bool) ICombobox
	SetInvalid() ICombobox
	Label(string) ICombobox
	Open(bool) ICombobox
	SetOpen() ICombobox
	Pending(bool) ICombobox
	SetPending() ICombobox
	Pendinglabel(string) ICombobox
	Placeholder(string) ICombobox
	Quiet(bool) ICombobox
	SetQuiet() ICombobox
	Required(bool) ICombobox
	SetRequired() ICombobox
	Value(string) ICombobox

	Body(...app.UI) ICombobox
	AddToBody(app.UI) ICombobox
	Text(string) ICombobox

	HelpText(app.UI) ICombobox
	NegativeHelpText(app.UI) ICombobox
	Tooltip(app.UI) ICombobox

	OnChange(app.EventHandler) ICombobox
	OnInput(app.EventHandler) ICombobox
}

// Combobox Allows users to filter lists to only options matching a query, combining a textfield, picker button, and menu items.
func Combobox() ICombobox {
	element := &spectrumCombobox{
		PropAutocomplete: ComboboxAutocompleteNone,
		PropDisabled:     false,
		PropInvalid:      false,
		PropLabel:        "",
		PropOpen:         false,
		PropPending:      false,
		PropPendinglabel: "Pending",
		PropPlaceholder:  "",
		PropQuiet:        false,
		PropRequired:     false,
		PropValue:        "",
		PropBody:         []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Autocomplete Type of assistance when supplying values
func (c *spectrumCombobox) Autocomplete(autocomplete ComboboxAutocomplete) ICombobox {
	c.PropAutocomplete = autocomplete
	return c
}

func (c *spectrumCombobox) AutocompleteList() ICombobox {
	return c.Autocomplete(ComboboxAutocompleteList)
}
func (c *spectrumCombobox) AutocompleteNone() ICombobox {
	return c.Autocomplete(ComboboxAutocompleteNone)
}

// Disabled Disable this control
func (c *spectrumCombobox) Disabled(disabled bool) ICombobox {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumCombobox) SetDisabled() ICombobox {
	return c.Disabled(true)
}

// Invalid Whether the value is invalid
func (c *spectrumCombobox) Invalid(invalid bool) ICombobox {
	c.PropInvalid = invalid
	return c
}

func (c *spectrumCombobox) SetInvalid() ICombobox {
	return c.Invalid(true)
}

// Label Accessible label when visible label not provided
func (c *spectrumCombobox) Label(label string) ICombobox {
	c.PropLabel = label
	return c
}

// Open Whether the listbox is visible
func (c *spectrumCombobox) Open(open bool) ICombobox {
	c.PropOpen = open
	return c
}

func (c *spectrumCombobox) SetOpen() ICombobox {
	return c.Open(true)
}

// Pending Whether items are currently loading
func (c *spectrumCombobox) Pending(pending bool) ICombobox {
	c.PropPending = pending
	return c
}

func (c *spectrumCombobox) SetPending() ICombobox {
	return c.Pending(true)
}

// Pendinglabel Label for the combobox in pending state
func (c *spectrumCombobox) Pendinglabel(pendingLabel string) ICombobox {
	c.PropPendinglabel = pendingLabel
	return c
}

// Placeholder Text shown when no value is set
func (c *spectrumCombobox) Placeholder(placeholder string) ICombobox {
	c.PropPlaceholder = placeholder
	return c
}

// Quiet Display without visible background
func (c *spectrumCombobox) Quiet(quiet bool) ICombobox {
	c.PropQuiet = quiet
	return c
}

func (c *spectrumCombobox) SetQuiet() ICombobox {
	return c.Quiet(true)
}

// Required Whether field is required
func (c *spectrumCombobox) Required(required bool) ICombobox {
	c.PropRequired = required
	return c
}

func (c *spectrumCombobox) SetRequired() ICombobox {
	return c.Required(true)
}

// Value The value held by the control
func (c *spectrumCombobox) Value(value string) ICombobox {
	c.PropValue = value
	return c
}

// Body sets the content for the default slot
func (c *spectrumCombobox) Body(elements ...app.UI) ICombobox {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumCombobox) AddToBody(element app.UI) ICombobox {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumCombobox) Text(text string) ICombobox {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Default or non-negative help text
func (c *spectrumCombobox) HelpText(content app.UI) ICombobox {
	c.PropHelpTextSlot = content

	return c
}

// Negative help text shown when invalid
func (c *spectrumCombobox) NegativeHelpText(content app.UI) ICombobox {
	c.PropNegativeHelpTextSlot = content

	return c
}

// Tooltip for the picker button
func (c *spectrumCombobox) Tooltip(content app.UI) ICombobox {
	c.PropTooltipSlot = content

	return c
}

// Value has been committed by the user
func (c *spectrumCombobox) OnChange(handler app.EventHandler) ICombobox {
	c.PropOnChange = handler

	return c
}

// Value of the element has changed
func (c *spectrumCombobox) OnInput(handler app.EventHandler) ICombobox {
	c.PropOnInput = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumCombobox) Style(key, format string, values ...any) ICombobox {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumCombobox) Styles(styles map[string]string) ICombobox {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumCombobox) Class(class string) ICombobox {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumCombobox) Classes(classes ...string) ICombobox {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumCombobox) Id(id string) ICombobox {
	return c.ider.Id(id)
}

// Render renders the sp-combobox component
func (c *spectrumCombobox) Render() app.UI {
	element := app.Elem("sp-combobox")

	// Set attributes
	if c.PropAutocomplete != "" {
		element = element.Attr("autocomplete", string(c.PropAutocomplete))
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropInvalid {
		element = element.Attr("invalid", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropPending {
		element = element.Attr("pending", true)
	}
	if c.PropPendinglabel != "" {
		element = element.Attr("pendingLabel", c.PropPendinglabel)
	}
	if c.PropPlaceholder != "" {
		element = element.Attr("placeholder", c.PropPlaceholder)
	}
	if c.PropQuiet {
		element = element.Attr("quiet", true)
	}
	if c.PropRequired {
		element = element.Attr("required", true)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnInput != nil {
		element = element.On("input", c.PropOnInput)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add help-text slot
	if c.PropHelpTextSlot != nil {
		slotElem := c.PropHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add negative-help-text slot
	if c.PropNegativeHelpTextSlot != nil {
		slotElem := c.PropNegativeHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("negative-help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "negative-help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add tooltip slot
	if c.PropTooltipSlot != nil {
		slotElem := c.PropTooltipSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("tooltip")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "tooltip").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
