// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// RadioSize represents the The size of the radio button
type RadioSize string

// RadioSize values
const (
	RadioSizeS  RadioSize = "s"
	RadioSizeM  RadioSize = "m"
	RadioSizeL  RadioSize = "l"
	RadioSizeXl RadioSize = "xl"
)

// spectrumRadio represents an sp-radio component
type spectrumRadio struct {
	app.Compo
	*styler[*spectrumRadio]
	*classer[*spectrumRadio]
	*ider[*spectrumRadio]

	// Properties
	// Represents when the input is checked
	PropChecked bool
	// Uses the disabled style
	PropDisabled bool
	// Whether to use the emphasized (blue) visual style
	PropEmphasized bool
	// Uses the invalid style
	PropInvalid bool
	// Whether the radio is readonly
	PropReadonly bool
	// Identifies this radio button within its radio group
	PropValue string
	// The size of the radio button
	PropSize RadioSize
	// The name of the radio button when used in a form
	PropName string

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnChange app.EventHandler
}

// IRadio is the interface for sp-radio component methods
type IRadio interface {
	app.UI
	Styler[IRadio]
	Classer[IRadio]
	Ider[IRadio]
	Checked(bool) IRadio
	SetChecked() IRadio
	Disabled(bool) IRadio
	SetDisabled() IRadio
	Emphasized(bool) IRadio
	SetEmphasized() IRadio
	Invalid(bool) IRadio
	SetInvalid() IRadio
	Readonly(bool) IRadio
	SetReadonly() IRadio
	Value(string) IRadio
	Size(RadioSize) IRadio
	SizeS() IRadio
	SizeM() IRadio
	SizeL() IRadio
	SizeXl() IRadio
	Name(string) IRadio

	Body(...app.UI) IRadio
	AddToBody(app.UI) IRadio
	Text(string) IRadio

	OnChange(app.EventHandler) IRadio
}

// Radio Radio buttons allow users to select a single option from a list of mutually exclusive options. All possible options are exposed up front for users to compare.
func Radio() IRadio {
	element := &spectrumRadio{
		PropChecked:    false,
		PropDisabled:   false,
		PropEmphasized: false,
		PropInvalid:    false,
		PropReadonly:   false,
		PropValue:      "",
		PropSize:       RadioSizeM,
		PropBody:       []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Checked Represents when the input is checked
func (c *spectrumRadio) Checked(checked bool) IRadio {
	c.PropChecked = checked
	return c
}

func (c *spectrumRadio) SetChecked() IRadio {
	return c.Checked(true)
}

// Disabled Uses the disabled style
func (c *spectrumRadio) Disabled(disabled bool) IRadio {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumRadio) SetDisabled() IRadio {
	return c.Disabled(true)
}

// Emphasized Whether to use the emphasized (blue) visual style
func (c *spectrumRadio) Emphasized(emphasized bool) IRadio {
	c.PropEmphasized = emphasized
	return c
}

func (c *spectrumRadio) SetEmphasized() IRadio {
	return c.Emphasized(true)
}

// Invalid Uses the invalid style
func (c *spectrumRadio) Invalid(invalid bool) IRadio {
	c.PropInvalid = invalid
	return c
}

func (c *spectrumRadio) SetInvalid() IRadio {
	return c.Invalid(true)
}

// Readonly Whether the radio is readonly
func (c *spectrumRadio) Readonly(readonly bool) IRadio {
	c.PropReadonly = readonly
	return c
}

func (c *spectrumRadio) SetReadonly() IRadio {
	return c.Readonly(true)
}

// Value Identifies this radio button within its radio group
func (c *spectrumRadio) Value(value string) IRadio {
	c.PropValue = value
	return c
}

// Size The size of the radio button
func (c *spectrumRadio) Size(size RadioSize) IRadio {
	c.PropSize = size
	return c
}

func (c *spectrumRadio) SizeS() IRadio {
	return c.Size(RadioSizeS)
}
func (c *spectrumRadio) SizeM() IRadio {
	return c.Size(RadioSizeM)
}
func (c *spectrumRadio) SizeL() IRadio {
	return c.Size(RadioSizeL)
}
func (c *spectrumRadio) SizeXl() IRadio {
	return c.Size(RadioSizeXl)
}

// Name The name of the radio button when used in a form
func (c *spectrumRadio) Name(name string) IRadio {
	c.PropName = name
	return c
}

// Body sets the content for the default slot
func (c *spectrumRadio) Body(elements ...app.UI) IRadio {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumRadio) AddToBody(element app.UI) IRadio {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumRadio) Text(text string) IRadio {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// When the input is interacted with and its state is changed
func (c *spectrumRadio) OnChange(handler app.EventHandler) IRadio {
	c.PropOnChange = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumRadio) Style(key, format string, values ...any) IRadio {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumRadio) Styles(styles map[string]string) IRadio {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumRadio) Class(class string) IRadio {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumRadio) Classes(classes ...string) IRadio {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumRadio) Id(id string) IRadio {
	return c.ider.Id(id)
}

// Render renders the sp-radio component
func (c *spectrumRadio) Render() app.UI {
	element := app.Elem("sp-radio")

	// Set attributes
	if c.PropChecked {
		element = element.Attr("checked", true)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropEmphasized {
		element = element.Attr("emphasized", true)
	}
	if c.PropInvalid {
		element = element.Attr("invalid", true)
	}
	if c.PropReadonly {
		element = element.Attr("readonly", true)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropName != "" {
		element = element.Attr("name", c.PropName)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
