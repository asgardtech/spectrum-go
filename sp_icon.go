// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// IconSize represents the Size of the icon
type IconSize string

// IconSize values
const (
	IconSizeXxs IconSize = "xxs"
	IconSizeXs  IconSize = "xs"
	IconSizeS   IconSize = "s"
	IconSizeM   IconSize = "m"
	IconSizeL   IconSize = "l"
	IconSizeXl  IconSize = "xl"
	IconSizeXxl IconSize = "xxl"
)

// spectrumIcon represents an sp-icon component
type spectrumIcon struct {
	app.Compo
	*styler[*spectrumIcon]
	*classer[*spectrumIcon]
	*ider[*spectrumIcon]

	// Properties
	// Accessible label for the icon. When provided, removes aria-hidden and sets aria-label instead
	PropLabel string
	// Name of the icon in the registered icon set to display
	PropName string
	// Size of the icon
	PropSize IconSize
	// URL to an image to use as the icon
	PropSrc string

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnError app.EventHandler
}

// IIcon is the interface for sp-icon component methods
type IIcon interface {
	app.UI
	Styler[IIcon]
	Classer[IIcon]
	Ider[IIcon]
	Label(string) IIcon
	Name(string) IIcon
	Size(IconSize) IIcon
	SizeXxs() IIcon
	SizeXs() IIcon
	SizeS() IIcon
	SizeM() IIcon
	SizeL() IIcon
	SizeXl() IIcon
	SizeXxl() IIcon
	Src(string) IIcon

	Body(...app.UI) IIcon
	AddToBody(app.UI) IIcon
	Text(string) IIcon

	OnError(app.EventHandler) IIcon
}

// Icon Renders an icon to the page. By default the name attribute pairs with separately registered icon sets to deliver icons. Icons can also be provided via src attribute or slotted content.
func Icon() IIcon {
	element := &spectrumIcon{
		PropLabel: "",
		PropSize:  IconSizeM,
		PropBody:  []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Label Accessible label for the icon. When provided, removes aria-hidden and sets aria-label instead
func (c *spectrumIcon) Label(label string) IIcon {
	c.PropLabel = label
	return c
}

// Name Name of the icon in the registered icon set to display
func (c *spectrumIcon) Name(name string) IIcon {
	c.PropName = name
	return c
}

// Size Size of the icon
func (c *spectrumIcon) Size(size IconSize) IIcon {
	c.PropSize = size
	return c
}

func (c *spectrumIcon) SizeXxs() IIcon {
	return c.Size(IconSizeXxs)
}
func (c *spectrumIcon) SizeXs() IIcon {
	return c.Size(IconSizeXs)
}
func (c *spectrumIcon) SizeS() IIcon {
	return c.Size(IconSizeS)
}
func (c *spectrumIcon) SizeM() IIcon {
	return c.Size(IconSizeM)
}
func (c *spectrumIcon) SizeL() IIcon {
	return c.Size(IconSizeL)
}
func (c *spectrumIcon) SizeXl() IIcon {
	return c.Size(IconSizeXl)
}
func (c *spectrumIcon) SizeXxl() IIcon {
	return c.Size(IconSizeXxl)
}

// Src URL to an image to use as the icon
func (c *spectrumIcon) Src(src string) IIcon {
	c.PropSrc = src
	return c
}

// Body sets the content for the default slot
func (c *spectrumIcon) Body(elements ...app.UI) IIcon {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumIcon) AddToBody(element app.UI) IIcon {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumIcon) Text(text string) IIcon {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Fired when there is an error loading the icon
func (c *spectrumIcon) OnError(handler app.EventHandler) IIcon {
	c.PropOnError = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumIcon) Style(key, format string, values ...any) IIcon {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumIcon) Styles(styles map[string]string) IIcon {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumIcon) Class(class string) IIcon {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumIcon) Classes(classes ...string) IIcon {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumIcon) Id(id string) IIcon {
	return c.ider.Id(id)
}

// Render renders the sp-icon component
func (c *spectrumIcon) Render() app.UI {
	element := app.Elem("sp-icon")

	// Set attributes
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropName != "" {
		element = element.Attr("name", c.PropName)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropSrc != "" {
		element = element.Attr("src", c.PropSrc)
	}

	// Add event handlers
	if c.PropOnError != nil {
		element = element.On("error", c.PropOnError)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
