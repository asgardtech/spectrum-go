// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// SidenavVariant represents the When 'multilevel', supports multiple layers of hierarchical navigation items
type SidenavVariant string

// SidenavVariant values
const (
	SidenavVariantMultilevel SidenavVariant = "multilevel"
)

// spectrumSidenav represents an sp-sidenav component
type spectrumSidenav struct {
	app.Compo
	*styler[*spectrumSidenav]
	*classer[*spectrumSidenav]
	*ider[*spectrumSidenav]

	// Properties
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// An accessible label describing the component to distinguish it from other navigation for screen reader users
	PropLabel string
	// When true, presents child items with a single tab-stop navigable with arrow keys
	PropManagetabindex bool
	// The tab index to apply to this control
	PropTabindex float64
	// The value of the currently selected item
	PropValue string
	// When 'multilevel', supports multiple layers of hierarchical navigation items
	PropVariant SidenavVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnChange app.EventHandler
}

// ISidenav is the interface for sp-sidenav component methods
type ISidenav interface {
	app.UI
	Styler[ISidenav]
	Classer[ISidenav]
	Ider[ISidenav]
	Disabled(bool) ISidenav
	SetDisabled() ISidenav
	Label(string) ISidenav
	Managetabindex(bool) ISidenav
	SetManagetabindex() ISidenav
	Tabindex(float64) ISidenav
	Value(string) ISidenav
	Variant(SidenavVariant) ISidenav
	VariantMultilevel() ISidenav

	Body(...app.UI) ISidenav
	AddToBody(app.UI) ISidenav
	Text(string) ISidenav

	OnChange(app.EventHandler) ISidenav
}

// Sidenav Allows users to locate information and features within the UI. Can be used for hierarchical or flat navigation, and groups navigable items categorically.
func Sidenav() ISidenav {
	element := &spectrumSidenav{
		PropDisabled:       false,
		PropLabel:          "",
		PropManagetabindex: false,
		PropTabindex:       0,
		PropValue:          "",
		PropVariant:        "",
		PropBody:           []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumSidenav) Disabled(disabled bool) ISidenav {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumSidenav) SetDisabled() ISidenav {
	return c.Disabled(true)
}

// Label An accessible label describing the component to distinguish it from other navigation for screen reader users
func (c *spectrumSidenav) Label(label string) ISidenav {
	c.PropLabel = label
	return c
}

// Managetabindex When true, presents child items with a single tab-stop navigable with arrow keys
func (c *spectrumSidenav) Managetabindex(manageTabIndex bool) ISidenav {
	c.PropManagetabindex = manageTabIndex
	return c
}

func (c *spectrumSidenav) SetManagetabindex() ISidenav {
	return c.Managetabindex(true)
}

// Tabindex The tab index to apply to this control
func (c *spectrumSidenav) Tabindex(tabIndex float64) ISidenav {
	c.PropTabindex = tabIndex
	return c
}

// Value The value of the currently selected item
func (c *spectrumSidenav) Value(value string) ISidenav {
	c.PropValue = value
	return c
}

// Variant When 'multilevel', supports multiple layers of hierarchical navigation items
func (c *spectrumSidenav) Variant(variant SidenavVariant) ISidenav {
	c.PropVariant = variant
	return c
}

func (c *spectrumSidenav) VariantMultilevel() ISidenav {
	return c.Variant(SidenavVariantMultilevel)
}

// Body sets the content for the default slot
func (c *spectrumSidenav) Body(elements ...app.UI) ISidenav {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumSidenav) AddToBody(element app.UI) ISidenav {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumSidenav) Text(text string) ISidenav {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Announces a change in the value property of the navigation element. Can be canceled via event.preventDefault()
func (c *spectrumSidenav) OnChange(handler app.EventHandler) ISidenav {
	c.PropOnChange = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumSidenav) Style(key, format string, values ...any) ISidenav {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumSidenav) Styles(styles map[string]string) ISidenav {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumSidenav) Class(class string) ISidenav {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumSidenav) Classes(classes ...string) ISidenav {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumSidenav) Id(id string) ISidenav {
	return c.ider.Id(id)
}

// Render renders the sp-sidenav component
func (c *spectrumSidenav) Render() app.UI {
	element := app.Elem("sp-sidenav")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropManagetabindex {
		element = element.Attr("manageTabIndex", true)
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabIndex", c.PropTabindex)
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
