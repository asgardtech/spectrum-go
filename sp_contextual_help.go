// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// ContextualHelpPlacement represents the The placement of the popover relative to the trigger.
type ContextualHelpPlacement string

// ContextualHelpPlacement values
const (
	ContextualHelpPlacementTop         ContextualHelpPlacement = "top"
	ContextualHelpPlacementTopStart    ContextualHelpPlacement = "top-start"
	ContextualHelpPlacementTopEnd      ContextualHelpPlacement = "top-end"
	ContextualHelpPlacementRight       ContextualHelpPlacement = "right"
	ContextualHelpPlacementRightStart  ContextualHelpPlacement = "right-start"
	ContextualHelpPlacementRightEnd    ContextualHelpPlacement = "right-end"
	ContextualHelpPlacementBottom      ContextualHelpPlacement = "bottom"
	ContextualHelpPlacementBottomStart ContextualHelpPlacement = "bottom-start"
	ContextualHelpPlacementBottomEnd   ContextualHelpPlacement = "bottom-end"
	ContextualHelpPlacementLeft        ContextualHelpPlacement = "left"
	ContextualHelpPlacementLeftStart   ContextualHelpPlacement = "left-start"
	ContextualHelpPlacementLeftEnd     ContextualHelpPlacement = "left-end"
)

// ContextualHelpVariant represents the The variant property applies specific styling on the action button trigger. Values: 'info', 'help'
type ContextualHelpVariant string

// ContextualHelpVariant values
const (
	ContextualHelpVariantInfo ContextualHelpVariant = "info"
	ContextualHelpVariantHelp ContextualHelpVariant = "help"
)

// spectrumContextualHelp represents an sp-contextual-help component
type spectrumContextualHelp struct {
	app.Compo
	*styler[*spectrumContextualHelp]
	*classer[*spectrumContextualHelp]
	*ider[*spectrumContextualHelp]

	// Properties
	// Provides an accessible name for the action button trigger.
	PropLabel string
	// The offset property accepts either a single number, to define the offset of the Popover along the main axis from the action button, or 2-tuple, to define the offset along the main axis and the cross axis.
	PropOffset string
	// The placement of the popover relative to the trigger.
	PropPlacement ContextualHelpPlacement
	// The variant property applies specific styling on the action button trigger. Values: 'info', 'help'
	PropVariant ContextualHelpVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropHeadingSlot app.UI
	PropLinkSlot    app.UI

	// Event handlers
	PropOnSpOpen   app.EventHandler
	PropOnSpClosed app.EventHandler
}

// IContextualHelp is the interface for sp-contextual-help component methods
type IContextualHelp interface {
	app.UI
	Styler[IContextualHelp]
	Classer[IContextualHelp]
	Ider[IContextualHelp]
	Label(string) IContextualHelp
	Offset(string) IContextualHelp
	Placement(ContextualHelpPlacement) IContextualHelp
	PlacementTop() IContextualHelp
	PlacementTopStart() IContextualHelp
	PlacementTopEnd() IContextualHelp
	PlacementRight() IContextualHelp
	PlacementRightStart() IContextualHelp
	PlacementRightEnd() IContextualHelp
	PlacementBottom() IContextualHelp
	PlacementBottomStart() IContextualHelp
	PlacementBottomEnd() IContextualHelp
	PlacementLeft() IContextualHelp
	PlacementLeftStart() IContextualHelp
	PlacementLeftEnd() IContextualHelp
	Variant(ContextualHelpVariant) IContextualHelp
	VariantInfo() IContextualHelp
	VariantHelp() IContextualHelp

	Body(...app.UI) IContextualHelp
	AddToBody(app.UI) IContextualHelp
	Text(string) IContextualHelp

	Heading(app.UI) IContextualHelp
	Link(app.UI) IContextualHelp

	OnSpOpen(app.EventHandler) IContextualHelp
	OnSpClosed(app.EventHandler) IContextualHelp
}

// ContextualHelp A contextual-help shows a user extra information about the state of either an adjacent component or an entire view. It explains a high-level topic about an experience and can point users to more information elsewhere.
func ContextualHelp() IContextualHelp {
	element := &spectrumContextualHelp{
		PropLabel:     "",
		PropOffset:    "0",
		PropPlacement: ContextualHelpPlacementBottomStart,
		PropVariant:   ContextualHelpVariantInfo,
		PropBody:      []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Label Provides an accessible name for the action button trigger.
func (c *spectrumContextualHelp) Label(label string) IContextualHelp {
	c.PropLabel = label
	return c
}

// Offset The offset property accepts either a single number, to define the offset of the Popover along the main axis from the action button, or 2-tuple, to define the offset along the main axis and the cross axis.
func (c *spectrumContextualHelp) Offset(offset string) IContextualHelp {
	c.PropOffset = offset
	return c
}

// Placement The placement of the popover relative to the trigger.
func (c *spectrumContextualHelp) Placement(placement ContextualHelpPlacement) IContextualHelp {
	c.PropPlacement = placement
	return c
}

func (c *spectrumContextualHelp) PlacementTop() IContextualHelp {
	return c.Placement(ContextualHelpPlacementTop)
}
func (c *spectrumContextualHelp) PlacementTopStart() IContextualHelp {
	return c.Placement(ContextualHelpPlacementTopStart)
}
func (c *spectrumContextualHelp) PlacementTopEnd() IContextualHelp {
	return c.Placement(ContextualHelpPlacementTopEnd)
}
func (c *spectrumContextualHelp) PlacementRight() IContextualHelp {
	return c.Placement(ContextualHelpPlacementRight)
}
func (c *spectrumContextualHelp) PlacementRightStart() IContextualHelp {
	return c.Placement(ContextualHelpPlacementRightStart)
}
func (c *spectrumContextualHelp) PlacementRightEnd() IContextualHelp {
	return c.Placement(ContextualHelpPlacementRightEnd)
}
func (c *spectrumContextualHelp) PlacementBottom() IContextualHelp {
	return c.Placement(ContextualHelpPlacementBottom)
}
func (c *spectrumContextualHelp) PlacementBottomStart() IContextualHelp {
	return c.Placement(ContextualHelpPlacementBottomStart)
}
func (c *spectrumContextualHelp) PlacementBottomEnd() IContextualHelp {
	return c.Placement(ContextualHelpPlacementBottomEnd)
}
func (c *spectrumContextualHelp) PlacementLeft() IContextualHelp {
	return c.Placement(ContextualHelpPlacementLeft)
}
func (c *spectrumContextualHelp) PlacementLeftStart() IContextualHelp {
	return c.Placement(ContextualHelpPlacementLeftStart)
}
func (c *spectrumContextualHelp) PlacementLeftEnd() IContextualHelp {
	return c.Placement(ContextualHelpPlacementLeftEnd)
}

// Variant The variant property applies specific styling on the action button trigger. Values: 'info', 'help'
func (c *spectrumContextualHelp) Variant(variant ContextualHelpVariant) IContextualHelp {
	c.PropVariant = variant
	return c
}

func (c *spectrumContextualHelp) VariantInfo() IContextualHelp {
	return c.Variant(ContextualHelpVariantInfo)
}
func (c *spectrumContextualHelp) VariantHelp() IContextualHelp {
	return c.Variant(ContextualHelpVariantHelp)
}

// Body sets the content for the default slot
func (c *spectrumContextualHelp) Body(elements ...app.UI) IContextualHelp {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumContextualHelp) AddToBody(element app.UI) IContextualHelp {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumContextualHelp) Text(text string) IContextualHelp {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// content to display as the heading of the popover
func (c *spectrumContextualHelp) Heading(content app.UI) IContextualHelp {
	c.PropHeadingSlot = content

	return c
}

// link to additional informations
func (c *spectrumContextualHelp) Link(content app.UI) IContextualHelp {
	c.PropLinkSlot = content

	return c
}

// Fired when the popover opens
func (c *spectrumContextualHelp) OnSpOpen(handler app.EventHandler) IContextualHelp {
	c.PropOnSpOpen = handler

	return c
}

// Fired when the popover closes
func (c *spectrumContextualHelp) OnSpClosed(handler app.EventHandler) IContextualHelp {
	c.PropOnSpClosed = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumContextualHelp) Style(key, format string, values ...any) IContextualHelp {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumContextualHelp) Styles(styles map[string]string) IContextualHelp {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumContextualHelp) Class(class string) IContextualHelp {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumContextualHelp) Classes(classes ...string) IContextualHelp {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumContextualHelp) Id(id string) IContextualHelp {
	return c.ider.Id(id)
}

// Render renders the sp-contextual-help component
func (c *spectrumContextualHelp) Render() app.UI {
	element := app.Elem("sp-contextual-help")

	// Set attributes
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropOffset != "" {
		element = element.Attr("offset", c.PropOffset)
	}
	if c.PropPlacement != "" {
		element = element.Attr("placement", string(c.PropPlacement))
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add event handlers
	if c.PropOnSpOpen != nil {
		element = element.On("sp-open", c.PropOnSpOpen)
	}
	if c.PropOnSpClosed != nil {
		element = element.On("sp-closed", c.PropOnSpClosed)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add heading slot
	if c.PropHeadingSlot != nil {
		slotElem := c.PropHeadingSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("heading")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "heading").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add link slot
	if c.PropLinkSlot != nil {
		slotElem := c.PropLinkSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("link")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "link").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
