// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumColorController represents an  component
type spectrumColorController struct {
	app.Compo
	*styler[*spectrumColorController]
	*classer[*spectrumColorController]
	*ider[*spectrumColorController]

	// Properties
	// Gets or sets the current color value in various formats (strings, objects, or instances of the Color class)
	PropColor string
	// Gets the color value in various formats based on the original color input
	PropColorvalue string
	// Gets or sets the hue value of the current color
	PropHue float64
}

// IColorController is the interface for  component methods
type IColorController interface {
	app.UI
	Styler[IColorController]
	Classer[IColorController]
	Ider[IColorController]
	Color(string) IColorController
	Colorvalue(string) IColorController
	Hue(float64) IColorController
}

// ColorController A comprehensive utility for managing and validating color values in various color spaces, including RGB, HSL, HSV, and Hex.
func ColorController() IColorController {
	element := &spectrumColorController{
		PropHue: 0,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Color Gets or sets the current color value in various formats (strings, objects, or instances of the Color class)
func (c *spectrumColorController) Color(color string) IColorController {
	c.PropColor = color
	return c
}

// Colorvalue Gets the color value in various formats based on the original color input
func (c *spectrumColorController) Colorvalue(colorValue string) IColorController {
	c.PropColorvalue = colorValue
	return c
}

// Hue Gets or sets the hue value of the current color
func (c *spectrumColorController) Hue(hue float64) IColorController {
	c.PropHue = hue
	return c
}

// Style sets a style property with a value
func (c *spectrumColorController) Style(key, format string, values ...any) IColorController {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumColorController) Styles(styles map[string]string) IColorController {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumColorController) Class(class string) IColorController {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumColorController) Classes(classes ...string) IColorController {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumColorController) Id(id string) IColorController {
	return c.ider.Id(id)
}

// Render renders the  component
func (c *spectrumColorController) Render() app.UI {
	element := app.Elem("")

	// Set attributes
	if c.PropColor != "" {
		element = element.Attr("color", c.PropColor)
	}
	if c.PropColorvalue != "" {
		element = element.Attr("colorValue", c.PropColorvalue)
	}
	if c.PropHue != 0 {
		element = element.Attr("hue", c.PropHue)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
