// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// HelpTextSize represents the The size of the help text
type HelpTextSize string

// HelpTextSize values
const (
	HelpTextSizeS  HelpTextSize = "s"
	HelpTextSizeM  HelpTextSize = "m"
	HelpTextSizeL  HelpTextSize = "l"
	HelpTextSizeXl HelpTextSize = "xl"
)

// HelpTextVariant represents the The visual variant to apply to this help text.
type HelpTextVariant string

// HelpTextVariant values
const (
	HelpTextVariantNeutral  HelpTextVariant = "neutral"
	HelpTextVariantNegative HelpTextVariant = "negative"
)

// spectrumHelpText represents an sp-help-text component
type spectrumHelpText struct {
	app.Compo
	*styler[*spectrumHelpText]
	*classer[*spectrumHelpText]
	*ider[*spectrumHelpText]

	// Properties
	// Whether the help text appears in a disabled state
	PropDisabled bool
	// Whether to display an icon as part of the help text
	PropIcon bool
	// The size of the help text
	PropSize HelpTextSize
	// The visual variant to apply to this help text.
	PropVariant HelpTextVariant

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// IHelpText is the interface for sp-help-text component methods
type IHelpText interface {
	app.UI
	Styler[IHelpText]
	Classer[IHelpText]
	Ider[IHelpText]
	Disabled(bool) IHelpText
	SetDisabled() IHelpText
	Icon(bool) IHelpText
	SetIcon() IHelpText
	Size(HelpTextSize) IHelpText
	SizeS() IHelpText
	SizeM() IHelpText
	SizeL() IHelpText
	SizeXl() IHelpText
	Variant(HelpTextVariant) IHelpText
	VariantNeutral() IHelpText
	VariantNegative() IHelpText

	Body(...app.UI) IHelpText
	AddToBody(app.UI) IHelpText
	Text(string) IHelpText
}

// HelpText Help text provides either an informative description or an error message that gives more context about what a user needs to input. It's commonly used in forms.
func HelpText() IHelpText {
	element := &spectrumHelpText{
		PropDisabled: false,
		PropIcon:     false,
		PropSize:     HelpTextSizeM,
		PropVariant:  HelpTextVariantNeutral,
		PropBody:     []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled Whether the help text appears in a disabled state
func (c *spectrumHelpText) Disabled(disabled bool) IHelpText {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumHelpText) SetDisabled() IHelpText {
	return c.Disabled(true)
}

// Icon Whether to display an icon as part of the help text
func (c *spectrumHelpText) Icon(icon bool) IHelpText {
	c.PropIcon = icon
	return c
}

func (c *spectrumHelpText) SetIcon() IHelpText {
	return c.Icon(true)
}

// Size The size of the help text
func (c *spectrumHelpText) Size(size HelpTextSize) IHelpText {
	c.PropSize = size
	return c
}

func (c *spectrumHelpText) SizeS() IHelpText {
	return c.Size(HelpTextSizeS)
}
func (c *spectrumHelpText) SizeM() IHelpText {
	return c.Size(HelpTextSizeM)
}
func (c *spectrumHelpText) SizeL() IHelpText {
	return c.Size(HelpTextSizeL)
}
func (c *spectrumHelpText) SizeXl() IHelpText {
	return c.Size(HelpTextSizeXl)
}

// Variant The visual variant to apply to this help text.
func (c *spectrumHelpText) Variant(variant HelpTextVariant) IHelpText {
	c.PropVariant = variant
	return c
}

func (c *spectrumHelpText) VariantNeutral() IHelpText {
	return c.Variant(HelpTextVariantNeutral)
}
func (c *spectrumHelpText) VariantNegative() IHelpText {
	return c.Variant(HelpTextVariantNegative)
}

// Body sets the content for the default slot
func (c *spectrumHelpText) Body(elements ...app.UI) IHelpText {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumHelpText) AddToBody(element app.UI) IHelpText {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumHelpText) Text(text string) IHelpText {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumHelpText) Style(key, format string, values ...any) IHelpText {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumHelpText) Styles(styles map[string]string) IHelpText {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumHelpText) Class(class string) IHelpText {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumHelpText) Classes(classes ...string) IHelpText {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumHelpText) Id(id string) IHelpText {
	return c.ider.Id(id)
}

// Render renders the sp-help-text component
func (c *spectrumHelpText) Render() app.UI {
	element := app.Elem("sp-help-text")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropIcon {
		element = element.Attr("icon", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropVariant != "" {
		element = element.Attr("variant", string(c.PropVariant))
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
