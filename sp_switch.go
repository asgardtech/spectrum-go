// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// SwitchSize represents the The size of the switch
type SwitchSize string

// SwitchSize values
const (
	SwitchSizeS  SwitchSize = "s"
	SwitchSizeM  SwitchSize = "m"
	SwitchSizeL  SwitchSize = "l"
	SwitchSizeXl SwitchSize = "xl"
)

// spectrumSwitch represents an sp-switch component
type spectrumSwitch struct {
	app.Compo
	*styler[*spectrumSwitch]
	*classer[*spectrumSwitch]
	*ider[*spectrumSwitch]

	// Properties
	// Whether the switch is checked (on)
	PropChecked bool
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// Whether to use the emphasized (blue) visual style
	PropEmphasized bool
	// The name of the switch when used in a form
	PropName string
	// Whether the switch is readonly
	PropReadonly bool
	// The size of the switch
	PropSize SwitchSize
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnChange app.EventHandler
}

// ISwitch is the interface for sp-switch component methods
type ISwitch interface {
	app.UI
	Styler[ISwitch]
	Classer[ISwitch]
	Ider[ISwitch]
	Checked(bool) ISwitch
	SetChecked() ISwitch
	Disabled(bool) ISwitch
	SetDisabled() ISwitch
	Emphasized(bool) ISwitch
	SetEmphasized() ISwitch
	Name(string) ISwitch
	Readonly(bool) ISwitch
	SetReadonly() ISwitch
	Size(SwitchSize) ISwitch
	SizeS() ISwitch
	SizeM() ISwitch
	SizeL() ISwitch
	SizeXl() ISwitch
	Tabindex(float64) ISwitch

	Body(...app.UI) ISwitch
	AddToBody(app.UI) ISwitch
	Text(string) ISwitch

	OnChange(app.EventHandler) ISwitch
}

// Switch A switch is used to turn an option on or off. Switches allow users to select the state of a single option at a time. Use a switch rather than a checkbox when activating (or deactivating) an option, instead of selecting.
func Switch() ISwitch {
	element := &spectrumSwitch{
		PropChecked:    false,
		PropDisabled:   false,
		PropEmphasized: false,
		PropReadonly:   false,
		PropSize:       SwitchSizeM,
		PropTabindex:   0,
		PropBody:       []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Checked Whether the switch is checked (on)
func (c *spectrumSwitch) Checked(checked bool) ISwitch {
	c.PropChecked = checked
	return c
}

func (c *spectrumSwitch) SetChecked() ISwitch {
	return c.Checked(true)
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumSwitch) Disabled(disabled bool) ISwitch {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumSwitch) SetDisabled() ISwitch {
	return c.Disabled(true)
}

// Emphasized Whether to use the emphasized (blue) visual style
func (c *spectrumSwitch) Emphasized(emphasized bool) ISwitch {
	c.PropEmphasized = emphasized
	return c
}

func (c *spectrumSwitch) SetEmphasized() ISwitch {
	return c.Emphasized(true)
}

// Name The name of the switch when used in a form
func (c *spectrumSwitch) Name(name string) ISwitch {
	c.PropName = name
	return c
}

// Readonly Whether the switch is readonly
func (c *spectrumSwitch) Readonly(readonly bool) ISwitch {
	c.PropReadonly = readonly
	return c
}

func (c *spectrumSwitch) SetReadonly() ISwitch {
	return c.Readonly(true)
}

// Size The size of the switch
func (c *spectrumSwitch) Size(size SwitchSize) ISwitch {
	c.PropSize = size
	return c
}

func (c *spectrumSwitch) SizeS() ISwitch {
	return c.Size(SwitchSizeS)
}
func (c *spectrumSwitch) SizeM() ISwitch {
	return c.Size(SwitchSizeM)
}
func (c *spectrumSwitch) SizeL() ISwitch {
	return c.Size(SwitchSizeL)
}
func (c *spectrumSwitch) SizeXl() ISwitch {
	return c.Size(SwitchSizeXl)
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumSwitch) Tabindex(tabindex float64) ISwitch {
	c.PropTabindex = tabindex
	return c
}

// Body sets the content for the default slot
func (c *spectrumSwitch) Body(elements ...app.UI) ISwitch {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumSwitch) AddToBody(element app.UI) ISwitch {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumSwitch) Text(text string) ISwitch {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Announces a change in the checked property of a Switch
func (c *spectrumSwitch) OnChange(handler app.EventHandler) ISwitch {
	c.PropOnChange = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumSwitch) Style(key, format string, values ...any) ISwitch {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumSwitch) Styles(styles map[string]string) ISwitch {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumSwitch) Class(class string) ISwitch {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumSwitch) Classes(classes ...string) ISwitch {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumSwitch) Id(id string) ISwitch {
	return c.ider.Id(id)
}

// Render renders the sp-switch component
func (c *spectrumSwitch) Render() app.UI {
	element := app.Elem("sp-switch")

	// Set attributes
	if c.PropChecked {
		element = element.Attr("checked", true)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropEmphasized {
		element = element.Attr("emphasized", true)
	}
	if c.PropName != "" {
		element = element.Attr("name", c.PropName)
	}
	if c.PropReadonly {
		element = element.Attr("readonly", true)
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabindex", c.PropTabindex)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
