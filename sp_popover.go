// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// PopoverPlacement represents the The placement of the popover and its tip relative to its trigger element
type PopoverPlacement string

// PopoverPlacement values
const (
	PopoverPlacementTop         PopoverPlacement = "top"
	PopoverPlacementTopStart    PopoverPlacement = "top-start"
	PopoverPlacementTopEnd      PopoverPlacement = "top-end"
	PopoverPlacementRight       PopoverPlacement = "right"
	PopoverPlacementRightStart  PopoverPlacement = "right-start"
	PopoverPlacementRightEnd    PopoverPlacement = "right-end"
	PopoverPlacementBottom      PopoverPlacement = "bottom"
	PopoverPlacementBottomStart PopoverPlacement = "bottom-start"
	PopoverPlacementBottomEnd   PopoverPlacement = "bottom-end"
	PopoverPlacementLeft        PopoverPlacement = "left"
	PopoverPlacementLeftStart   PopoverPlacement = "left-start"
	PopoverPlacementLeftEnd     PopoverPlacement = "left-end"
)

// spectrumPopover represents an sp-popover component
type spectrumPopover struct {
	app.Compo
	*styler[*spectrumPopover]
	*classer[*spectrumPopover]
	*ider[*spectrumPopover]

	// Properties
	// Whether the popover is visible or not
	PropOpen bool
	// The placement of the popover and its tip relative to its trigger element
	PropPlacement PopoverPlacement
	// Whether to display the popover with a directional tip
	PropTip bool

	// Content for default slot
	PropBody []app.UI

	// Content slots

}

// IPopover is the interface for sp-popover component methods
type IPopover interface {
	app.UI
	Styler[IPopover]
	Classer[IPopover]
	Ider[IPopover]
	Open(bool) IPopover
	SetOpen() IPopover
	Placement(PopoverPlacement) IPopover
	PlacementTop() IPopover
	PlacementTopStart() IPopover
	PlacementTopEnd() IPopover
	PlacementRight() IPopover
	PlacementRightStart() IPopover
	PlacementRightEnd() IPopover
	PlacementBottom() IPopover
	PlacementBottomStart() IPopover
	PlacementBottomEnd() IPopover
	PlacementLeft() IPopover
	PlacementLeftStart() IPopover
	PlacementLeftEnd() IPopover
	Tip(bool) IPopover
	SetTip() IPopover

	Body(...app.UI) IPopover
	AddToBody(app.UI) IPopover
	Text(string) IPopover
}

// Popover Used to display transient content (menus, options, additional actions) that appears when clicking/tapping on a source. Stands out via its visual style and floats on top of the interface.
func Popover() IPopover {
	element := &spectrumPopover{
		PropOpen:      false,
		PropPlacement: "",
		PropTip:       false,
		PropBody:      []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Open Whether the popover is visible or not
func (c *spectrumPopover) Open(open bool) IPopover {
	c.PropOpen = open
	return c
}

func (c *spectrumPopover) SetOpen() IPopover {
	return c.Open(true)
}

// Placement The placement of the popover and its tip relative to its trigger element
func (c *spectrumPopover) Placement(placement PopoverPlacement) IPopover {
	c.PropPlacement = placement
	return c
}

func (c *spectrumPopover) PlacementTop() IPopover {
	return c.Placement(PopoverPlacementTop)
}
func (c *spectrumPopover) PlacementTopStart() IPopover {
	return c.Placement(PopoverPlacementTopStart)
}
func (c *spectrumPopover) PlacementTopEnd() IPopover {
	return c.Placement(PopoverPlacementTopEnd)
}
func (c *spectrumPopover) PlacementRight() IPopover {
	return c.Placement(PopoverPlacementRight)
}
func (c *spectrumPopover) PlacementRightStart() IPopover {
	return c.Placement(PopoverPlacementRightStart)
}
func (c *spectrumPopover) PlacementRightEnd() IPopover {
	return c.Placement(PopoverPlacementRightEnd)
}
func (c *spectrumPopover) PlacementBottom() IPopover {
	return c.Placement(PopoverPlacementBottom)
}
func (c *spectrumPopover) PlacementBottomStart() IPopover {
	return c.Placement(PopoverPlacementBottomStart)
}
func (c *spectrumPopover) PlacementBottomEnd() IPopover {
	return c.Placement(PopoverPlacementBottomEnd)
}
func (c *spectrumPopover) PlacementLeft() IPopover {
	return c.Placement(PopoverPlacementLeft)
}
func (c *spectrumPopover) PlacementLeftStart() IPopover {
	return c.Placement(PopoverPlacementLeftStart)
}
func (c *spectrumPopover) PlacementLeftEnd() IPopover {
	return c.Placement(PopoverPlacementLeftEnd)
}

// Tip Whether to display the popover with a directional tip
func (c *spectrumPopover) Tip(tip bool) IPopover {
	c.PropTip = tip
	return c
}

func (c *spectrumPopover) SetTip() IPopover {
	return c.Tip(true)
}

// Body sets the content for the default slot
func (c *spectrumPopover) Body(elements ...app.UI) IPopover {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumPopover) AddToBody(element app.UI) IPopover {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumPopover) Text(text string) IPopover {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Style sets a style property with a value
func (c *spectrumPopover) Style(key, format string, values ...any) IPopover {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumPopover) Styles(styles map[string]string) IPopover {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumPopover) Class(class string) IPopover {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumPopover) Classes(classes ...string) IPopover {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumPopover) Id(id string) IPopover {
	return c.ider.Id(id)
}

// Render renders the sp-popover component
func (c *spectrumPopover) Render() app.UI {
	element := app.Elem("sp-popover")

	// Set attributes
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropPlacement != "" {
		element = element.Attr("placement", string(c.PropPlacement))
	}
	if c.PropTip {
		element = element.Attr("tip", true)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
