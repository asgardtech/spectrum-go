// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumFieldGroup represents an sp-field-group component
type spectrumFieldGroup struct {
	app.Compo
	*styler[*spectrumFieldGroup]
	*classer[*spectrumFieldGroup]
	*ider[*spectrumFieldGroup]

	// Properties
	// Whether the fields should be arranged horizontally
	PropHorizontal bool
	// Whether the field group is in an invalid state
	PropInvalid bool
	// An accessible label for the field group
	PropLabel string
	// Whether the fields should be arranged vertically
	PropVertical bool

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropHelpTextSlot         app.UI
	PropNegativeHelpTextSlot app.UI
}

// IFieldGroup is the interface for sp-field-group component methods
type IFieldGroup interface {
	app.UI
	Styler[IFieldGroup]
	Classer[IFieldGroup]
	Ider[IFieldGroup]
	Horizontal(bool) IFieldGroup
	SetHorizontal() IFieldGroup
	Invalid(bool) IFieldGroup
	SetInvalid() IFieldGroup
	Label(string) IFieldGroup
	Vertical(bool) IFieldGroup
	SetVertical() IFieldGroup

	Body(...app.UI) IFieldGroup
	AddToBody(app.UI) IFieldGroup
	Text(string) IFieldGroup

	HelpText(app.UI) IFieldGroup
	NegativeHelpText(app.UI) IFieldGroup
}

// FieldGroup A field group is used to layout a group of fields, usually checkbox elements. It can be leveraged for vertical or horizontal organization of the fields that are supplied as its children.
func FieldGroup() IFieldGroup {
	element := &spectrumFieldGroup{
		PropHorizontal: false,
		PropInvalid:    false,
		PropLabel:      "",
		PropVertical:   false,
		PropBody:       []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Horizontal Whether the fields should be arranged horizontally
func (c *spectrumFieldGroup) Horizontal(horizontal bool) IFieldGroup {
	c.PropHorizontal = horizontal
	return c
}

func (c *spectrumFieldGroup) SetHorizontal() IFieldGroup {
	return c.Horizontal(true)
}

// Invalid Whether the field group is in an invalid state
func (c *spectrumFieldGroup) Invalid(invalid bool) IFieldGroup {
	c.PropInvalid = invalid
	return c
}

func (c *spectrumFieldGroup) SetInvalid() IFieldGroup {
	return c.Invalid(true)
}

// Label An accessible label for the field group
func (c *spectrumFieldGroup) Label(label string) IFieldGroup {
	c.PropLabel = label
	return c
}

// Vertical Whether the fields should be arranged vertically
func (c *spectrumFieldGroup) Vertical(vertical bool) IFieldGroup {
	c.PropVertical = vertical
	return c
}

func (c *spectrumFieldGroup) SetVertical() IFieldGroup {
	return c.Vertical(true)
}

// Body sets the content for the default slot
func (c *spectrumFieldGroup) Body(elements ...app.UI) IFieldGroup {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumFieldGroup) AddToBody(element app.UI) IFieldGroup {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumFieldGroup) Text(text string) IFieldGroup {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Default or non-negative help text to associate to your form element
func (c *spectrumFieldGroup) HelpText(content app.UI) IFieldGroup {
	c.PropHelpTextSlot = content

	return c
}

// Negative help text to associate to your form element when invalid
func (c *spectrumFieldGroup) NegativeHelpText(content app.UI) IFieldGroup {
	c.PropNegativeHelpTextSlot = content

	return c
}

// Style sets a style property with a value
func (c *spectrumFieldGroup) Style(key, format string, values ...any) IFieldGroup {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumFieldGroup) Styles(styles map[string]string) IFieldGroup {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumFieldGroup) Class(class string) IFieldGroup {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumFieldGroup) Classes(classes ...string) IFieldGroup {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumFieldGroup) Id(id string) IFieldGroup {
	return c.ider.Id(id)
}

// Render renders the sp-field-group component
func (c *spectrumFieldGroup) Render() app.UI {
	element := app.Elem("sp-field-group")

	// Set attributes
	if c.PropHorizontal {
		element = element.Attr("horizontal", true)
	}
	if c.PropInvalid {
		element = element.Attr("invalid", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropVertical {
		element = element.Attr("vertical", true)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add help-text slot
	if c.PropHelpTextSlot != nil {
		slotElem := c.PropHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add negative-help-text slot
	if c.PropNegativeHelpTextSlot != nil {
		slotElem := c.PropNegativeHelpTextSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("negative-help-text")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "negative-help-text").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
