// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// SwatchBorder represents the Controls the border style of the swatch
type SwatchBorder string

// SwatchBorder values
const (
	SwatchBorderNone  SwatchBorder = "none"
	SwatchBorderLight SwatchBorder = "light"
)

// SwatchRounding represents the Controls the corner rounding of the swatch
type SwatchRounding string

// SwatchRounding values
const (
	SwatchRoundingNone SwatchRounding = "none"
	SwatchRoundingFull SwatchRounding = "full"
)

// SwatchShape represents the The shape of the swatch (default is square)
type SwatchShape string

// SwatchShape values
const (
	SwatchShapeRectangle SwatchShape = "rectangle"
)

// SwatchSize represents the The size of the swatch
type SwatchSize string

// SwatchSize values
const (
	SwatchSizeXs SwatchSize = "xs"
	SwatchSizeS  SwatchSize = "s"
	SwatchSizeM  SwatchSize = "m"
	SwatchSizeL  SwatchSize = "l"
)

// spectrumSwatch represents an sp-swatch component
type spectrumSwatch struct {
	app.Compo
	*styler[*spectrumSwatch]
	*classer[*spectrumSwatch]
	*ider[*spectrumSwatch]

	// Properties
	// Controls the border style of the swatch
	PropBorder SwatchBorder
	// The color value that the swatch will display
	PropColor string
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// An accessible label for the swatch
	PropLabel string
	// Indicates the swatch represents more than one color
	PropMixedValue bool
	// Indicates the swatch represents no color or transparent
	PropNothing bool
	// Controls the corner rounding of the swatch
	PropRounding SwatchRounding
	// Whether the swatch is selected
	PropSelected bool
	// The shape of the swatch (default is square)
	PropShape SwatchShape
	// The size of the swatch
	PropSize SwatchSize

	// Event handlers
	PropOnChange app.EventHandler
}

// ISwatch is the interface for sp-swatch component methods
type ISwatch interface {
	app.UI
	Styler[ISwatch]
	Classer[ISwatch]
	Ider[ISwatch]
	Border(SwatchBorder) ISwatch
	BorderNone() ISwatch
	BorderLight() ISwatch
	Color(string) ISwatch
	Disabled(bool) ISwatch
	SetDisabled() ISwatch
	Label(string) ISwatch
	MixedValue(bool) ISwatch
	SetMixedValue() ISwatch
	Nothing(bool) ISwatch
	SetNothing() ISwatch
	Rounding(SwatchRounding) ISwatch
	RoundingNone() ISwatch
	RoundingFull() ISwatch
	Selected(bool) ISwatch
	SetSelected() ISwatch
	Shape(SwatchShape) ISwatch
	ShapeRectangle() ISwatch
	Size(SwatchSize) ISwatch
	SizeXs() ISwatch
	SizeS() ISwatch
	SizeM() ISwatch
	SizeL() ISwatch

	OnChange(app.EventHandler) ISwatch
}

// Swatch An sp-swatch shows a small sample of a fill — such as a color, gradient, texture, or material — that is intended to be applied to an object.
func Swatch() ISwatch {
	element := &spectrumSwatch{
		PropColor:      "",
		PropDisabled:   false,
		PropLabel:      "",
		PropMixedValue: false,
		PropNothing:    false,
		PropSelected:   false,
		PropSize:       SwatchSizeM,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Border Controls the border style of the swatch
func (c *spectrumSwatch) Border(border SwatchBorder) ISwatch {
	c.PropBorder = border
	return c
}

func (c *spectrumSwatch) BorderNone() ISwatch {
	return c.Border(SwatchBorderNone)
}
func (c *spectrumSwatch) BorderLight() ISwatch {
	return c.Border(SwatchBorderLight)
}

// Color The color value that the swatch will display
func (c *spectrumSwatch) Color(color string) ISwatch {
	c.PropColor = color
	return c
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumSwatch) Disabled(disabled bool) ISwatch {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumSwatch) SetDisabled() ISwatch {
	return c.Disabled(true)
}

// Label An accessible label for the swatch
func (c *spectrumSwatch) Label(label string) ISwatch {
	c.PropLabel = label
	return c
}

// MixedValue Indicates the swatch represents more than one color
func (c *spectrumSwatch) MixedValue(mixedValue bool) ISwatch {
	c.PropMixedValue = mixedValue
	return c
}

func (c *spectrumSwatch) SetMixedValue() ISwatch {
	return c.MixedValue(true)
}

// Nothing Indicates the swatch represents no color or transparent
func (c *spectrumSwatch) Nothing(nothing bool) ISwatch {
	c.PropNothing = nothing
	return c
}

func (c *spectrumSwatch) SetNothing() ISwatch {
	return c.Nothing(true)
}

// Rounding Controls the corner rounding of the swatch
func (c *spectrumSwatch) Rounding(rounding SwatchRounding) ISwatch {
	c.PropRounding = rounding
	return c
}

func (c *spectrumSwatch) RoundingNone() ISwatch {
	return c.Rounding(SwatchRoundingNone)
}
func (c *spectrumSwatch) RoundingFull() ISwatch {
	return c.Rounding(SwatchRoundingFull)
}

// Selected Whether the swatch is selected
func (c *spectrumSwatch) Selected(selected bool) ISwatch {
	c.PropSelected = selected
	return c
}

func (c *spectrumSwatch) SetSelected() ISwatch {
	return c.Selected(true)
}

// Shape The shape of the swatch (default is square)
func (c *spectrumSwatch) Shape(shape SwatchShape) ISwatch {
	c.PropShape = shape
	return c
}

func (c *spectrumSwatch) ShapeRectangle() ISwatch {
	return c.Shape(SwatchShapeRectangle)
}

// Size The size of the swatch
func (c *spectrumSwatch) Size(size SwatchSize) ISwatch {
	c.PropSize = size
	return c
}

func (c *spectrumSwatch) SizeXs() ISwatch {
	return c.Size(SwatchSizeXs)
}
func (c *spectrumSwatch) SizeS() ISwatch {
	return c.Size(SwatchSizeS)
}
func (c *spectrumSwatch) SizeM() ISwatch {
	return c.Size(SwatchSizeM)
}
func (c *spectrumSwatch) SizeL() ISwatch {
	return c.Size(SwatchSizeL)
}

// Fired when the swatch is selected
func (c *spectrumSwatch) OnChange(handler app.EventHandler) ISwatch {
	c.PropOnChange = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumSwatch) Style(key, format string, values ...any) ISwatch {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumSwatch) Styles(styles map[string]string) ISwatch {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumSwatch) Class(class string) ISwatch {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumSwatch) Classes(classes ...string) ISwatch {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumSwatch) Id(id string) ISwatch {
	return c.ider.Id(id)
}

// Render renders the sp-swatch component
func (c *spectrumSwatch) Render() app.UI {
	element := app.Elem("sp-swatch")

	// Set attributes
	if c.PropBorder != "" {
		element = element.Attr("border", string(c.PropBorder))
	}
	if c.PropColor != "" {
		element = element.Attr("color", c.PropColor)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropMixedValue {
		element = element.Attr("mixed-value", true)
	}
	if c.PropNothing {
		element = element.Attr("nothing", true)
	}
	if c.PropRounding != "" {
		element = element.Attr("rounding", string(c.PropRounding))
	}
	if c.PropSelected {
		element = element.Attr("selected", true)
	}
	if c.PropShape != "" {
		element = element.Attr("shape", string(c.PropShape))
	}
	if c.PropSize != "" {
		element = element.Attr("size", string(c.PropSize))
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
