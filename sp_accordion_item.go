// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumAccordionItem represents an sp-accordion-item component
type spectrumAccordionItem struct {
	app.Compo
	*styler[*spectrumAccordionItem]
	*classer[*spectrumAccordionItem]
	*ider[*spectrumAccordionItem]

	// Properties
	// Disable this control. It will not receive focus or events
	PropDisabled bool
	// The text label for the accordion item header
	PropLabel string
	// Whether the accordion item is open/expanded
	PropOpen bool
	// The tab index to apply to this control. See general documentation about the tabindex HTML property
	PropTabindex float64

	// Content for default slot
	PropBody []app.UI

	// Content slots

	// Event handlers
	PropOnSpAccordionItemToggle app.EventHandler
}

// IAccordionItem is the interface for sp-accordion-item component methods
type IAccordionItem interface {
	app.UI
	Styler[IAccordionItem]
	Classer[IAccordionItem]
	Ider[IAccordionItem]
	Disabled(bool) IAccordionItem
	SetDisabled() IAccordionItem
	Label(string) IAccordionItem
	Open(bool) IAccordionItem
	SetOpen() IAccordionItem
	Tabindex(float64) IAccordionItem

	Body(...app.UI) IAccordionItem
	AddToBody(app.UI) IAccordionItem
	Text(string) IAccordionItem

	OnSpAccordionItemToggle(app.EventHandler) IAccordionItem
}

// AccordionItem The sp-accordion-item element represents a single item in an sp-accordion parent element. Its label attribute and default slot content make up the headline and body of the toggleable content item.
func AccordionItem() IAccordionItem {
	element := &spectrumAccordionItem{
		PropDisabled: false,
		PropLabel:    "",
		PropOpen:     false,
		PropTabindex: 0,
		PropBody:     []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled Disable this control. It will not receive focus or events
func (c *spectrumAccordionItem) Disabled(disabled bool) IAccordionItem {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumAccordionItem) SetDisabled() IAccordionItem {
	return c.Disabled(true)
}

// Label The text label for the accordion item header
func (c *spectrumAccordionItem) Label(label string) IAccordionItem {
	c.PropLabel = label
	return c
}

// Open Whether the accordion item is open/expanded
func (c *spectrumAccordionItem) Open(open bool) IAccordionItem {
	c.PropOpen = open
	return c
}

func (c *spectrumAccordionItem) SetOpen() IAccordionItem {
	return c.Open(true)
}

// Tabindex The tab index to apply to this control. See general documentation about the tabindex HTML property
func (c *spectrumAccordionItem) Tabindex(tabindex float64) IAccordionItem {
	c.PropTabindex = tabindex
	return c
}

// Body sets the content for the default slot
func (c *spectrumAccordionItem) Body(elements ...app.UI) IAccordionItem {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumAccordionItem) AddToBody(element app.UI) IAccordionItem {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumAccordionItem) Text(text string) IAccordionItem {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Fired when an accordion item is toggled open or closed
func (c *spectrumAccordionItem) OnSpAccordionItemToggle(handler app.EventHandler) IAccordionItem {
	c.PropOnSpAccordionItemToggle = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumAccordionItem) Style(key, format string, values ...any) IAccordionItem {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumAccordionItem) Styles(styles map[string]string) IAccordionItem {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumAccordionItem) Class(class string) IAccordionItem {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumAccordionItem) Classes(classes ...string) IAccordionItem {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumAccordionItem) Id(id string) IAccordionItem {
	return c.ider.Id(id)
}

// Render renders the sp-accordion-item component
func (c *spectrumAccordionItem) Render() app.UI {
	element := app.Elem("sp-accordion-item")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}
	if c.PropTabindex != 0 {
		element = element.Attr("tabindex", c.PropTabindex)
	}

	// Add event handlers
	if c.PropOnSpAccordionItemToggle != nil {
		element = element.On("sp-accordion-item-toggle", c.PropOnSpAccordionItemToggle)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
