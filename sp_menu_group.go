// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// MenuGroupSelects represents the How the menu group allows selection of its items: - undefined (default): no selection is allowed - inherit: the selection behavior is managed from an ancestor - single: only one item can be selected at a time - multiple: multiple items can be selected
type MenuGroupSelects string

// MenuGroupSelects values
const (
	MenuGroupSelectsInherit  MenuGroupSelects = "inherit"
	MenuGroupSelectsSingle   MenuGroupSelects = "single"
	MenuGroupSelectsMultiple MenuGroupSelects = "multiple"
)

// spectrumMenuGroup represents an sp-menu-group component
type spectrumMenuGroup struct {
	app.Compo
	*styler[*spectrumMenuGroup]
	*classer[*spectrumMenuGroup]
	*ider[*spectrumMenuGroup]

	// Properties
	// Whether menu group should be ignored by roving tabindex controller
	PropIgnore bool
	// Label of the menu group for accessibility
	PropLabel string
	// How the menu group allows selection of its items: - undefined (default): no selection is allowed - inherit: the selection behavior is managed from an ancestor - single: only one item can be selected at a time - multiple: multiple items can be selected
	PropSelects MenuGroupSelects
	// Value of the selected item(s)
	PropValue string
	// Separator for multiple values when selects is multiple
	PropValueSeparator string

	// Content for default slot
	PropBody []app.UI

	// Content slots
	PropHeaderSlot app.UI

	// Child components
	PropChildren []app.UI

	// Event handlers
	PropOnChange app.EventHandler
	PropOnClose  app.EventHandler
}

// IMenuGroup is the interface for sp-menu-group component methods
type IMenuGroup interface {
	app.UI
	Styler[IMenuGroup]
	Classer[IMenuGroup]
	Ider[IMenuGroup]
	Ignore(bool) IMenuGroup
	SetIgnore() IMenuGroup
	Label(string) IMenuGroup
	Selects(MenuGroupSelects) IMenuGroup
	SelectsInherit() IMenuGroup
	SelectsSingle() IMenuGroup
	SelectsMultiple() IMenuGroup
	Value(string) IMenuGroup
	ValueSeparator(string) IMenuGroup

	Body(...app.UI) IMenuGroup
	AddToBody(app.UI) IMenuGroup
	Text(string) IMenuGroup

	Header(app.UI) IMenuGroup

	Children(...app.UI) IMenuGroup
	AddChild(app.UI) IMenuGroup

	OnChange(app.EventHandler) IMenuGroup
	OnClose(app.EventHandler) IMenuGroup
}

// MenuGroup A menu group gathers a collection of menu-item elements into a group as part of the content delivered in a menu element. It can visually and semantically group related menu items.
func MenuGroup() IMenuGroup {
	element := &spectrumMenuGroup{
		PropIgnore:         false,
		PropLabel:          "",
		PropValue:          "",
		PropValueSeparator: ",",
		PropBody:           []app.UI{},
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Ignore Whether menu group should be ignored by roving tabindex controller
func (c *spectrumMenuGroup) Ignore(ignore bool) IMenuGroup {
	c.PropIgnore = ignore
	return c
}

func (c *spectrumMenuGroup) SetIgnore() IMenuGroup {
	return c.Ignore(true)
}

// Label Label of the menu group for accessibility
func (c *spectrumMenuGroup) Label(label string) IMenuGroup {
	c.PropLabel = label
	return c
}

// Selects How the menu group allows selection of its items: - undefined (default): no selection is allowed - inherit: the selection behavior is managed from an ancestor - single: only one item can be selected at a time - multiple: multiple items can be selected
func (c *spectrumMenuGroup) Selects(selects MenuGroupSelects) IMenuGroup {
	c.PropSelects = selects
	return c
}

func (c *spectrumMenuGroup) SelectsInherit() IMenuGroup {
	return c.Selects(MenuGroupSelectsInherit)
}
func (c *spectrumMenuGroup) SelectsSingle() IMenuGroup {
	return c.Selects(MenuGroupSelectsSingle)
}
func (c *spectrumMenuGroup) SelectsMultiple() IMenuGroup {
	return c.Selects(MenuGroupSelectsMultiple)
}

// Value Value of the selected item(s)
func (c *spectrumMenuGroup) Value(value string) IMenuGroup {
	c.PropValue = value
	return c
}

// ValueSeparator Separator for multiple values when selects is multiple
func (c *spectrumMenuGroup) ValueSeparator(valueSeparator string) IMenuGroup {
	c.PropValueSeparator = valueSeparator
	return c
}

// Body sets the content for the default slot
func (c *spectrumMenuGroup) Body(elements ...app.UI) IMenuGroup {
	c.PropBody = elements
	return c
}

// AddToBody adds a UI element to the default slot
func (c *spectrumMenuGroup) AddToBody(element app.UI) IMenuGroup {
	c.PropBody = append(c.PropBody, element)
	return c
}

// Text sets text content for the default slot
func (c *spectrumMenuGroup) Text(text string) IMenuGroup {
	c.PropBody = []app.UI{app.Text(text)}
	return c
}

// Headline of the menu group
func (c *spectrumMenuGroup) Header(content app.UI) IMenuGroup {
	c.PropHeaderSlot = content

	return c
}

// Children sets the child components
func (c *spectrumMenuGroup) Children(children ...app.UI) IMenuGroup {
	c.PropChildren = children

	return c
}

// AddChild adds a child component
func (c *spectrumMenuGroup) AddChild(child app.UI) IMenuGroup {
	c.PropChildren = append(c.PropChildren, child)

	return c
}

// Announces that the value of the element has changed
func (c *spectrumMenuGroup) OnChange(handler app.EventHandler) IMenuGroup {
	c.PropOnChange = handler

	return c
}

// Fired when the menu group should be closed
func (c *spectrumMenuGroup) OnClose(handler app.EventHandler) IMenuGroup {
	c.PropOnClose = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumMenuGroup) Style(key, format string, values ...any) IMenuGroup {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumMenuGroup) Styles(styles map[string]string) IMenuGroup {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumMenuGroup) Class(class string) IMenuGroup {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumMenuGroup) Classes(classes ...string) IMenuGroup {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumMenuGroup) Id(id string) IMenuGroup {
	return c.ider.Id(id)
}

// Render renders the sp-menu-group component
func (c *spectrumMenuGroup) Render() app.UI {
	element := app.Elem("sp-menu-group")

	// Set attributes
	if c.PropIgnore {
		element = element.Attr("ignore", true)
	}
	if c.PropLabel != "" {
		element = element.Attr("label", c.PropLabel)
	}
	if c.PropSelects != "" {
		element = element.Attr("selects", string(c.PropSelects))
	}
	if c.PropValue != "" {
		element = element.Attr("value", c.PropValue)
	}
	if c.PropValueSeparator != "" {
		element = element.Attr("value-separator", c.PropValueSeparator)
	}

	// Add event handlers
	if c.PropOnChange != nil {
		element = element.On("change", c.PropOnChange)
	}
	if c.PropOnClose != nil {
		element = element.On("close", c.PropOnClose)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add content for default slot if specified
	if len(c.PropBody) > 0 {
		slotElements = append(slotElements, c.PropBody...)
	}

	// Add header slot
	if c.PropHeaderSlot != nil {
		slotElem := c.PropHeaderSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("header")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "header").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add children if no default slot content is provided
	if len(c.PropChildren) > 0 {
		// If there's a default slot, only add children if the default slot is empty
		if len(c.PropBody) == 0 {
			for _, child := range c.PropChildren {
				slotElements = append(slotElements, child)
			}
		}
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
