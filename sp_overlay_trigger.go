// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// OverlayTriggerPlacement represents the The placement of the overlay relative to the trigger
type OverlayTriggerPlacement string

// OverlayTriggerPlacement values
const (
	OverlayTriggerPlacementTop         OverlayTriggerPlacement = "top"
	OverlayTriggerPlacementTopStart    OverlayTriggerPlacement = "top-start"
	OverlayTriggerPlacementTopEnd      OverlayTriggerPlacement = "top-end"
	OverlayTriggerPlacementRight       OverlayTriggerPlacement = "right"
	OverlayTriggerPlacementRightStart  OverlayTriggerPlacement = "right-start"
	OverlayTriggerPlacementRightEnd    OverlayTriggerPlacement = "right-end"
	OverlayTriggerPlacementBottom      OverlayTriggerPlacement = "bottom"
	OverlayTriggerPlacementBottomStart OverlayTriggerPlacement = "bottom-start"
	OverlayTriggerPlacementBottomEnd   OverlayTriggerPlacement = "bottom-end"
	OverlayTriggerPlacementLeft        OverlayTriggerPlacement = "left"
	OverlayTriggerPlacementLeftStart   OverlayTriggerPlacement = "left-start"
	OverlayTriggerPlacementLeftEnd     OverlayTriggerPlacement = "left-end"
)

// OverlayTriggerReceivesfocus represents the How focus should be handled when the overlay opens
type OverlayTriggerReceivesfocus string

// OverlayTriggerReceivesfocus values
const (
	OverlayTriggerReceivesfocusTrue  OverlayTriggerReceivesfocus = "true"
	OverlayTriggerReceivesfocusFalse OverlayTriggerReceivesfocus = "false"
	OverlayTriggerReceivesfocusAuto  OverlayTriggerReceivesfocus = "auto"
)

// spectrumOverlayTrigger represents an sp-overlay-trigger component
type spectrumOverlayTrigger struct {
	app.Compo
	*styler[*spectrumOverlayTrigger]
	*classer[*spectrumOverlayTrigger]
	*ider[*spectrumOverlayTrigger]

	// Properties
	// Whether the overlay trigger is disabled
	PropDisabled bool
	// The distance between the overlay and the trigger
	PropOffset float64
	// The type of overlay that is currently open
	PropOpen string
	// The placement of the overlay relative to the trigger
	PropPlacement OverlayTriggerPlacement
	// How focus should be handled when the overlay opens
	PropReceivesfocus OverlayTriggerReceivesfocus
	// Explicitly declares which types of overlays will be used (space-separated: 'click hover longpress')
	PropTriggeredby string
	// How the overlay appears in the tab order
	PropType string

	// Content slots
	PropTriggerSlot                        app.UI
	PropClickContentSlot                   app.UI
	PropHoverContentSlot                   app.UI
	PropLongpressContentSlot               app.UI
	PropLongpressDescribedbyDescriptorSlot app.UI

	// Event handlers
	PropOnSpOpened app.EventHandler
	PropOnSpClosed app.EventHandler
}

// IOverlayTrigger is the interface for sp-overlay-trigger component methods
type IOverlayTrigger interface {
	app.UI
	Styler[IOverlayTrigger]
	Classer[IOverlayTrigger]
	Ider[IOverlayTrigger]
	Disabled(bool) IOverlayTrigger
	SetDisabled() IOverlayTrigger
	Offset(float64) IOverlayTrigger
	Open(string) IOverlayTrigger
	Placement(OverlayTriggerPlacement) IOverlayTrigger
	PlacementTop() IOverlayTrigger
	PlacementTopStart() IOverlayTrigger
	PlacementTopEnd() IOverlayTrigger
	PlacementRight() IOverlayTrigger
	PlacementRightStart() IOverlayTrigger
	PlacementRightEnd() IOverlayTrigger
	PlacementBottom() IOverlayTrigger
	PlacementBottomStart() IOverlayTrigger
	PlacementBottomEnd() IOverlayTrigger
	PlacementLeft() IOverlayTrigger
	PlacementLeftStart() IOverlayTrigger
	PlacementLeftEnd() IOverlayTrigger
	Receivesfocus(OverlayTriggerReceivesfocus) IOverlayTrigger
	ReceivesfocusTrue() IOverlayTrigger
	ReceivesfocusFalse() IOverlayTrigger
	ReceivesfocusAuto() IOverlayTrigger
	Triggeredby(string) IOverlayTrigger
	Type(string) IOverlayTrigger

	Trigger(app.UI) IOverlayTrigger
	ClickContent(app.UI) IOverlayTrigger
	HoverContent(app.UI) IOverlayTrigger
	LongpressContent(app.UI) IOverlayTrigger
	LongpressDescribedbyDescriptor(app.UI) IOverlayTrigger

	OnSpOpened(app.EventHandler) IOverlayTrigger
	OnSpClosed(app.EventHandler) IOverlayTrigger
}

// OverlayTrigger Supports the delivery of temporary overlay content based on interaction with a persistent trigger element.
func OverlayTrigger() IOverlayTrigger {
	element := &spectrumOverlayTrigger{
		PropDisabled:      false,
		PropOffset:        6,
		PropOpen:          "",
		PropPlacement:     "",
		PropReceivesfocus: OverlayTriggerReceivesfocusAuto,
		PropTriggeredby:   "",
		PropType:          "",
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Disabled Whether the overlay trigger is disabled
func (c *spectrumOverlayTrigger) Disabled(disabled bool) IOverlayTrigger {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumOverlayTrigger) SetDisabled() IOverlayTrigger {
	return c.Disabled(true)
}

// Offset The distance between the overlay and the trigger
func (c *spectrumOverlayTrigger) Offset(offset float64) IOverlayTrigger {
	c.PropOffset = offset
	return c
}

// Open The type of overlay that is currently open
func (c *spectrumOverlayTrigger) Open(open string) IOverlayTrigger {
	c.PropOpen = open
	return c
}

// Placement The placement of the overlay relative to the trigger
func (c *spectrumOverlayTrigger) Placement(placement OverlayTriggerPlacement) IOverlayTrigger {
	c.PropPlacement = placement
	return c
}

func (c *spectrumOverlayTrigger) PlacementTop() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementTop)
}
func (c *spectrumOverlayTrigger) PlacementTopStart() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementTopStart)
}
func (c *spectrumOverlayTrigger) PlacementTopEnd() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementTopEnd)
}
func (c *spectrumOverlayTrigger) PlacementRight() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementRight)
}
func (c *spectrumOverlayTrigger) PlacementRightStart() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementRightStart)
}
func (c *spectrumOverlayTrigger) PlacementRightEnd() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementRightEnd)
}
func (c *spectrumOverlayTrigger) PlacementBottom() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementBottom)
}
func (c *spectrumOverlayTrigger) PlacementBottomStart() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementBottomStart)
}
func (c *spectrumOverlayTrigger) PlacementBottomEnd() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementBottomEnd)
}
func (c *spectrumOverlayTrigger) PlacementLeft() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementLeft)
}
func (c *spectrumOverlayTrigger) PlacementLeftStart() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementLeftStart)
}
func (c *spectrumOverlayTrigger) PlacementLeftEnd() IOverlayTrigger {
	return c.Placement(OverlayTriggerPlacementLeftEnd)
}

// Receivesfocus How focus should be handled when the overlay opens
func (c *spectrumOverlayTrigger) Receivesfocus(receivesFocus OverlayTriggerReceivesfocus) IOverlayTrigger {
	c.PropReceivesfocus = receivesFocus
	return c
}

func (c *spectrumOverlayTrigger) ReceivesfocusTrue() IOverlayTrigger {
	return c.Receivesfocus(OverlayTriggerReceivesfocusTrue)
}
func (c *spectrumOverlayTrigger) ReceivesfocusFalse() IOverlayTrigger {
	return c.Receivesfocus(OverlayTriggerReceivesfocusFalse)
}
func (c *spectrumOverlayTrigger) ReceivesfocusAuto() IOverlayTrigger {
	return c.Receivesfocus(OverlayTriggerReceivesfocusAuto)
}

// Triggeredby Explicitly declares which types of overlays will be used (space-separated: 'click hover longpress')
func (c *spectrumOverlayTrigger) Triggeredby(triggeredBy string) IOverlayTrigger {
	c.PropTriggeredby = triggeredBy
	return c
}

// Type How the overlay appears in the tab order
func (c *spectrumOverlayTrigger) Type(typeValue string) IOverlayTrigger {
	c.PropType = typeValue
	return c
}

// The content that will trigger the various overlays
func (c *spectrumOverlayTrigger) Trigger(content app.UI) IOverlayTrigger {
	c.PropTriggerSlot = content

	return c
}

// The content that will be displayed on click
func (c *spectrumOverlayTrigger) ClickContent(content app.UI) IOverlayTrigger {
	c.PropClickContentSlot = content

	return c
}

// The content that will be displayed on hover
func (c *spectrumOverlayTrigger) HoverContent(content app.UI) IOverlayTrigger {
	c.PropHoverContentSlot = content

	return c
}

// The content that will be displayed on longpress
func (c *spectrumOverlayTrigger) LongpressContent(content app.UI) IOverlayTrigger {
	c.PropLongpressContentSlot = content

	return c
}

// Description for longpress content
func (c *spectrumOverlayTrigger) LongpressDescribedbyDescriptor(content app.UI) IOverlayTrigger {
	c.PropLongpressDescribedbyDescriptorSlot = content

	return c
}

// Announces that the overlay has been opened
func (c *spectrumOverlayTrigger) OnSpOpened(handler app.EventHandler) IOverlayTrigger {
	c.PropOnSpOpened = handler

	return c
}

// Announces that the overlay has been closed
func (c *spectrumOverlayTrigger) OnSpClosed(handler app.EventHandler) IOverlayTrigger {
	c.PropOnSpClosed = handler

	return c
}

// Style sets a style property with a value
func (c *spectrumOverlayTrigger) Style(key, format string, values ...any) IOverlayTrigger {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumOverlayTrigger) Styles(styles map[string]string) IOverlayTrigger {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumOverlayTrigger) Class(class string) IOverlayTrigger {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumOverlayTrigger) Classes(classes ...string) IOverlayTrigger {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumOverlayTrigger) Id(id string) IOverlayTrigger {
	return c.ider.Id(id)
}

// Render renders the sp-overlay-trigger component
func (c *spectrumOverlayTrigger) Render() app.UI {
	element := app.Elem("sp-overlay-trigger")

	// Set attributes
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropOffset != 0 {
		element = element.Attr("offset", c.PropOffset)
	}
	if c.PropOpen != "" {
		element = element.Attr("open", c.PropOpen)
	}
	if c.PropPlacement != "" {
		element = element.Attr("placement", string(c.PropPlacement))
	}
	if c.PropReceivesfocus != "" {
		element = element.Attr("receivesFocus", string(c.PropReceivesfocus))
	}
	if c.PropTriggeredby != "" {
		element = element.Attr("triggeredBy", c.PropTriggeredby)
	}
	if c.PropType != "" {
		element = element.Attr("type", c.PropType)
	}

	// Add event handlers
	if c.PropOnSpOpened != nil {
		element = element.On("sp-opened", c.PropOnSpOpened)
	}
	if c.PropOnSpClosed != nil {
		element = element.On("sp-closed", c.PropOnSpClosed)
	}

	// Add slots and children
	slotElements := []app.UI{}

	// Add trigger slot
	if c.PropTriggerSlot != nil {
		slotElem := c.PropTriggerSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("trigger")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "trigger").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add click-content slot
	if c.PropClickContentSlot != nil {
		slotElem := c.PropClickContentSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("click-content")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "click-content").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add hover-content slot
	if c.PropHoverContentSlot != nil {
		slotElem := c.PropHoverContentSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("hover-content")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "hover-content").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add longpress-content slot
	if c.PropLongpressContentSlot != nil {
		slotElem := c.PropLongpressContentSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("longpress-content")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "longpress-content").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}
	// Add longpress-describedby-descriptor slot
	if c.PropLongpressDescribedbyDescriptorSlot != nil {
		slotElem := c.PropLongpressDescribedbyDescriptorSlot
		if slotWithAttr, ok := slotElem.(interface{ Slot(string) app.UI }); ok {
			slotElem = slotWithAttr.Slot("longpress-describedby-descriptor")
		} else {
			slotElem = app.Elem("div").
				Attr("slot", "longpress-describedby-descriptor").
				Body(slotElem)
		}
		slotElements = append(slotElements, slotElem)
	}

	// Add all elements to the component
	if len(slotElements) > 0 {
		element = element.Body(slotElements...)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
