// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumColorHandle represents an sp-color-handle component
type spectrumColorHandle struct {
	app.Compo
	*styler[*spectrumColorHandle]
	*classer[*spectrumColorHandle]
	*ider[*spectrumColorHandle]

	// Properties
	// The color to display in the handle
	PropColor string
	// Disables interaction with the handle
	PropDisabled bool
	// Indicates whether the handle has focus
	PropFocused bool
	// When true, displays a color loupe above the handle to show the selected color
	PropOpen bool
}

// IColorHandle is the interface for sp-color-handle component methods
type IColorHandle interface {
	app.UI
	Styler[IColorHandle]
	Classer[IColorHandle]
	Ider[IColorHandle]
	Color(string) IColorHandle
	Disabled(bool) IColorHandle
	SetDisabled() IColorHandle
	Focused(bool) IColorHandle
	SetFocused() IColorHandle
	Open(bool) IColorHandle
	SetOpen() IColorHandle
}

// ColorHandle The sp-color-handle is used to select a colour on an sp-color-area, sp-color-slider, or sp-color-wheel. It functions similarly to the handle on an sp-slider.
func ColorHandle() IColorHandle {
	element := &spectrumColorHandle{
		PropColor:    "rgba(255, 0, 0, 0.5)",
		PropDisabled: false,
		PropFocused:  false,
		PropOpen:     false,
	}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Color The color to display in the handle
func (c *spectrumColorHandle) Color(color string) IColorHandle {
	c.PropColor = color
	return c
}

// Disabled Disables interaction with the handle
func (c *spectrumColorHandle) Disabled(disabled bool) IColorHandle {
	c.PropDisabled = disabled
	return c
}

func (c *spectrumColorHandle) SetDisabled() IColorHandle {
	return c.Disabled(true)
}

// Focused Indicates whether the handle has focus
func (c *spectrumColorHandle) Focused(focused bool) IColorHandle {
	c.PropFocused = focused
	return c
}

func (c *spectrumColorHandle) SetFocused() IColorHandle {
	return c.Focused(true)
}

// Open When true, displays a color loupe above the handle to show the selected color
func (c *spectrumColorHandle) Open(open bool) IColorHandle {
	c.PropOpen = open
	return c
}

func (c *spectrumColorHandle) SetOpen() IColorHandle {
	return c.Open(true)
}

// Style sets a style property with a value
func (c *spectrumColorHandle) Style(key, format string, values ...any) IColorHandle {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumColorHandle) Styles(styles map[string]string) IColorHandle {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumColorHandle) Class(class string) IColorHandle {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumColorHandle) Classes(classes ...string) IColorHandle {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumColorHandle) Id(id string) IColorHandle {
	return c.ider.Id(id)
}

// Render renders the sp-color-handle component
func (c *spectrumColorHandle) Render() app.UI {
	element := app.Elem("sp-color-handle")

	// Set attributes
	if c.PropColor != "" {
		element = element.Attr("color", c.PropColor)
	}
	if c.PropDisabled {
		element = element.Attr("disabled", true)
	}
	if c.PropFocused {
		element = element.Attr("focused", true)
	}
	if c.PropOpen {
		element = element.Attr("open", true)
	}

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
