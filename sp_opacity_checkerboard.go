// This file is generated by the generate_components.py script
// Do not edit this file manually

package sp

import "github.com/maxence-charriere/go-app/v10/pkg/app"

// spectrumOpacityCheckerboard represents an  component
type spectrumOpacityCheckerboard struct {
	app.Compo
	*styler[*spectrumOpacityCheckerboard]
	*classer[*spectrumOpacityCheckerboard]
	*ider[*spectrumOpacityCheckerboard]

	// Properties

}

// IOpacityCheckerboard is the interface for  component methods
type IOpacityCheckerboard interface {
	app.UI
	Styler[IOpacityCheckerboard]
	Classer[IOpacityCheckerboard]
	Ider[IOpacityCheckerboard]
}

// OpacityCheckerboard The opacity-checkerboard class is used to highlight opacity in components. It provides a checkerboard pattern as a background to visualize transparency.
func OpacityCheckerboard() IOpacityCheckerboard {
	element := &spectrumOpacityCheckerboard{}

	element.styler = newStyler(element)
	element.classer = newClasser(element)
	element.ider = newIder(element)

	return element
}

// Style sets a style property with a value
func (c *spectrumOpacityCheckerboard) Style(key, format string, values ...any) IOpacityCheckerboard {
	return c.styler.Style(key, format, values...)
}

// Styles sets multiple style properties
func (c *spectrumOpacityCheckerboard) Styles(styles map[string]string) IOpacityCheckerboard {
	return c.styler.Styles(styles)
}

// Class adds a class to the element
func (c *spectrumOpacityCheckerboard) Class(class string) IOpacityCheckerboard {
	return c.classer.Class(class)
}

// Classes adds multiple classes to the element
func (c *spectrumOpacityCheckerboard) Classes(classes ...string) IOpacityCheckerboard {
	return c.classer.Classes(classes...)
}

// Id sets the id of the element
func (c *spectrumOpacityCheckerboard) Id(id string) IOpacityCheckerboard {
	return c.ider.Id(id)
}

// Render renders the  component
func (c *spectrumOpacityCheckerboard) Render() app.UI {
	element := app.Elem("")

	// Set attributes

	// Apply styles, classes, and id
	element = element.Styles(c.styler.styles)

	// Apply classes if any
	if len(c.classer.classes) > 0 {
		element = element.Class(c.classer.classes...)
	}

	// Apply id if set
	if c.ider.id != "" {
		element = element.ID(c.ider.id)
	}

	return element
}
